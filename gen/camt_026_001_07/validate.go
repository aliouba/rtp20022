// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.026.001.07
package camt_026_001_07

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}

	rtp.AddError(&errs, v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Assgnr.Validate())
	rtp.AddError(&errs, v.Assgne.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Assgnr.Validate())
	rtp.AddError(&errs, v.Assgne.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndDateTime2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Dt != nil {
		rtp.AddError(&errs, v.Dt.Validate())
	}
	if v.DtTm != nil {
		rtp.AddError(&errs, v.DtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.UblToApply.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MissingOrIncorrectInformation3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.MssngInf != nil {
		for indx := range v.MssngInf {
			rtp.AddError(&errs, v.MssngInf[indx].Validate())
		}
	}
	if v.IncrrctInf != nil {
		for indx := range v.IncrrctInf {
			rtp.AddError(&errs, v.IncrrctInf[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Pty != nil {
		rtp.AddError(&errs, v.Pty.Validate())
	}
	if v.Agt != nil {
		rtp.AddError(&errs, v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Agt != nil {
		rtp.AddError(&errs, v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Pty != nil {
		rtp.AddError(&errs, v.Pty.Validate())
	}
	if v.Agt != nil {
		rtp.AddError(&errs, v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Nm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Nm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnableToApplyIncorrect1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Cd.Validate())
	if v.AddtlIncrrctInf != nil {
		rtp.AddError(&errs, v.AddtlIncrrctInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnableToApplyJustification3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.MssngOrIncrrctInf != nil {
		rtp.AddError(&errs, v.MssngOrIncrrctInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnableToApplyMissing1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Cd.Validate())
	if v.AddtlMssngInf != nil {
		rtp.AddError(&errs, v.AddtlMssngInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnableToApplyV07) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Assgnmt.Validate())
	rtp.AddError(&errs, v.Case.Validate())
	rtp.AddError(&errs, v.Undrlyg.Validate())
	rtp.AddError(&errs, v.Justfn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnableToApplyV07TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Assgnmt.Validate())
	rtp.AddError(&errs, v.Case.Validate())
	rtp.AddError(&errs, v.Undrlyg.Validate())
	rtp.AddError(&errs, v.Justfn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingGroupInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, v.OrgnlMsgNmId.Validate())
	rtp.AddError(&errs, v.OrgnlCreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingGroupInformation1TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, v.OrgnlMsgNmId.Validate())
	rtp.AddError(&errs, v.OrgnlCreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingGroupInformation1TCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, v.OrgnlMsgNmId.Validate())
	rtp.AddError(&errs, v.OrgnlCreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingPaymentInstruction5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlGrpInf.Validate())
	rtp.AddError(&errs, v.OrgnlPmtInfId.Validate())
	if v.OrgnlEndToEndId != nil {
		rtp.AddError(&errs, v.OrgnlEndToEndId.Validate())
	}
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, v.OrgnlUETR.Validate())
	}
	rtp.AddError(&errs, v.OrgnlInstdAmt.Validate())
	rtp.AddError(&errs, v.ReqdExctnDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingPaymentInstruction5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlGrpInf.Validate())
	rtp.AddError(&errs, v.OrgnlPmtInfId.Validate())
	if v.OrgnlEndToEndId != nil {
		rtp.AddError(&errs, v.OrgnlEndToEndId.Validate())
	}
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, v.OrgnlUETR.Validate())
	}
	rtp.AddError(&errs, v.OrgnlInstdAmt.Validate())
	rtp.AddError(&errs, v.ReqdExctnDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingPaymentTransaction4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlGrpInf.Validate())
	rtp.AddError(&errs, v.OrgnlInstrId.Validate())
	if v.OrgnlEndToEndId != nil {
		rtp.AddError(&errs, v.OrgnlEndToEndId.Validate())
	}
	rtp.AddError(&errs, v.OrgnlTxId.Validate())
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, v.OrgnlUETR.Validate())
	}
	rtp.AddError(&errs, v.OrgnlIntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, v.OrgnlIntrBkSttlmDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingPaymentTransaction4TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlGrpInf.Validate())
	rtp.AddError(&errs, v.OrgnlInstrId.Validate())
	if v.OrgnlEndToEndId != nil {
		rtp.AddError(&errs, v.OrgnlEndToEndId.Validate())
	}
	rtp.AddError(&errs, v.OrgnlTxId.Validate())
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, v.OrgnlUETR.Validate())
	}
	rtp.AddError(&errs, v.OrgnlIntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, v.OrgnlIntrBkSttlmDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingTransaction5Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Initn != nil {
		rtp.AddError(&errs, v.Initn.Validate())
	}
	if v.IntrBk != nil {
		rtp.AddError(&errs, v.IntrBk.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingTransaction5ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Initn != nil {
		rtp.AddError(&errs, v.Initn.Validate())
	}
	if v.IntrBk != nil {
		rtp.AddError(&errs, v.IntrBk.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[A-Z]{3,3}`))
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "USD"))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max140Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 140))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `M[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 9))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 9))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrigMsgName) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "pacs.008.001.06", "pacs.008.001.08", "pain.013.001.07"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrigMsgNameTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "pain.013.001.07"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrigMsgNameTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "pacs.008.001.06", "pacs.008.001.08"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnableToApplyIncorrectInformation4Code) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "IN01", "IN04", "IN06", "IN15", "IN19", "IN38", "IN39", "MM20", "MM21", "NARR"))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnableToApplyMissingInformation3Code) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "MS01", "NARR"))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UUIDv4Identifier) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`))
	if errs.Empty() {
		return nil
	}
	return errs
}
