// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.029.001.09
package camt_029_001_09

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}

	rtp.AddError(&errs, v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CancellationStatusReason3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Cd != nil {
		rtp.AddError(&errs, v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CancellationStatusReason3ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Cd != nil {
		rtp.AddError(&errs, v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CancellationStatusReason4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Rsn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CancellationStatusReason4TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Rsn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Assgnr.Validate())
	rtp.AddError(&errs, v.Assgne.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Assgnr.Validate())
	rtp.AddError(&errs, v.Assgne.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Charges7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Amt.Validate())
	rtp.AddError(&errs, v.Agt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Charges7TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Amt.Validate())
	rtp.AddError(&errs, v.Agt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.RsltnOfInvstgtn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationStatus5Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Conf != nil {
		rtp.AddError(&errs, v.Conf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupHeader14) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.RslvdCase.Validate())
	rtp.AddError(&errs, v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, v.OrgnlMsgNmId.Validate())
	rtp.AddError(&errs, v.OrgnlCreDtTm.Validate())
	if v.CxlStsRsnInf != nil {
		rtp.AddError(&errs, v.CxlStsRsnInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupHeader14TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.RslvdCase.Validate())
	rtp.AddError(&errs, v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, v.OrgnlMsgNmId.Validate())
	rtp.AddError(&errs, v.OrgnlCreDtTm.Validate())
	if v.CxlStsRsnInf != nil {
		rtp.AddError(&errs, v.CxlStsRsnInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Agt != nil {
		rtp.AddError(&errs, v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Agt != nil {
		rtp.AddError(&errs, v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransaction102) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.CxlStsId != nil {
		rtp.AddError(&errs, v.CxlStsId.Validate())
	}
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, v.OrgnlUETR.Validate())
	}
	if v.RsltnRltdInf != nil {
		rtp.AddError(&errs, v.RsltnRltdInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransaction102TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.CxlStsId != nil {
		rtp.AddError(&errs, v.CxlStsId.Validate())
	}
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, v.OrgnlUETR.Validate())
	}
	if v.RsltnRltdInf != nil {
		rtp.AddError(&errs, v.RsltnRltdInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ResolutionData1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.IntrBkSttlmAmt.Validate())
	if v.IntrBkSttlmDt != nil {
		rtp.AddError(&errs, v.IntrBkSttlmDt.Validate())
	}
	if v.ClrChanl != nil {
		rtp.AddError(&errs, v.ClrChanl.Validate())
	}
	if v.Chrgs != nil {
		rtp.AddError(&errs, v.Chrgs.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ResolutionData1TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.IntrBkSttlmAmt.Validate())
	if v.IntrBkSttlmDt != nil {
		rtp.AddError(&errs, v.IntrBkSttlmDt.Validate())
	}
	if v.ClrChanl != nil {
		rtp.AddError(&errs, v.ClrChanl.Validate())
	}
	if v.Chrgs != nil {
		rtp.AddError(&errs, v.Chrgs.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ResolutionOfInvestigationV09) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Assgnmt.Validate())
	rtp.AddError(&errs, v.Sts.Validate())
	rtp.AddError(&errs, v.CxlDtls.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ResolutionOfInvestigationV09TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Assgnmt.Validate())
	rtp.AddError(&errs, v.Sts.Validate())
	rtp.AddError(&errs, v.CxlDtls.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingTransaction22) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlGrpInfAndSts.Validate())
	if v.TxInfAndSts != nil {
		rtp.AddError(&errs, v.TxInfAndSts.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingTransaction22TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlGrpInfAndSts.Validate())
	if v.TxInfAndSts != nil {
		rtp.AddError(&errs, v.TxInfAndSts.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[A-Z]{3,3}`))
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "USD"))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingChannel2Code) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "MPNS", "RTGS", "RTNS"))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ExternalInvestigationExecutionConfirmation1Code) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "IPAY", "PECR", "RJCR"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 4))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ExternalPaymentCancellationRejection1Code) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "AC04", "AM04", "ARDT", "CUST", "LEGL", "NOAS", "NOOR"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 4))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ExternalPaymentCancellationRejection1CodeTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "AC04", "AM04", "ARDT", "CUST", "LEGL", "NOAS", "NOOR"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 4))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `M[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 9))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 9))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrigMsgName) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "camt.056.001.05", "camt.056.001.08"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UUIDv4Identifier) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`))
	if errs.Empty() {
		return nil
	}
	return errs
}
