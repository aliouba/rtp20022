// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:ma:20022:tech:xsd:admn.008.001.01
package admn_008_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v AvailabilityParticipant) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.PtcptSgnOff != nil {
		rtp.AddError(&errs, v.PtcptSgnOff.Validate())
	}
	if v.PtcptSspd != nil {
		rtp.AddError(&errs, v.PtcptSspd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AvailabilityParticipantTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.PtcptSgnOff != nil {
		rtp.AddError(&errs, v.PtcptSgnOff.Validate())
	}
	if v.PtcptSspd != nil {
		rtp.AddError(&errs, v.PtcptSspd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AvailabilityReport) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Cnnctn != nil {
		rtp.AddError(&errs, v.Cnnctn.Validate())
	}
	if v.AvlbtyPtcpt != nil {
		rtp.AddError(&errs, v.AvlbtyPtcpt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AvailabilityReportTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Cnnctn != nil {
		rtp.AddError(&errs, v.Cnnctn.Validate())
	}
	if v.AvlbtyPtcpt != nil {
		rtp.AddError(&errs, v.AvlbtyPtcpt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification4ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Connection) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	for indx := range v.CnnctnId {
		rtp.AddError(&errs, v.CnnctnId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ConnectionTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	for indx := range v.CnnctnId {
		rtp.AddError(&errs, v.CnnctnId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatabaseAvailabilityReport) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.GrpHdr.Validate())
	rtp.AddError(&errs, v.DBRptRspn.Validate())
	rtp.AddError(&errs, v.AvlbtyRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatabaseAvailabilityReportTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.GrpHdr.Validate())
	rtp.AddError(&errs, v.DBRptRspn.Validate())
	rtp.AddError(&errs, v.AvlbtyRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatabaseReportReponse) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlInstrId.Validate())
	rtp.AddError(&errs, v.RptCd.Validate())
	rtp.AddError(&errs, v.InstgAgt.Validate())
	rtp.AddError(&errs, v.InstdAgt.Validate())
	rtp.AddError(&errs, v.TxSts.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DatabaseReportReponseTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlInstrId.Validate())
	rtp.AddError(&errs, v.RptCd.Validate())
	rtp.AddError(&errs, v.InstgAgt.Validate())
	rtp.AddError(&errs, v.InstdAgt.Validate())
	rtp.AddError(&errs, v.TxSts.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.DBAvlbtyRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification7ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GrpHdr) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ParticipantSignOff) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	for indx := range v.PtcptId {
		rtp.AddError(&errs, v.PtcptId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ParticipantSignOffTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	for indx := range v.PtcptId {
		rtp.AddError(&errs, v.PtcptId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ParticipantSuspended) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	for indx := range v.PtcptId {
		rtp.AddError(&errs, v.PtcptId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ParticipantSuspendedTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	for indx := range v.PtcptId {
		rtp.AddError(&errs, v.PtcptId[indx].Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Max20AlphaNumericText) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[a-zA-Z0-9]{1,20}`))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 20))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Min11Max11Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 11))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 11))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReportCode) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "AVLBTY"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 6))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReportCodeTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "AVLBTY"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 6))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionIndividualStatus3CodeEcho) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "ACTC"))
	if errs.Empty() {
		return nil
	}
	return errs
}
