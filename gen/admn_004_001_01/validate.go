// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admn.004.001.01
package admn_004_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v BranchAndFinancialInstitutionIdentification4ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.AdmnSignOffResp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification7ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GrpHdr) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GrpHdrTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SignOffResp) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlInstrId.Validate())
	rtp.AddError(&errs, v.InstgAgt.Validate())
	rtp.AddError(&errs, v.InstdAgt.Validate())
	rtp.AddError(&errs, v.Sts.Validate())
	if v.StsRsnInf != nil {
		rtp.AddError(&errs, v.StsRsnInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SignOffResponse) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.GrpHdr.Validate())
	rtp.AddError(&errs, v.SignOffResp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SignOffResponseTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.GrpHdr.Validate())
	rtp.AddError(&errs, v.SignOffResp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SignOffRespTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlInstrId.Validate())
	rtp.AddError(&errs, v.InstgAgt.Validate())
	rtp.AddError(&errs, v.InstdAgt.Validate())
	rtp.AddError(&errs, v.Sts.Validate())
	if v.StsRsnInf != nil {
		rtp.AddError(&errs, v.StsRsnInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatusReason6Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Prtry != nil {
		rtp.AddError(&errs, v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatusReasonInformation8) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Rsn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatusReasonInformation8TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Rsn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Max35Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Min11Max11Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 11))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 11))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryReasonCode) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "9946", "9948", "9964", "DS0H", "RC02"))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionGroupStatus3CodeAdmin) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "ACTC", "RJCT"))
	if errs.Empty() {
		return nil
	}
	return errs
}
