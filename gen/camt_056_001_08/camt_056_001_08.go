// Code generated by xsdgen. DO NOT EDIT.

package camt_056_001_08

import (
	"bytes"
	"encoding/xml"
	"time"

	"github.com/moov-io/rtp20022/pkg/dt"
)

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// May be one of USD
type ActiveOrHistoricCurrencyCode string

type BranchAndFinancialInstitutionIdentification6 struct {
	FinInstnId FinancialInstitutionIdentification18 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 FinInstnId"`
}

type BranchAndFinancialInstitutionIdentification6TCH struct {
	FinInstnId FinancialInstitutionIdentification18TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 FinInstnId"`
}

type CancellationReason33Choice struct {
	Cd    ExternalCancellationReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Cd,omitempty"`
	Prtry Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Prtry,omitempty"`
}

type CancellationReason33ChoiceTCH struct {
	Cd    ExternalCancellationReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Cd,omitempty"`
	Prtry Max35TextTCH3                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Prtry,omitempty"`
}

type Case5 struct {
	Id    Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Id"`
	Cretr Party40Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Cretr"`
}

type Case5TCH struct {
	Id    Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Id"`
	Cretr Party40ChoiceTCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Cretr"`
}

type CaseAssignment5 struct {
	Id      Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Id"`
	Assgnr  Party40Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Assgnr"`
	Assgne  Party40Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Assgne"`
	CreDtTm dt.ISODateTime   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 CreDtTm"`
}

type CaseAssignment5TCH struct {
	Id      Max35TextTCH       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Id"`
	Assgnr  Party40ChoiceTCH   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Assgnr"`
	Assgne  Party40ChoiceTCH   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Assgne"`
	CreDtTm dt.ISODateTime     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 CreDtTm"`
}

type ClearingSystemMemberIdentification2 struct {
	MmbId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 MmbId"`
}

type ClearingSystemMemberIdentification2TCH struct {
	MmbId Max35TextTCH2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 MmbId"`
}

type Contact4 struct {
	PhneNb PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 PhneNb,omitempty"`
}

// May be one of AD, AE, AF, AG, AI, AL, AM, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW
type CountryCode string

type DateAndPlaceOfBirth1 struct {
	BirthDt     dt.ISODate  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 BirthDt"`
	CityOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 CityOfBirth"`
	CtryOfBirth CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 CtryOfBirth"`
}

type Document struct {
	FIToFIPmtCxlReq FIToFIPaymentCancellationRequestV08 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 FIToFIPmtCxlReq"`
}

type DocumentTCH struct {
	FIToFIPmtCxlReq FIToFIPaymentCancellationRequestV08TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 FIToFIPmtCxlReq"`
}

// May be one of AC03, AM09, CUST, DS24, DUPL, FRAD, FRTR, TECH, UPAY
type ExternalCancellationReason1Code string

// Julyl 2019
//
// Release 2.9 (2019)
type FIToFIPaymentCancellationRequestV08 struct {
	Attr []xml.Attr `xml:",attr"`

	Assgnmt CaseAssignment5         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Assgnmt"`
	Case    Case5                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Case"`
	Undrlyg UnderlyingTransaction23 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Undrlyg"`
}

// Julyl 2019
//
// Release 2.9 (2019)
type FIToFIPaymentCancellationRequestV08TCH struct {
	Assgnmt CaseAssignment5TCH         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Assgnmt"`
	Case    Case5TCH                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Case"`
	Undrlyg UnderlyingTransaction23TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Undrlyg"`
}

type FinancialInstitutionIdentification18 struct {
	ClrSysMmbId ClearingSystemMemberIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 ClrSysMmbId"`
}

type FinancialInstitutionIdentification18TCH struct {
	ClrSysMmbId ClearingSystemMemberIdentification2TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 ClrSysMmbId"`
}

type GenericOrganisationIdentification1 struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Id"`
}

type GenericOrganisationIdentification1TCH struct {
	Id Max35TextTCH2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Id"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 105 items long
type Max105Text string

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern M[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*
type Max35TextTCH string

// May be no more than 9 items long
type Max35TextTCH2 string

// May be one of WIAM, WICT, WIDP, WIFD, WIFT, WITH
type Max35TextTCH3 string

// May be no more than 70 items long
type Max70Text string

type OrganisationIdentification29 struct {
	LEI  LEIIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 LEI,omitempty"`
	Othr GenericOrganisationIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Othr,omitempty"`
}

type OrganisationIdentification29TCH struct {
	Othr GenericOrganisationIdentification1TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Othr"`
}

type OrganisationIdentification29TCH2 struct {
	LEI LEIIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 LEI"`
}

// May be one of pacs.008.001.06, pacs.008.001.08, pacs.009.001.08, pain.013.001.07
type OrigMsgName string

type OriginalGroupHeader15 struct {
	OrgnlMsgId   Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlMsgId"`
	OrgnlMsgNmId OrigMsgName    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlMsgNmId"`
	OrgnlCreDtTm dt.ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlCreDtTm,omitempty"`
}

type OriginalTransactionReference28 struct {
	Dbtr Party40Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Dbtr,omitempty"`
	Cdtr Party40Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Cdtr,omitempty"`
}

type OriginalTransactionReference28TCH struct {
	Dbtr Party40ChoiceTCH2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Dbtr,omitempty"`
	Cdtr Party40ChoiceTCH3 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Cdtr,omitempty"`
}

type Party38Choice struct {
	OrgId  OrganisationIdentification29 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgId,omitempty"`
	PrvtId PersonIdentification13       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 PrvtId,omitempty"`
}

type Party38ChoiceTCH struct {
	OrgId OrganisationIdentification29TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgId,omitempty"`
}

type Party38ChoiceTCH2 struct {
	OrgId  OrganisationIdentification29TCH2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgId,omitempty"`
	PrvtId PersonIdentification13TCH        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 PrvtId,omitempty"`
}

type Party40Choice struct {
	Pty PartyIdentification135                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Pty,omitempty"`
	Agt BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Agt,omitempty"`
}

type Party40ChoiceTCH struct {
	Agt BranchAndFinancialInstitutionIdentification6TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Agt,omitempty"`
}

type Party40ChoiceTCH2 struct {
	Pty PartyIdentification135TCH2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Pty,omitempty"`
}

type Party40ChoiceTCH3 struct {
	Pty PartyIdentification135TCH3 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Pty,omitempty"`
}

type PartyIdentification135 struct {
	Nm       Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Nm,omitempty"`
	PstlAdr  PostalAddress24 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 PstlAdr,omitempty"`
	Id       Party38Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Id,omitempty"`
	CtctDtls Contact4        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 CtctDtls,omitempty"`
}

type PartyIdentification135TCH struct {
	Nm Max140Text       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Nm,omitempty"`
	Id Party38ChoiceTCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Id,omitempty"`
}

type PartyIdentification135TCH2 struct {
	Nm      Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Nm"`
	PstlAdr PostalAddress24TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 PstlAdr,omitempty"`
	Id      Party38ChoiceTCH2  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Id,omitempty"`
}

type PartyIdentification135TCH3 struct {
	Nm       Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Nm"`
	PstlAdr  PostalAddress24TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 PstlAdr,omitempty"`
	Id       Party38ChoiceTCH2  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Id,omitempty"`
	CtctDtls Contact4           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 CtctDtls,omitempty"`
}

type PaymentCancellationReason5 struct {
	Orgtr    PartyIdentification135     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Orgtr,omitempty"`
	Rsn      CancellationReason33Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Rsn"`
	AddtlInf Max105Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 AddtlInf,omitempty"`
}

type PaymentCancellationReason5TCH struct {
	Orgtr    PartyIdentification135TCH     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Orgtr,omitempty"`
	Rsn      CancellationReason33ChoiceTCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Rsn"`
	AddtlInf Max105Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 AddtlInf,omitempty"`
}

type PaymentTransaction106 struct {
	OrgnlInstrId        Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlInstrId"`
	OrgnlEndToEndId     Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlEndToEndId,omitempty"`
	OrgnlTxId           Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlTxId"`
	OrgnlUETR           UUIDv4Identifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlUETR,omitempty"`
	OrgnlClrSysRef      Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlClrSysRef"`
	OrgnlIntrBkSttlmAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlIntrBkSttlmAmt"`
	OrgnlIntrBkSttlmDt  dt.ISODate                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlIntrBkSttlmDt"`
	CxlRsnInf           PaymentCancellationReason5        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 CxlRsnInf"`
	OrgnlTxRef          OriginalTransactionReference28    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlTxRef,omitempty"`
}

type PaymentTransaction106TCH struct {
	OrgnlInstrId        Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlInstrId"`
	OrgnlEndToEndId     Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlEndToEndId,omitempty"`
	OrgnlTxId           Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlTxId"`
	OrgnlUETR           UUIDv4Identifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlUETR,omitempty"`
	OrgnlClrSysRef      Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlClrSysRef"`
	OrgnlIntrBkSttlmAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlIntrBkSttlmAmt"`
	OrgnlIntrBkSttlmDt  dt.ISODate                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlIntrBkSttlmDt"`
	CxlRsnInf           PaymentCancellationReason5TCH     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 CxlRsnInf"`
	OrgnlTxRef          OriginalTransactionReference28TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlTxRef,omitempty"`
}

type PersonIdentification13 struct {
	DtAndPlcOfBirth DateAndPlaceOfBirth1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 DtAndPlcOfBirth"`
}

type PersonIdentification13TCH struct {
	DtAndPlcOfBirth DateAndPlaceOfBirth1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 DtAndPlcOfBirth"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress24 struct {
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 StrtNm"`
	BldgNb      Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 BldgNb,omitempty"`
	PstCd       Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 PstCd"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 TwnNm"`
	CtrySubDvsn Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 CtrySubDvsn"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Ctry"`
	AdrLine     Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 AdrLine,omitempty"`
}

type PostalAddress24TCH struct {
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 StrtNm"`
	BldgNb      Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 BldgNb,omitempty"`
	PstCd       Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 PstCd"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 TwnNm"`
	CtrySubDvsn Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 CtrySubDvsn"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 Ctry"`
	AdrLine     Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 AdrLine,omitempty"`
}

// Must match the pattern [a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}
type UUIDv4Identifier string

type UnderlyingTransaction23 struct {
	OrgnlGrpInfAndCxl OriginalGroupHeader15 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlGrpInfAndCxl"`
	TxInf             PaymentTransaction106 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 TxInf"`
}

type UnderlyingTransaction23TCH struct {
	OrgnlGrpInfAndCxl OriginalGroupHeader15    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 OrgnlGrpInfAndCxl"`
	TxInf             PaymentTransaction106TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.056.001.08 TxInf"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
