// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.056.001.08
package camt_056_001_08

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}

	rtp.AddError(&errs, v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CancellationReason33Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Cd != nil {
		rtp.AddError(&errs, v.Cd.Validate())
	}
	if v.Prtry != nil {
		rtp.AddError(&errs, v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CancellationReason33ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Cd != nil {
		rtp.AddError(&errs, v.Cd.Validate())
	}
	if v.Prtry != nil {
		rtp.AddError(&errs, v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Assgnr.Validate())
	rtp.AddError(&errs, v.Assgne.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Assgnr.Validate())
	rtp.AddError(&errs, v.Assgne.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Contact4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.PhneNb != nil {
		rtp.AddError(&errs, v.PhneNb.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndPlaceOfBirth1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.BirthDt.Validate())
	rtp.AddError(&errs, v.CityOfBirth.Validate())
	rtp.AddError(&errs, v.CtryOfBirth.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FIToFIPmtCxlReq.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FIToFIPaymentCancellationRequestV08) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Assgnmt.Validate())
	rtp.AddError(&errs, v.Case.Validate())
	rtp.AddError(&errs, v.Undrlyg.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FIToFIPaymentCancellationRequestV08TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Assgnmt.Validate())
	rtp.AddError(&errs, v.Case.Validate())
	rtp.AddError(&errs, v.Undrlyg.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericOrganisationIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericOrganisationIdentification1TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentification29) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.LEI != nil {
		rtp.AddError(&errs, v.LEI.Validate())
	}
	if v.Othr != nil {
		rtp.AddError(&errs, v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentification29TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Othr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentification29TCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.LEI.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupHeader15) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, v.OrgnlMsgNmId.Validate())
	if v.OrgnlCreDtTm != nil {
		rtp.AddError(&errs, v.OrgnlCreDtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalTransactionReference28) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Dbtr != nil {
		rtp.AddError(&errs, v.Dbtr.Validate())
	}
	if v.Cdtr != nil {
		rtp.AddError(&errs, v.Cdtr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalTransactionReference28TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Dbtr != nil {
		rtp.AddError(&errs, v.Dbtr.Validate())
	}
	if v.Cdtr != nil {
		rtp.AddError(&errs, v.Cdtr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party38Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.OrgId != nil {
		rtp.AddError(&errs, v.OrgId.Validate())
	}
	if v.PrvtId != nil {
		rtp.AddError(&errs, v.PrvtId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party38ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.OrgId != nil {
		rtp.AddError(&errs, v.OrgId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party38ChoiceTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.OrgId != nil {
		rtp.AddError(&errs, v.OrgId.Validate())
	}
	if v.PrvtId != nil {
		rtp.AddError(&errs, v.PrvtId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Pty != nil {
		rtp.AddError(&errs, v.Pty.Validate())
	}
	if v.Agt != nil {
		rtp.AddError(&errs, v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Agt != nil {
		rtp.AddError(&errs, v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Pty != nil {
		rtp.AddError(&errs, v.Pty.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Pty != nil {
		rtp.AddError(&errs, v.Pty.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Nm != nil {
		rtp.AddError(&errs, v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		rtp.AddError(&errs, v.PstlAdr.Validate())
	}
	if v.Id != nil {
		rtp.AddError(&errs, v.Id.Validate())
	}
	if v.CtctDtls != nil {
		rtp.AddError(&errs, v.CtctDtls.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Nm != nil {
		rtp.AddError(&errs, v.Nm.Validate())
	}
	if v.Id != nil {
		rtp.AddError(&errs, v.Id.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135TCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Nm.Validate())
	if v.PstlAdr != nil {
		rtp.AddError(&errs, v.PstlAdr.Validate())
	}
	if v.Id != nil {
		rtp.AddError(&errs, v.Id.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135TCH3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Nm.Validate())
	if v.PstlAdr != nil {
		rtp.AddError(&errs, v.PstlAdr.Validate())
	}
	if v.Id != nil {
		rtp.AddError(&errs, v.Id.Validate())
	}
	if v.CtctDtls != nil {
		rtp.AddError(&errs, v.CtctDtls.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentCancellationReason5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Orgtr != nil {
		rtp.AddError(&errs, v.Orgtr.Validate())
	}
	rtp.AddError(&errs, v.Rsn.Validate())
	if v.AddtlInf != nil {
		rtp.AddError(&errs, v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentCancellationReason5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Orgtr != nil {
		rtp.AddError(&errs, v.Orgtr.Validate())
	}
	rtp.AddError(&errs, v.Rsn.Validate())
	if v.AddtlInf != nil {
		rtp.AddError(&errs, v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransaction106) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlInstrId.Validate())
	if v.OrgnlEndToEndId != nil {
		rtp.AddError(&errs, v.OrgnlEndToEndId.Validate())
	}
	rtp.AddError(&errs, v.OrgnlTxId.Validate())
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, v.OrgnlUETR.Validate())
	}
	rtp.AddError(&errs, v.OrgnlClrSysRef.Validate())
	rtp.AddError(&errs, v.OrgnlIntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, v.OrgnlIntrBkSttlmDt.Validate())
	rtp.AddError(&errs, v.CxlRsnInf.Validate())
	if v.OrgnlTxRef != nil {
		rtp.AddError(&errs, v.OrgnlTxRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransaction106TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlInstrId.Validate())
	if v.OrgnlEndToEndId != nil {
		rtp.AddError(&errs, v.OrgnlEndToEndId.Validate())
	}
	rtp.AddError(&errs, v.OrgnlTxId.Validate())
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, v.OrgnlUETR.Validate())
	}
	rtp.AddError(&errs, v.OrgnlClrSysRef.Validate())
	rtp.AddError(&errs, v.OrgnlIntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, v.OrgnlIntrBkSttlmDt.Validate())
	rtp.AddError(&errs, v.CxlRsnInf.Validate())
	if v.OrgnlTxRef != nil {
		rtp.AddError(&errs, v.OrgnlTxRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentification13) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.DtAndPlcOfBirth.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentification13TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.DtAndPlcOfBirth.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress24) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.StrtNm.Validate())
	if v.BldgNb != nil {
		rtp.AddError(&errs, v.BldgNb.Validate())
	}
	rtp.AddError(&errs, v.PstCd.Validate())
	rtp.AddError(&errs, v.TwnNm.Validate())
	rtp.AddError(&errs, v.CtrySubDvsn.Validate())
	rtp.AddError(&errs, v.Ctry.Validate())
	if v.AdrLine != nil {
		rtp.AddError(&errs, v.AdrLine.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress24TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.StrtNm.Validate())
	if v.BldgNb != nil {
		rtp.AddError(&errs, v.BldgNb.Validate())
	}
	rtp.AddError(&errs, v.PstCd.Validate())
	rtp.AddError(&errs, v.TwnNm.Validate())
	rtp.AddError(&errs, v.CtrySubDvsn.Validate())
	rtp.AddError(&errs, v.Ctry.Validate())
	if v.AdrLine != nil {
		rtp.AddError(&errs, v.AdrLine.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingTransaction23) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlGrpInfAndCxl.Validate())
	rtp.AddError(&errs, v.TxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingTransaction23TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlGrpInfAndCxl.Validate())
	rtp.AddError(&errs, v.TxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[A-Z]{3,3}`))
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "USD"))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CountryCode) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[A-Z]{2,2}`))
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ExternalCancellationReason1Code) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "AC03", "AM09", "CUST", "DS24", "DUPL", "FRAD", "FRTR", "TECH", "UPAY"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 4))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v LEIIdentifier) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[A-Z0-9]{18,18}[0-9]{2,2}`))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max105Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 105))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max140Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 140))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max16Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 16))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `M[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 9))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 9))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "WIAM", "WICT", "WIDP", "WIFD", "WIFT", "WITH"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 4))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max70Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 70))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrigMsgName) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "pacs.008.001.06", "pacs.008.001.08", "pacs.009.001.08", "pain.013.001.07"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PhoneNumber) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `\+[0-9]{1,3}-[0-9()+\-]{1,30}`))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UUIDv4Identifier) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`))
	if errs.Empty() {
		return nil
	}
	return errs
}
