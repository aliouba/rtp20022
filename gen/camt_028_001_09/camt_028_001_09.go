// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Models for urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 with prefix 'if'
package camt_028_001_09

import (
	"encoding/xml"

	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType declarations

type ActiveOrHistoricCurrencyAndAmount struct {
	Value ActiveOrHistoricCurrencyAndAmountSimpleType `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode                `xml:"Ccy,attr"`
}

type AdditionalPaymentInformationV09 struct {
	Assgnmt CaseAssignment5                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Assgnmt"`
	Case    Case5                            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Case"`
	Undrlyg UnderlyingTransaction5Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Undrlyg"`
	Inf     PaymentComplementaryInformation8 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Inf"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v AdditionalPaymentInformationV09) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Assgnmt, xml.StartElement{Name: xml.Name{Local: "if:Assgnmt"}})
	e.EncodeElement(v.Case, xml.StartElement{Name: xml.Name{Local: "if:Case"}})
	e.EncodeElement(v.Undrlyg, xml.StartElement{Name: xml.Name{Local: "if:Undrlyg"}})
	e.EncodeElement(v.Inf, xml.StartElement{Name: xml.Name{Local: "if:Inf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type AdditionalPaymentInformationV09TCH struct {
	Assgnmt CaseAssignment5TCH                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Assgnmt"`
	Case    Case5TCH                            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Case"`
	Undrlyg UnderlyingTransaction5ChoiceTCH     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Undrlyg"`
	Inf     PaymentComplementaryInformation8TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Inf"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v AdditionalPaymentInformationV09TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Assgnmt, xml.StartElement{Name: xml.Name{Local: "if:Assgnmt"}})
	e.EncodeElement(v.Case, xml.StartElement{Name: xml.Name{Local: "if:Case"}})
	e.EncodeElement(v.Undrlyg, xml.StartElement{Name: xml.Name{Local: "if:Undrlyg"}})
	e.EncodeElement(v.Inf, xml.StartElement{Name: xml.Name{Local: "if:Inf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type BranchAndFinancialInstitutionIdentification6 struct {
	FinInstnId FinancialInstitutionIdentification18 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 FinInstnId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v BranchAndFinancialInstitutionIdentification6) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.FinInstnId, xml.StartElement{Name: xml.Name{Local: "if:FinInstnId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type BranchAndFinancialInstitutionIdentification6TCH struct {
	FinInstnId FinancialInstitutionIdentification18TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 FinInstnId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v BranchAndFinancialInstitutionIdentification6TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.FinInstnId, xml.StartElement{Name: xml.Name{Local: "if:FinInstnId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Case5 struct {
	Id    Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Id"`
	Cretr Party40Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Cretr"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Case5) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "if:Id"}})
	e.EncodeElement(v.Cretr, xml.StartElement{Name: xml.Name{Local: "if:Cretr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Case5TCH struct {
	Id    Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Id"`
	Cretr Party40ChoiceTCH2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Cretr"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Case5TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "if:Id"}})
	e.EncodeElement(v.Cretr, xml.StartElement{Name: xml.Name{Local: "if:Cretr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CaseAssignment5 struct {
	Id      Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Id"`
	Assgnr  Party40Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Assgnr"`
	Assgne  Party40Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Assgne"`
	CreDtTm rtp.ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 CreDtTm"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CaseAssignment5) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "if:Id"}})
	e.EncodeElement(v.Assgnr, xml.StartElement{Name: xml.Name{Local: "if:Assgnr"}})
	e.EncodeElement(v.Assgne, xml.StartElement{Name: xml.Name{Local: "if:Assgne"}})
	e.EncodeElement(v.CreDtTm, xml.StartElement{Name: xml.Name{Local: "if:CreDtTm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CaseAssignment5TCH struct {
	Id      Max35TextTCH     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Id"`
	Assgnr  Party40ChoiceTCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Assgnr"`
	Assgne  Party40ChoiceTCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Assgne"`
	CreDtTm rtp.ISODateTime  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 CreDtTm"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CaseAssignment5TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "if:Id"}})
	e.EncodeElement(v.Assgnr, xml.StartElement{Name: xml.Name{Local: "if:Assgnr"}})
	e.EncodeElement(v.Assgne, xml.StartElement{Name: xml.Name{Local: "if:Assgne"}})
	e.EncodeElement(v.CreDtTm, xml.StartElement{Name: xml.Name{Local: "if:CreDtTm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ClearingSystemMemberIdentification2 struct {
	MmbId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 MmbId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ClearingSystemMemberIdentification2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.MmbId, xml.StartElement{Name: xml.Name{Local: "if:MmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ClearingSystemMemberIdentification2TCH struct {
	MmbId Max35TextTCH2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 MmbId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ClearingSystemMemberIdentification2TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.MmbId, xml.StartElement{Name: xml.Name{Local: "if:MmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Contact4 struct {
	PhneNb *PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PhneNb,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Contact4) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.PhneNb, xml.StartElement{Name: xml.Name{Local: "if:PhneNb"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DateAndDateTime2Choice struct {
	Dt   *rtp.ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Dt,omitempty"`
	DtTm *rtp.ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 DtTm,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DateAndDateTime2Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Dt, xml.StartElement{Name: xml.Name{Local: "if:Dt"}})
	e.EncodeElement(v.DtTm, xml.StartElement{Name: xml.Name{Local: "if:DtTm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DateAndPlaceOfBirth1 struct {
	BirthDt     rtp.ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 BirthDt"`
	CityOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 CityOfBirth"`
	CtryOfBirth CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 CtryOfBirth"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DateAndPlaceOfBirth1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.BirthDt, xml.StartElement{Name: xml.Name{Local: "if:BirthDt"}})
	e.EncodeElement(v.CityOfBirth, xml.StartElement{Name: xml.Name{Local: "if:CityOfBirth"}})
	e.EncodeElement(v.CtryOfBirth, xml.StartElement{Name: xml.Name{Local: "if:CtryOfBirth"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DiscountAmountAndType1 struct {
	Tp  DiscountAmountType1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Tp"`
	Amt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Amt"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DiscountAmountAndType1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "if:Tp"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "if:Amt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DiscountAmountAndType1TCH struct {
	Tp  DiscountAmountType1ChoiceTCH      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Tp"`
	Amt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Amt"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DiscountAmountAndType1TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "if:Tp"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "if:Amt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DiscountAmountType1Choice struct {
	Prtry *Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DiscountAmountType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "if:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DiscountAmountType1ChoiceTCH struct {
	Prtry *Max35TextTCH3 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DiscountAmountType1ChoiceTCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "if:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DocumentTCH struct {
	XMLName     xml.Name
	AddtlPmtInf AdditionalPaymentInformationV09TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 AddtlPmtInf"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentTCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.AddtlPmtInf, xml.StartElement{Name: xml.Name{Local: "if:AddtlPmtInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type FinancialInstitutionIdentification18 struct {
	ClrSysMmbId ClearingSystemMemberIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 ClrSysMmbId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FinancialInstitutionIdentification18) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.ClrSysMmbId, xml.StartElement{Name: xml.Name{Local: "if:ClrSysMmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type FinancialInstitutionIdentification18TCH struct {
	ClrSysMmbId ClearingSystemMemberIdentification2TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 ClrSysMmbId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FinancialInstitutionIdentification18TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.ClrSysMmbId, xml.StartElement{Name: xml.Name{Local: "if:ClrSysMmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GenericPersonIdentification1 struct {
	Id      Max35Text                              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Id"`
	SchmeNm *PersonIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 SchmeNm,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericPersonIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "if:Id"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "if:SchmeNm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentification29 struct {
	LEI *LEIIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 LEI,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification29) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.LEI, xml.StartElement{Name: xml.Name{Local: "if:LEI"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentification29TCH struct {
	LEI LEIIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 LEI"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification29TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.LEI, xml.StartElement{Name: xml.Name{Local: "if:LEI"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentification30 struct {
	LEI  *LEIIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 LEI,omitempty"`
	Othr []*GenericOrganisationIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification30) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.LEI, xml.StartElement{Name: xml.Name{Local: "if:LEI"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "if:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentification30TCH struct {
	LEI  *LEIIdentifier                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 LEI,omitempty"`
	Othr []*GenericOrganisationIdentification1TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification30TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.LEI, xml.StartElement{Name: xml.Name{Local: "if:LEI"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "if:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GenericOrganisationIdentification1 struct {
	Id      Max35Text                                    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Id"`
	SchmeNm *OrganisationIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 SchmeNm,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericOrganisationIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "if:Id"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "if:SchmeNm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GenericOrganisationIdentification1TCH struct {
	Id      Max35Text                                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Id"`
	SchmeNm *OrganisationIdentificationSchemeName1ChoiceTCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 SchmeNm,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericOrganisationIdentification1TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "if:Id"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "if:SchmeNm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentificationSchemeName1Choice struct {
	Prtry *Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentificationSchemeName1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "if:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentificationSchemeName1ChoiceTCH struct {
	Prtry *Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentificationSchemeName1ChoiceTCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "if:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PersonIdentificationSchemeName1Choice struct {
	Prtry *Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentificationSchemeName1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "if:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party38Choice struct {
	OrgId  *OrganisationIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgId,omitempty"`
	PrvtId *PersonIdentification13       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PrvtId,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "if:OrgId"}})
	e.EncodeElement(v.PrvtId, xml.StartElement{Name: xml.Name{Local: "if:PrvtId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party38ChoiceTCH struct {
	OrgId  *OrganisationIdentification30TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgId,omitempty"`
	PrvtId *PersonIdentification13TCH       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PrvtId,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38ChoiceTCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "if:OrgId"}})
	e.EncodeElement(v.PrvtId, xml.StartElement{Name: xml.Name{Local: "if:PrvtId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party38ChoiceTCH2 struct {
	OrgId  *OrganisationIdentification29TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgId,omitempty"`
	PrvtId *PersonIdentification13TCH2      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PrvtId,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38ChoiceTCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "if:OrgId"}})
	e.EncodeElement(v.PrvtId, xml.StartElement{Name: xml.Name{Local: "if:PrvtId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party38ChoiceTCH3 struct {
	OrgId  *OrganisationIdentification29TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgId,omitempty"`
	PrvtId *PersonIdentification13TCH2      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PrvtId,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38ChoiceTCH3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "if:OrgId"}})
	e.EncodeElement(v.PrvtId, xml.StartElement{Name: xml.Name{Local: "if:PrvtId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party38ChoiceTCH4 struct {
	OrgId  *OrganisationIdentification29TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgId,omitempty"`
	PrvtId *PersonIdentification13TCH3      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PrvtId,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38ChoiceTCH4) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "if:OrgId"}})
	e.EncodeElement(v.PrvtId, xml.StartElement{Name: xml.Name{Local: "if:PrvtId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party40Choice struct {
	Pty *PartyIdentification135                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Pty,omitempty"`
	Agt *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Agt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party40Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Pty, xml.StartElement{Name: xml.Name{Local: "if:Pty"}})
	e.EncodeElement(v.Agt, xml.StartElement{Name: xml.Name{Local: "if:Agt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party40ChoiceTCH struct {
	Agt *BranchAndFinancialInstitutionIdentification6TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Agt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party40ChoiceTCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Agt, xml.StartElement{Name: xml.Name{Local: "if:Agt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party40ChoiceTCH2 struct {
	Pty *PartyIdentification135TCH                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Pty,omitempty"`
	Agt *BranchAndFinancialInstitutionIdentification6TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Agt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party40ChoiceTCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Pty, xml.StartElement{Name: xml.Name{Local: "if:Pty"}})
	e.EncodeElement(v.Agt, xml.StartElement{Name: xml.Name{Local: "if:Agt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PartyIdentification135 struct {
	Nm       *Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Nm,omitempty"`
	PstlAdr  *PostalAddress24 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PstlAdr,omitempty"`
	Id       *Party38Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Id,omitempty"`
	CtctDtls *Contact4        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 CtctDtls,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "if:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "if:PstlAdr"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "if:Id"}})
	e.EncodeElement(v.CtctDtls, xml.StartElement{Name: xml.Name{Local: "if:CtctDtls"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PartyIdentification135TCH struct {
	Nm Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Nm"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "if:Nm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PartyIdentification135TCH2 struct {
	Nm      *Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Nm,omitempty"`
	PstlAdr *PostalAddress24TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PstlAdr,omitempty"`
	Id      *Party38ChoiceTCH   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Id,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135TCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "if:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "if:PstlAdr"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "if:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PartyIdentification135TCH3 struct {
	Nm      *Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Nm,omitempty"`
	PstlAdr *PostalAddress24TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PstlAdr,omitempty"`
	Id      *Party38ChoiceTCH2  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Id,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135TCH3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "if:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "if:PstlAdr"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "if:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PartyIdentification135TCH4 struct {
	Nm       *Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Nm,omitempty"`
	PstlAdr  *PostalAddress24TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PstlAdr,omitempty"`
	Id       *Party38ChoiceTCH3  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Id,omitempty"`
	CtctDtls *Contact4           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 CtctDtls,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135TCH4) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "if:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "if:PstlAdr"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "if:Id"}})
	e.EncodeElement(v.CtctDtls, xml.StartElement{Name: xml.Name{Local: "if:CtctDtls"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PartyIdentification135TCH5 struct {
	Nm      *Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Nm,omitempty"`
	PstlAdr *PostalAddress24TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PstlAdr,omitempty"`
	Id      *Party38ChoiceTCH4  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Id,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135TCH5) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "if:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "if:PstlAdr"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "if:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PaymentComplementaryInformation8 struct {
	InstrId    *Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 InstrId,omitempty"`
	EndToEndId *Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 EndToEndId,omitempty"`
	TxId       *Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 TxId,omitempty"`
	UltmtDbtr  *PartyIdentification135  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 UltmtDbtr,omitempty"`
	Dbtr       *PartyIdentification135  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Dbtr,omitempty"`
	Cdtr       *PartyIdentification135  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Cdtr,omitempty"`
	UltmtCdtr  *PartyIdentification135  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 UltmtCdtr,omitempty"`
	RmtInf     *RemittanceInformation16 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 RmtInf,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PaymentComplementaryInformation8) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.InstrId, xml.StartElement{Name: xml.Name{Local: "if:InstrId"}})
	e.EncodeElement(v.EndToEndId, xml.StartElement{Name: xml.Name{Local: "if:EndToEndId"}})
	e.EncodeElement(v.TxId, xml.StartElement{Name: xml.Name{Local: "if:TxId"}})
	e.EncodeElement(v.UltmtDbtr, xml.StartElement{Name: xml.Name{Local: "if:UltmtDbtr"}})
	e.EncodeElement(v.Dbtr, xml.StartElement{Name: xml.Name{Local: "if:Dbtr"}})
	e.EncodeElement(v.Cdtr, xml.StartElement{Name: xml.Name{Local: "if:Cdtr"}})
	e.EncodeElement(v.UltmtCdtr, xml.StartElement{Name: xml.Name{Local: "if:UltmtCdtr"}})
	e.EncodeElement(v.RmtInf, xml.StartElement{Name: xml.Name{Local: "if:RmtInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PaymentComplementaryInformation8TCH struct {
	InstrId    *Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 InstrId,omitempty"`
	EndToEndId *Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 EndToEndId,omitempty"`
	TxId       *Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 TxId,omitempty"`
	UltmtDbtr  *PartyIdentification135TCH2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 UltmtDbtr,omitempty"`
	Dbtr       *PartyIdentification135TCH3 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Dbtr,omitempty"`
	Cdtr       *PartyIdentification135TCH4 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Cdtr,omitempty"`
	UltmtCdtr  *PartyIdentification135TCH2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 UltmtCdtr,omitempty"`
	RmtInf     *RemittanceInformation16TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 RmtInf,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PaymentComplementaryInformation8TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.InstrId, xml.StartElement{Name: xml.Name{Local: "if:InstrId"}})
	e.EncodeElement(v.EndToEndId, xml.StartElement{Name: xml.Name{Local: "if:EndToEndId"}})
	e.EncodeElement(v.TxId, xml.StartElement{Name: xml.Name{Local: "if:TxId"}})
	e.EncodeElement(v.UltmtDbtr, xml.StartElement{Name: xml.Name{Local: "if:UltmtDbtr"}})
	e.EncodeElement(v.Dbtr, xml.StartElement{Name: xml.Name{Local: "if:Dbtr"}})
	e.EncodeElement(v.Cdtr, xml.StartElement{Name: xml.Name{Local: "if:Cdtr"}})
	e.EncodeElement(v.UltmtCdtr, xml.StartElement{Name: xml.Name{Local: "if:UltmtCdtr"}})
	e.EncodeElement(v.RmtInf, xml.StartElement{Name: xml.Name{Local: "if:RmtInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PersonIdentification13 struct {
	DtAndPlcOfBirth *DateAndPlaceOfBirth1           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 DtAndPlcOfBirth,omitempty"`
	Othr            []*GenericPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentification13) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DtAndPlcOfBirth, xml.StartElement{Name: xml.Name{Local: "if:DtAndPlcOfBirth"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "if:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PersonIdentification13TCH struct {
	DtAndPlcOfBirth *DateAndPlaceOfBirth1           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 DtAndPlcOfBirth,omitempty"`
	Othr            []*GenericPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentification13TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DtAndPlcOfBirth, xml.StartElement{Name: xml.Name{Local: "if:DtAndPlcOfBirth"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "if:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PersonIdentification13TCH2 struct {
	DtAndPlcOfBirth DateAndPlaceOfBirth1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 DtAndPlcOfBirth"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentification13TCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DtAndPlcOfBirth, xml.StartElement{Name: xml.Name{Local: "if:DtAndPlcOfBirth"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PersonIdentification13TCH3 struct {
	Othr GenericPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Othr"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentification13TCH3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "if:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PostalAddress24 struct {
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 StrtNm"`
	BldgNb      *Max16Text  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 BldgNb,omitempty"`
	PstCd       Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PstCd"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 TwnNm"`
	CtrySubDvsn Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 CtrySubDvsn"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Ctry"`
	AdrLine     *Max70Text  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 AdrLine,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PostalAddress24) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.StrtNm, xml.StartElement{Name: xml.Name{Local: "if:StrtNm"}})
	e.EncodeElement(v.BldgNb, xml.StartElement{Name: xml.Name{Local: "if:BldgNb"}})
	e.EncodeElement(v.PstCd, xml.StartElement{Name: xml.Name{Local: "if:PstCd"}})
	e.EncodeElement(v.TwnNm, xml.StartElement{Name: xml.Name{Local: "if:TwnNm"}})
	e.EncodeElement(v.CtrySubDvsn, xml.StartElement{Name: xml.Name{Local: "if:CtrySubDvsn"}})
	e.EncodeElement(v.Ctry, xml.StartElement{Name: xml.Name{Local: "if:Ctry"}})
	e.EncodeElement(v.AdrLine, xml.StartElement{Name: xml.Name{Local: "if:AdrLine"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PostalAddress24TCH struct {
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 StrtNm"`
	BldgNb      *Max16Text  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 BldgNb,omitempty"`
	PstCd       Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 PstCd"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 TwnNm"`
	CtrySubDvsn Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 CtrySubDvsn"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Ctry"`
	AdrLine     *Max70Text  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 AdrLine,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PostalAddress24TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.StrtNm, xml.StartElement{Name: xml.Name{Local: "if:StrtNm"}})
	e.EncodeElement(v.BldgNb, xml.StartElement{Name: xml.Name{Local: "if:BldgNb"}})
	e.EncodeElement(v.PstCd, xml.StartElement{Name: xml.Name{Local: "if:PstCd"}})
	e.EncodeElement(v.TwnNm, xml.StartElement{Name: xml.Name{Local: "if:TwnNm"}})
	e.EncodeElement(v.CtrySubDvsn, xml.StartElement{Name: xml.Name{Local: "if:CtrySubDvsn"}})
	e.EncodeElement(v.Ctry, xml.StartElement{Name: xml.Name{Local: "if:Ctry"}})
	e.EncodeElement(v.AdrLine, xml.StartElement{Name: xml.Name{Local: "if:AdrLine"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceAmount2 struct {
	DscntApldAmt []*DiscountAmountAndType1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 DscntApldAmt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceAmount2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DscntApldAmt, xml.StartElement{Name: xml.Name{Local: "if:DscntApldAmt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceAmount2TCH struct {
	DscntApldAmt []*DiscountAmountAndType1TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 DscntApldAmt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceAmount2TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DscntApldAmt, xml.StartElement{Name: xml.Name{Local: "if:DscntApldAmt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceInformation16 struct {
	Ustrd []*Max140Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Ustrd,omitempty"`
	Strd  *StructuredRemittanceInformation16 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Strd,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceInformation16) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Ustrd, xml.StartElement{Name: xml.Name{Local: "if:Ustrd"}})
	e.EncodeElement(v.Strd, xml.StartElement{Name: xml.Name{Local: "if:Strd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceInformation16TCH struct {
	Ustrd []*Max140Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Ustrd,omitempty"`
	Strd  *StructuredRemittanceInformation16TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Strd,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceInformation16TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Ustrd, xml.StartElement{Name: xml.Name{Local: "if:Ustrd"}})
	e.EncodeElement(v.Strd, xml.StartElement{Name: xml.Name{Local: "if:Strd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type StructuredRemittanceInformation16 struct {
	RfrdDocAmt *RemittanceAmount2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 RfrdDocAmt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v StructuredRemittanceInformation16) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.RfrdDocAmt, xml.StartElement{Name: xml.Name{Local: "if:RfrdDocAmt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type StructuredRemittanceInformation16TCH struct {
	RfrdDocAmt *RemittanceAmount2TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 RfrdDocAmt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v StructuredRemittanceInformation16TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.RfrdDocAmt, xml.StartElement{Name: xml.Name{Local: "if:RfrdDocAmt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type UnderlyingGroupInformation1 struct {
	OrgnlMsgId   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlMsgId"`
	OrgnlMsgNmId OrigMsgName `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlMsgNmId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v UnderlyingGroupInformation1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgnlMsgId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlMsgId"}})
	e.EncodeElement(v.OrgnlMsgNmId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlMsgNmId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type UnderlyingGroupInformation1TCH struct {
	OrgnlMsgId   Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlMsgId"`
	OrgnlMsgNmId OrigMsgNameTCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlMsgNmId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v UnderlyingGroupInformation1TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgnlMsgId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlMsgId"}})
	e.EncodeElement(v.OrgnlMsgNmId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlMsgNmId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type UnderlyingGroupInformation1TCH2 struct {
	OrgnlMsgId   Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlMsgId"`
	OrgnlMsgNmId OrigMsgNameTCH2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlMsgNmId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v UnderlyingGroupInformation1TCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgnlMsgId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlMsgId"}})
	e.EncodeElement(v.OrgnlMsgNmId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlMsgNmId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type UnderlyingPaymentInstruction5 struct {
	OrgnlGrpInf     UnderlyingGroupInformation1       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlGrpInf"`
	OrgnlPmtInfId   Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlPmtInfId"`
	OrgnlEndToEndId *Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlEndToEndId,omitempty"`
	OrgnlUETR       *UUIDv4Identifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlUETR,omitempty"`
	OrgnlInstdAmt   ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlInstdAmt"`
	ReqdExctnDt     *DateAndDateTime2Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 ReqdExctnDt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v UnderlyingPaymentInstruction5) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgnlGrpInf, xml.StartElement{Name: xml.Name{Local: "if:OrgnlGrpInf"}})
	e.EncodeElement(v.OrgnlPmtInfId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlPmtInfId"}})
	e.EncodeElement(v.OrgnlEndToEndId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlEndToEndId"}})
	e.EncodeElement(v.OrgnlUETR, xml.StartElement{Name: xml.Name{Local: "if:OrgnlUETR"}})
	e.EncodeElement(v.OrgnlInstdAmt, xml.StartElement{Name: xml.Name{Local: "if:OrgnlInstdAmt"}})
	e.EncodeElement(v.ReqdExctnDt, xml.StartElement{Name: xml.Name{Local: "if:ReqdExctnDt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type UnderlyingPaymentInstruction5TCH struct {
	OrgnlGrpInf     UnderlyingGroupInformation1TCH    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlGrpInf"`
	OrgnlPmtInfId   Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlPmtInfId"`
	OrgnlEndToEndId *Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlEndToEndId,omitempty"`
	OrgnlUETR       *UUIDv4Identifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlUETR,omitempty"`
	OrgnlInstdAmt   ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlInstdAmt"`
	ReqdExctnDt     *DateAndDateTime2Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 ReqdExctnDt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v UnderlyingPaymentInstruction5TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgnlGrpInf, xml.StartElement{Name: xml.Name{Local: "if:OrgnlGrpInf"}})
	e.EncodeElement(v.OrgnlPmtInfId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlPmtInfId"}})
	e.EncodeElement(v.OrgnlEndToEndId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlEndToEndId"}})
	e.EncodeElement(v.OrgnlUETR, xml.StartElement{Name: xml.Name{Local: "if:OrgnlUETR"}})
	e.EncodeElement(v.OrgnlInstdAmt, xml.StartElement{Name: xml.Name{Local: "if:OrgnlInstdAmt"}})
	e.EncodeElement(v.ReqdExctnDt, xml.StartElement{Name: xml.Name{Local: "if:ReqdExctnDt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type UnderlyingPaymentTransaction4 struct {
	OrgnlGrpInf         UnderlyingGroupInformation1       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlGrpInf"`
	OrgnlInstrId        Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlInstrId"`
	OrgnlEndToEndId     *Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlEndToEndId,omitempty"`
	OrgnlTxId           Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlTxId"`
	OrgnlUETR           *UUIDv4Identifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlUETR,omitempty"`
	OrgnlIntrBkSttlmAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlIntrBkSttlmAmt"`
	OrgnlIntrBkSttlmDt  rtp.ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlIntrBkSttlmDt"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v UnderlyingPaymentTransaction4) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgnlGrpInf, xml.StartElement{Name: xml.Name{Local: "if:OrgnlGrpInf"}})
	e.EncodeElement(v.OrgnlInstrId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlInstrId"}})
	e.EncodeElement(v.OrgnlEndToEndId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlEndToEndId"}})
	e.EncodeElement(v.OrgnlTxId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlTxId"}})
	e.EncodeElement(v.OrgnlUETR, xml.StartElement{Name: xml.Name{Local: "if:OrgnlUETR"}})
	e.EncodeElement(v.OrgnlIntrBkSttlmAmt, xml.StartElement{Name: xml.Name{Local: "if:OrgnlIntrBkSttlmAmt"}})
	e.EncodeElement(v.OrgnlIntrBkSttlmDt, xml.StartElement{Name: xml.Name{Local: "if:OrgnlIntrBkSttlmDt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type UnderlyingPaymentTransaction4TCH struct {
	OrgnlGrpInf         UnderlyingGroupInformation1TCH2   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlGrpInf"`
	OrgnlInstrId        Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlInstrId"`
	OrgnlEndToEndId     *Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlEndToEndId,omitempty"`
	OrgnlTxId           Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlTxId"`
	OrgnlUETR           *UUIDv4Identifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlUETR,omitempty"`
	OrgnlIntrBkSttlmAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlIntrBkSttlmAmt"`
	OrgnlIntrBkSttlmDt  rtp.ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 OrgnlIntrBkSttlmDt"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v UnderlyingPaymentTransaction4TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgnlGrpInf, xml.StartElement{Name: xml.Name{Local: "if:OrgnlGrpInf"}})
	e.EncodeElement(v.OrgnlInstrId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlInstrId"}})
	e.EncodeElement(v.OrgnlEndToEndId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlEndToEndId"}})
	e.EncodeElement(v.OrgnlTxId, xml.StartElement{Name: xml.Name{Local: "if:OrgnlTxId"}})
	e.EncodeElement(v.OrgnlUETR, xml.StartElement{Name: xml.Name{Local: "if:OrgnlUETR"}})
	e.EncodeElement(v.OrgnlIntrBkSttlmAmt, xml.StartElement{Name: xml.Name{Local: "if:OrgnlIntrBkSttlmAmt"}})
	e.EncodeElement(v.OrgnlIntrBkSttlmDt, xml.StartElement{Name: xml.Name{Local: "if:OrgnlIntrBkSttlmDt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type UnderlyingTransaction5Choice struct {
	Initn  *UnderlyingPaymentInstruction5 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Initn,omitempty"`
	IntrBk *UnderlyingPaymentTransaction4 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 IntrBk,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v UnderlyingTransaction5Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Initn, xml.StartElement{Name: xml.Name{Local: "if:Initn"}})
	e.EncodeElement(v.IntrBk, xml.StartElement{Name: xml.Name{Local: "if:IntrBk"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type UnderlyingTransaction5ChoiceTCH struct {
	Initn  *UnderlyingPaymentInstruction5TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 Initn,omitempty"`
	IntrBk *UnderlyingPaymentTransaction4TCH `xml:"urn:iso:std:iso:20022:tech:xsd:camt.028.001.09 IntrBk,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v UnderlyingTransaction5ChoiceTCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Initn, xml.StartElement{Name: xml.Name{Local: "if:Initn"}})
	e.EncodeElement(v.IntrBk, xml.StartElement{Name: xml.Name{Local: "if:IntrBk"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// XSD SimpleType declarations

type ActiveOrHistoricCurrencyAndAmountSimpleType rtp.Amount

func (a ActiveOrHistoricCurrencyAndAmountSimpleType) MarshalText() ([]byte, error) {
	return rtp.Amount(a).MarshalText()
}

type ActiveOrHistoricCurrencyCode string

const ActiveOrHistoricCurrencyCodeUsd ActiveOrHistoricCurrencyCode = "USD"

type CountryCode string

const CountryCodeAd CountryCode = "AD"
const CountryCodeAe CountryCode = "AE"
const CountryCodeAf CountryCode = "AF"
const CountryCodeAg CountryCode = "AG"
const CountryCodeAi CountryCode = "AI"
const CountryCodeAl CountryCode = "AL"
const CountryCodeAm CountryCode = "AM"
const CountryCodeAo CountryCode = "AO"
const CountryCodeAq CountryCode = "AQ"
const CountryCodeAr CountryCode = "AR"
const CountryCodeAs CountryCode = "AS"
const CountryCodeAt CountryCode = "AT"
const CountryCodeAu CountryCode = "AU"
const CountryCodeAw CountryCode = "AW"
const CountryCodeAx CountryCode = "AX"
const CountryCodeAz CountryCode = "AZ"
const CountryCodeBa CountryCode = "BA"
const CountryCodeBb CountryCode = "BB"
const CountryCodeBd CountryCode = "BD"
const CountryCodeBe CountryCode = "BE"
const CountryCodeBf CountryCode = "BF"
const CountryCodeBg CountryCode = "BG"
const CountryCodeBh CountryCode = "BH"
const CountryCodeBi CountryCode = "BI"
const CountryCodeBj CountryCode = "BJ"
const CountryCodeBl CountryCode = "BL"
const CountryCodeBm CountryCode = "BM"
const CountryCodeBn CountryCode = "BN"
const CountryCodeBo CountryCode = "BO"
const CountryCodeBq CountryCode = "BQ"
const CountryCodeBr CountryCode = "BR"
const CountryCodeBs CountryCode = "BS"
const CountryCodeBt CountryCode = "BT"
const CountryCodeBv CountryCode = "BV"
const CountryCodeBw CountryCode = "BW"
const CountryCodeBy CountryCode = "BY"
const CountryCodeBz CountryCode = "BZ"
const CountryCodeCa CountryCode = "CA"
const CountryCodeCc CountryCode = "CC"
const CountryCodeCd CountryCode = "CD"
const CountryCodeCf CountryCode = "CF"
const CountryCodeCg CountryCode = "CG"
const CountryCodeCh CountryCode = "CH"
const CountryCodeCi CountryCode = "CI"
const CountryCodeCk CountryCode = "CK"
const CountryCodeCl CountryCode = "CL"
const CountryCodeCm CountryCode = "CM"
const CountryCodeCn CountryCode = "CN"
const CountryCodeCo CountryCode = "CO"
const CountryCodeCr CountryCode = "CR"
const CountryCodeCu CountryCode = "CU"
const CountryCodeCv CountryCode = "CV"
const CountryCodeCw CountryCode = "CW"
const CountryCodeCx CountryCode = "CX"
const CountryCodeCy CountryCode = "CY"
const CountryCodeCz CountryCode = "CZ"
const CountryCodeDe CountryCode = "DE"
const CountryCodeDj CountryCode = "DJ"
const CountryCodeDk CountryCode = "DK"
const CountryCodeDm CountryCode = "DM"
const CountryCodeDo CountryCode = "DO"
const CountryCodeDz CountryCode = "DZ"
const CountryCodeEc CountryCode = "EC"
const CountryCodeEe CountryCode = "EE"
const CountryCodeEg CountryCode = "EG"
const CountryCodeEh CountryCode = "EH"
const CountryCodeEr CountryCode = "ER"
const CountryCodeEs CountryCode = "ES"
const CountryCodeEt CountryCode = "ET"
const CountryCodeFi CountryCode = "FI"
const CountryCodeFj CountryCode = "FJ"
const CountryCodeFk CountryCode = "FK"
const CountryCodeFm CountryCode = "FM"
const CountryCodeFo CountryCode = "FO"
const CountryCodeFr CountryCode = "FR"
const CountryCodeGa CountryCode = "GA"
const CountryCodeGb CountryCode = "GB"
const CountryCodeGd CountryCode = "GD"
const CountryCodeGe CountryCode = "GE"
const CountryCodeGf CountryCode = "GF"
const CountryCodeGg CountryCode = "GG"
const CountryCodeGh CountryCode = "GH"
const CountryCodeGi CountryCode = "GI"
const CountryCodeGl CountryCode = "GL"
const CountryCodeGm CountryCode = "GM"
const CountryCodeGn CountryCode = "GN"
const CountryCodeGp CountryCode = "GP"
const CountryCodeGq CountryCode = "GQ"
const CountryCodeGr CountryCode = "GR"
const CountryCodeGs CountryCode = "GS"
const CountryCodeGt CountryCode = "GT"
const CountryCodeGu CountryCode = "GU"
const CountryCodeGw CountryCode = "GW"
const CountryCodeGy CountryCode = "GY"
const CountryCodeHk CountryCode = "HK"
const CountryCodeHm CountryCode = "HM"
const CountryCodeHn CountryCode = "HN"
const CountryCodeHr CountryCode = "HR"
const CountryCodeHt CountryCode = "HT"
const CountryCodeHu CountryCode = "HU"
const CountryCodeId CountryCode = "ID"
const CountryCodeIe CountryCode = "IE"
const CountryCodeIl CountryCode = "IL"
const CountryCodeIm CountryCode = "IM"
const CountryCodeIn CountryCode = "IN"
const CountryCodeIo CountryCode = "IO"
const CountryCodeIq CountryCode = "IQ"
const CountryCodeIr CountryCode = "IR"
const CountryCodeIs CountryCode = "IS"
const CountryCodeIt CountryCode = "IT"
const CountryCodeJe CountryCode = "JE"
const CountryCodeJm CountryCode = "JM"
const CountryCodeJo CountryCode = "JO"
const CountryCodeJp CountryCode = "JP"
const CountryCodeKe CountryCode = "KE"
const CountryCodeKg CountryCode = "KG"
const CountryCodeKh CountryCode = "KH"
const CountryCodeKi CountryCode = "KI"
const CountryCodeKm CountryCode = "KM"
const CountryCodeKn CountryCode = "KN"
const CountryCodeKp CountryCode = "KP"
const CountryCodeKr CountryCode = "KR"
const CountryCodeKw CountryCode = "KW"
const CountryCodeKy CountryCode = "KY"
const CountryCodeKz CountryCode = "KZ"
const CountryCodeLa CountryCode = "LA"
const CountryCodeLb CountryCode = "LB"
const CountryCodeLc CountryCode = "LC"
const CountryCodeLi CountryCode = "LI"
const CountryCodeLk CountryCode = "LK"
const CountryCodeLr CountryCode = "LR"
const CountryCodeLs CountryCode = "LS"
const CountryCodeLt CountryCode = "LT"
const CountryCodeLu CountryCode = "LU"
const CountryCodeLv CountryCode = "LV"
const CountryCodeLy CountryCode = "LY"
const CountryCodeMa CountryCode = "MA"
const CountryCodeMc CountryCode = "MC"
const CountryCodeMd CountryCode = "MD"
const CountryCodeMe CountryCode = "ME"
const CountryCodeMf CountryCode = "MF"
const CountryCodeMg CountryCode = "MG"
const CountryCodeMh CountryCode = "MH"
const CountryCodeMk CountryCode = "MK"
const CountryCodeMl CountryCode = "ML"
const CountryCodeMm CountryCode = "MM"
const CountryCodeMn CountryCode = "MN"
const CountryCodeMo CountryCode = "MO"
const CountryCodeMp CountryCode = "MP"
const CountryCodeMq CountryCode = "MQ"
const CountryCodeMr CountryCode = "MR"
const CountryCodeMs CountryCode = "MS"
const CountryCodeMt CountryCode = "MT"
const CountryCodeMu CountryCode = "MU"
const CountryCodeMv CountryCode = "MV"
const CountryCodeMw CountryCode = "MW"
const CountryCodeMx CountryCode = "MX"
const CountryCodeMy CountryCode = "MY"
const CountryCodeMz CountryCode = "MZ"
const CountryCodeNa CountryCode = "NA"
const CountryCodeNc CountryCode = "NC"
const CountryCodeNe CountryCode = "NE"
const CountryCodeNf CountryCode = "NF"
const CountryCodeNg CountryCode = "NG"
const CountryCodeNi CountryCode = "NI"
const CountryCodeNl CountryCode = "NL"
const CountryCodeNo CountryCode = "NO"
const CountryCodeNp CountryCode = "NP"
const CountryCodeNr CountryCode = "NR"
const CountryCodeNu CountryCode = "NU"
const CountryCodeNz CountryCode = "NZ"
const CountryCodeOm CountryCode = "OM"
const CountryCodePa CountryCode = "PA"
const CountryCodePe CountryCode = "PE"
const CountryCodePf CountryCode = "PF"
const CountryCodePg CountryCode = "PG"
const CountryCodePh CountryCode = "PH"
const CountryCodePk CountryCode = "PK"
const CountryCodePl CountryCode = "PL"
const CountryCodePm CountryCode = "PM"
const CountryCodePn CountryCode = "PN"
const CountryCodePr CountryCode = "PR"
const CountryCodePs CountryCode = "PS"
const CountryCodePt CountryCode = "PT"
const CountryCodePw CountryCode = "PW"
const CountryCodePy CountryCode = "PY"
const CountryCodeQa CountryCode = "QA"
const CountryCodeRe CountryCode = "RE"
const CountryCodeRo CountryCode = "RO"
const CountryCodeRs CountryCode = "RS"
const CountryCodeRu CountryCode = "RU"
const CountryCodeRw CountryCode = "RW"
const CountryCodeSa CountryCode = "SA"
const CountryCodeSb CountryCode = "SB"
const CountryCodeSc CountryCode = "SC"
const CountryCodeSd CountryCode = "SD"
const CountryCodeSe CountryCode = "SE"
const CountryCodeSg CountryCode = "SG"
const CountryCodeSh CountryCode = "SH"
const CountryCodeSi CountryCode = "SI"
const CountryCodeSj CountryCode = "SJ"
const CountryCodeSk CountryCode = "SK"
const CountryCodeSl CountryCode = "SL"
const CountryCodeSm CountryCode = "SM"
const CountryCodeSn CountryCode = "SN"
const CountryCodeSo CountryCode = "SO"
const CountryCodeSr CountryCode = "SR"
const CountryCodeSs CountryCode = "SS"
const CountryCodeSt CountryCode = "ST"
const CountryCodeSv CountryCode = "SV"
const CountryCodeSx CountryCode = "SX"
const CountryCodeSy CountryCode = "SY"
const CountryCodeSz CountryCode = "SZ"
const CountryCodeTc CountryCode = "TC"
const CountryCodeTd CountryCode = "TD"
const CountryCodeTf CountryCode = "TF"
const CountryCodeTg CountryCode = "TG"
const CountryCodeTh CountryCode = "TH"
const CountryCodeTj CountryCode = "TJ"
const CountryCodeTk CountryCode = "TK"
const CountryCodeTl CountryCode = "TL"
const CountryCodeTm CountryCode = "TM"
const CountryCodeTn CountryCode = "TN"
const CountryCodeTo CountryCode = "TO"
const CountryCodeTr CountryCode = "TR"
const CountryCodeTt CountryCode = "TT"
const CountryCodeTv CountryCode = "TV"
const CountryCodeTw CountryCode = "TW"
const CountryCodeTz CountryCode = "TZ"
const CountryCodeUa CountryCode = "UA"
const CountryCodeUg CountryCode = "UG"
const CountryCodeUm CountryCode = "UM"
const CountryCodeUs CountryCode = "US"
const CountryCodeUy CountryCode = "UY"
const CountryCodeUz CountryCode = "UZ"
const CountryCodeVa CountryCode = "VA"
const CountryCodeVc CountryCode = "VC"
const CountryCodeVe CountryCode = "VE"
const CountryCodeVg CountryCode = "VG"
const CountryCodeVi CountryCode = "VI"
const CountryCodeVn CountryCode = "VN"
const CountryCodeVu CountryCode = "VU"
const CountryCodeWf CountryCode = "WF"
const CountryCodeWs CountryCode = "WS"
const CountryCodeYe CountryCode = "YE"
const CountryCodeYt CountryCode = "YT"
const CountryCodeZa CountryCode = "ZA"
const CountryCodeZm CountryCode = "ZM"
const CountryCodeZw CountryCode = "ZW"

type LEIIdentifier string

type Max140Text string

type Max16Text string

type Max35Text string

type Max35TextTCH string

type Max35TextTCH2 string

type Max35TextTCH3 string

const Max35TextTCH3Dsct Max35TextTCH3 = "DSCT"
const Max35TextTCH3Full Max35TextTCH3 = "FULL"
const Max35TextTCH3Orig Max35TextTCH3 = "ORIG"

type Max70Text string

type OrigMsgName string

const OrigMsgNamePacs00800106 OrigMsgName = "pacs.008.001.06"
const OrigMsgNamePacs00800108 OrigMsgName = "pacs.008.001.08"
const OrigMsgNamePain01300107 OrigMsgName = "pain.013.001.07"

type OrigMsgNameTCH string

const OrigMsgNameTCHPain01300107 OrigMsgNameTCH = "pain.013.001.07"

type OrigMsgNameTCH2 string

const OrigMsgNameTCH2Pacs00800106 OrigMsgNameTCH2 = "pacs.008.001.06"
const OrigMsgNameTCH2Pacs00800108 OrigMsgNameTCH2 = "pacs.008.001.08"

type PhoneNumber string

type UUIDv4Identifier string
