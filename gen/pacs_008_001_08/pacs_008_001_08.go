// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Models for urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 with prefix 'ct'
package pacs_008_001_08

import (
	"encoding/xml"

	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType declarations

type AccountIdentification4Choice struct {
	Othr *GenericAccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v AccountIdentification4Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ct:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ActiveCurrencyAndAmount struct {
	Value ActiveCurrencyAndAmountSimpleType `xml:",chardata"`
	Ccy   ActiveCurrencyCode                `xml:"Ccy,attr"`
}

type ActiveOrHistoricCurrencyAndAmount struct {
	Value ActiveOrHistoricCurrencyAndAmountSimpleType `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode                `xml:"Ccy,attr"`
}

type BranchAndFinancialInstitutionIdentification6 struct {
	FinInstnId FinancialInstitutionIdentification18 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 FinInstnId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v BranchAndFinancialInstitutionIdentification6) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.FinInstnId, xml.StartElement{Name: xml.Name{Local: "ct:FinInstnId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type BranchAndFinancialInstitutionIdentification6TCH struct {
	FinInstnId FinancialInstitutionIdentification18TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 FinInstnId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v BranchAndFinancialInstitutionIdentification6TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.FinInstnId, xml.StartElement{Name: xml.Name{Local: "ct:FinInstnId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CashAccount38 struct {
	Id   AccountIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id"`
	Nm   *Max70Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Nm,omitempty"`
	Prxy *ProxyAccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Prxy,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CashAccount38) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ct:Nm"}})
	e.EncodeElement(v.Prxy, xml.StartElement{Name: xml.Name{Local: "ct:Prxy"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CashAccount38TCH struct {
	Id AccountIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id"`
	Nm *Max70Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Nm,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CashAccount38TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ct:Nm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CashAccount38TCH2 struct {
	Id   AccountIdentification4Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id"`
	Nm   *Max70Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Nm,omitempty"`
	Prxy *ProxyAccountIdentification1TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Prxy,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CashAccount38TCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ct:Nm"}})
	e.EncodeElement(v.Prxy, xml.StartElement{Name: xml.Name{Local: "ct:Prxy"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CategoryPurpose1Choice struct {
	Prtry *CatePurpProp `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CategoryPurpose1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ct:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ClearingSystemIdentification3Choice struct {
	Cd *ExternalCashClearingSystem1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Cd,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ClearingSystemIdentification3Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ct:Cd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ClearingSystemMemberIdentification2 struct {
	MmbId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 MmbId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ClearingSystemMemberIdentification2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.MmbId, xml.StartElement{Name: xml.Name{Local: "ct:MmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ClearingSystemMemberIdentification2TCH struct {
	MmbId Max35TextTCH3 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 MmbId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ClearingSystemMemberIdentification2TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.MmbId, xml.StartElement{Name: xml.Name{Local: "ct:MmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CreditTransferTransaction39 struct {
	PmtId           PaymentIdentification7                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 PmtId"`
	PmtTpInf        PaymentTypeInformation28                     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 PmtTpInf"`
	IntrBkSttlmAmt  ActiveCurrencyAndAmount                      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 IntrBkSttlmAmt"`
	ChrgBr          ChargeBearerType1Code                        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 ChrgBr"`
	InstgAgt        BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 InstgAgt"`
	InstdAgt        BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 InstdAgt"`
	UltmtDbtr       *PartyIdentification135                      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 UltmtDbtr,omitempty"`
	InitgPty        *PartyIdentification135                      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 InitgPty,omitempty"`
	Dbtr            PartyIdentification135                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Dbtr"`
	DbtrAcct        CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 DbtrAcct"`
	DbtrAgt         BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 DbtrAgt"`
	CdtrAgt         BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CdtrAgt"`
	Cdtr            PartyIdentification135                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Cdtr"`
	CdtrAcct        CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CdtrAcct"`
	UltmtCdtr       *PartyIdentification135                      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 UltmtCdtr,omitempty"`
	InstrForCdtrAgt []*InstructionForCreditorAgent1              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 InstrForCdtrAgt,omitempty"`
	RltdRmtInf      *RemittanceLocation7                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RltdRmtInf,omitempty"`
	RmtInf          *RemittanceInformation16                     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RmtInf,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CreditTransferTransaction39) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.PmtId, xml.StartElement{Name: xml.Name{Local: "ct:PmtId"}})
	e.EncodeElement(v.PmtTpInf, xml.StartElement{Name: xml.Name{Local: "ct:PmtTpInf"}})
	e.EncodeElement(v.IntrBkSttlmAmt, xml.StartElement{Name: xml.Name{Local: "ct:IntrBkSttlmAmt"}})
	e.EncodeElement(v.ChrgBr, xml.StartElement{Name: xml.Name{Local: "ct:ChrgBr"}})
	e.EncodeElement(v.InstgAgt, xml.StartElement{Name: xml.Name{Local: "ct:InstgAgt"}})
	e.EncodeElement(v.InstdAgt, xml.StartElement{Name: xml.Name{Local: "ct:InstdAgt"}})
	e.EncodeElement(v.UltmtDbtr, xml.StartElement{Name: xml.Name{Local: "ct:UltmtDbtr"}})
	e.EncodeElement(v.InitgPty, xml.StartElement{Name: xml.Name{Local: "ct:InitgPty"}})
	e.EncodeElement(v.Dbtr, xml.StartElement{Name: xml.Name{Local: "ct:Dbtr"}})
	e.EncodeElement(v.DbtrAcct, xml.StartElement{Name: xml.Name{Local: "ct:DbtrAcct"}})
	e.EncodeElement(v.DbtrAgt, xml.StartElement{Name: xml.Name{Local: "ct:DbtrAgt"}})
	e.EncodeElement(v.CdtrAgt, xml.StartElement{Name: xml.Name{Local: "ct:CdtrAgt"}})
	e.EncodeElement(v.Cdtr, xml.StartElement{Name: xml.Name{Local: "ct:Cdtr"}})
	e.EncodeElement(v.CdtrAcct, xml.StartElement{Name: xml.Name{Local: "ct:CdtrAcct"}})
	e.EncodeElement(v.UltmtCdtr, xml.StartElement{Name: xml.Name{Local: "ct:UltmtCdtr"}})
	e.EncodeElement(v.InstrForCdtrAgt, xml.StartElement{Name: xml.Name{Local: "ct:InstrForCdtrAgt"}})
	e.EncodeElement(v.RltdRmtInf, xml.StartElement{Name: xml.Name{Local: "ct:RltdRmtInf"}})
	e.EncodeElement(v.RmtInf, xml.StartElement{Name: xml.Name{Local: "ct:RmtInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CreditTransferTransaction39TCH struct {
	PmtId           PaymentIdentification7TCH                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 PmtId"`
	PmtTpInf        PaymentTypeInformation28TCH                     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 PmtTpInf"`
	IntrBkSttlmAmt  ActiveCurrencyAndAmount                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 IntrBkSttlmAmt"`
	ChrgBr          ChargeBearerType1Code                           `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 ChrgBr"`
	InstgAgt        BranchAndFinancialInstitutionIdentification6TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 InstgAgt"`
	InstdAgt        BranchAndFinancialInstitutionIdentification6TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 InstdAgt"`
	UltmtDbtr       *PartyIdentification135TCH                      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 UltmtDbtr,omitempty"`
	InitgPty        *PartyIdentification135TCH2                     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 InitgPty,omitempty"`
	Dbtr            PartyIdentification135TCH3                      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Dbtr"`
	DbtrAcct        CashAccount38TCH                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 DbtrAcct"`
	DbtrAgt         BranchAndFinancialInstitutionIdentification6TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 DbtrAgt"`
	CdtrAgt         BranchAndFinancialInstitutionIdentification6TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CdtrAgt"`
	Cdtr            PartyIdentification135TCH3                      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Cdtr"`
	CdtrAcct        CashAccount38TCH2                               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CdtrAcct"`
	UltmtCdtr       *PartyIdentification135TCH                      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 UltmtCdtr,omitempty"`
	InstrForCdtrAgt []*InstructionForCreditorAgent1TCH              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 InstrForCdtrAgt,omitempty"`
	RltdRmtInf      *RemittanceLocation7TCH                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RltdRmtInf,omitempty"`
	RmtInf          *RemittanceInformation16TCH                     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RmtInf,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CreditTransferTransaction39TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.PmtId, xml.StartElement{Name: xml.Name{Local: "ct:PmtId"}})
	e.EncodeElement(v.PmtTpInf, xml.StartElement{Name: xml.Name{Local: "ct:PmtTpInf"}})
	e.EncodeElement(v.IntrBkSttlmAmt, xml.StartElement{Name: xml.Name{Local: "ct:IntrBkSttlmAmt"}})
	e.EncodeElement(v.ChrgBr, xml.StartElement{Name: xml.Name{Local: "ct:ChrgBr"}})
	e.EncodeElement(v.InstgAgt, xml.StartElement{Name: xml.Name{Local: "ct:InstgAgt"}})
	e.EncodeElement(v.InstdAgt, xml.StartElement{Name: xml.Name{Local: "ct:InstdAgt"}})
	e.EncodeElement(v.UltmtDbtr, xml.StartElement{Name: xml.Name{Local: "ct:UltmtDbtr"}})
	e.EncodeElement(v.InitgPty, xml.StartElement{Name: xml.Name{Local: "ct:InitgPty"}})
	e.EncodeElement(v.Dbtr, xml.StartElement{Name: xml.Name{Local: "ct:Dbtr"}})
	e.EncodeElement(v.DbtrAcct, xml.StartElement{Name: xml.Name{Local: "ct:DbtrAcct"}})
	e.EncodeElement(v.DbtrAgt, xml.StartElement{Name: xml.Name{Local: "ct:DbtrAgt"}})
	e.EncodeElement(v.CdtrAgt, xml.StartElement{Name: xml.Name{Local: "ct:CdtrAgt"}})
	e.EncodeElement(v.Cdtr, xml.StartElement{Name: xml.Name{Local: "ct:Cdtr"}})
	e.EncodeElement(v.CdtrAcct, xml.StartElement{Name: xml.Name{Local: "ct:CdtrAcct"}})
	e.EncodeElement(v.UltmtCdtr, xml.StartElement{Name: xml.Name{Local: "ct:UltmtCdtr"}})
	e.EncodeElement(v.InstrForCdtrAgt, xml.StartElement{Name: xml.Name{Local: "ct:InstrForCdtrAgt"}})
	e.EncodeElement(v.RltdRmtInf, xml.StartElement{Name: xml.Name{Local: "ct:RltdRmtInf"}})
	e.EncodeElement(v.RmtInf, xml.StartElement{Name: xml.Name{Local: "ct:RmtInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DateAndPlaceOfBirth1 struct {
	BirthDt     rtp.ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 BirthDt"`
	CityOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CityOfBirth"`
	CtryOfBirth CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CtryOfBirth"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DateAndPlaceOfBirth1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.BirthDt, xml.StartElement{Name: xml.Name{Local: "ct:BirthDt"}})
	e.EncodeElement(v.CityOfBirth, xml.StartElement{Name: xml.Name{Local: "ct:CityOfBirth"}})
	e.EncodeElement(v.CtryOfBirth, xml.StartElement{Name: xml.Name{Local: "ct:CtryOfBirth"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DiscountAmountAndType1 struct {
	Tp  DiscountAmountType1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Tp"`
	Amt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Amt"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DiscountAmountAndType1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ct:Tp"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ct:Amt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DiscountAmountAndType1TCH struct {
	Tp  DiscountAmountType1ChoiceTCH      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Tp"`
	Amt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Amt"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DiscountAmountAndType1TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ct:Tp"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ct:Amt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DiscountAmountType1Choice struct {
	Prtry *Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DiscountAmountType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ct:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DiscountAmountType1ChoiceTCH struct {
	Prtry *Max35TextTCH4 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DiscountAmountType1ChoiceTCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ct:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Document struct {
	XMLName           xml.Name
	FIToFICstmrCdtTrf FIToFICustomerCreditTransferV08 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 FIToFICstmrCdtTrf"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Document) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.FIToFICstmrCdtTrf, xml.StartElement{Name: xml.Name{Local: "ct:FIToFICstmrCdtTrf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DocumentTCH struct {
	XMLName           xml.Name
	FIToFICstmrCdtTrf FIToFICustomerCreditTransferV08TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 FIToFICstmrCdtTrf"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentTCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.FIToFICstmrCdtTrf, xml.StartElement{Name: xml.Name{Local: "ct:FIToFICstmrCdtTrf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type FinancialInstitutionIdentification18 struct {
	ClrSysMmbId ClearingSystemMemberIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 ClrSysMmbId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FinancialInstitutionIdentification18) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.ClrSysMmbId, xml.StartElement{Name: xml.Name{Local: "ct:ClrSysMmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type FinancialInstitutionIdentification18TCH struct {
	ClrSysMmbId ClearingSystemMemberIdentification2TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 ClrSysMmbId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FinancialInstitutionIdentification18TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.ClrSysMmbId, xml.StartElement{Name: xml.Name{Local: "ct:ClrSysMmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type FIToFICustomerCreditTransferV08 struct {
	GrpHdr      GroupHeader93               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 GrpHdr"`
	CdtTrfTxInf CreditTransferTransaction39 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CdtTrfTxInf"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FIToFICustomerCreditTransferV08) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.GrpHdr, xml.StartElement{Name: xml.Name{Local: "ct:GrpHdr"}})
	e.EncodeElement(v.CdtTrfTxInf, xml.StartElement{Name: xml.Name{Local: "ct:CdtTrfTxInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type FIToFICustomerCreditTransferV08TCH struct {
	GrpHdr      GroupHeader93TCH               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 GrpHdr"`
	CdtTrfTxInf CreditTransferTransaction39TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CdtTrfTxInf"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FIToFICustomerCreditTransferV08TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.GrpHdr, xml.StartElement{Name: xml.Name{Local: "ct:GrpHdr"}})
	e.EncodeElement(v.CdtTrfTxInf, xml.StartElement{Name: xml.Name{Local: "ct:CdtTrfTxInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GenericAccountIdentification1 struct {
	Id Max34Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericAccountIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GenericPersonIdentification1 struct {
	Id      Max35Text                              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id"`
	SchmeNm *PersonIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 SchmeNm,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericPersonIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "ct:SchmeNm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GroupHeader93 struct {
	MsgId             Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 MsgId"`
	CreDtTm           rtp.ISODateTime         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CreDtTm"`
	NbOfTxs           Max1NumericText         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 NbOfTxs"`
	TtlIntrBkSttlmAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 TtlIntrBkSttlmAmt"`
	IntrBkSttlmDt     rtp.ISODate             `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 IntrBkSttlmDt"`
	SttlmInf          SettlementInstruction7  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 SttlmInf"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GroupHeader93) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.MsgId, xml.StartElement{Name: xml.Name{Local: "ct:MsgId"}})
	e.EncodeElement(v.CreDtTm, xml.StartElement{Name: xml.Name{Local: "ct:CreDtTm"}})
	e.EncodeElement(v.NbOfTxs, xml.StartElement{Name: xml.Name{Local: "ct:NbOfTxs"}})
	e.EncodeElement(v.TtlIntrBkSttlmAmt, xml.StartElement{Name: xml.Name{Local: "ct:TtlIntrBkSttlmAmt"}})
	e.EncodeElement(v.IntrBkSttlmDt, xml.StartElement{Name: xml.Name{Local: "ct:IntrBkSttlmDt"}})
	e.EncodeElement(v.SttlmInf, xml.StartElement{Name: xml.Name{Local: "ct:SttlmInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GroupHeader93TCH struct {
	MsgId             Max35TextTCH              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 MsgId"`
	CreDtTm           rtp.ISODateTime           `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CreDtTm"`
	NbOfTxs           Max1NumericText           `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 NbOfTxs"`
	TtlIntrBkSttlmAmt ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 TtlIntrBkSttlmAmt"`
	IntrBkSttlmDt     rtp.ISODate               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 IntrBkSttlmDt"`
	SttlmInf          SettlementInstruction7TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 SttlmInf"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GroupHeader93TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.MsgId, xml.StartElement{Name: xml.Name{Local: "ct:MsgId"}})
	e.EncodeElement(v.CreDtTm, xml.StartElement{Name: xml.Name{Local: "ct:CreDtTm"}})
	e.EncodeElement(v.NbOfTxs, xml.StartElement{Name: xml.Name{Local: "ct:NbOfTxs"}})
	e.EncodeElement(v.TtlIntrBkSttlmAmt, xml.StartElement{Name: xml.Name{Local: "ct:TtlIntrBkSttlmAmt"}})
	e.EncodeElement(v.IntrBkSttlmDt, xml.StartElement{Name: xml.Name{Local: "ct:IntrBkSttlmDt"}})
	e.EncodeElement(v.SttlmInf, xml.StartElement{Name: xml.Name{Local: "ct:SttlmInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type InstructionForCreditorAgent1 struct {
	Cd       Instruction3CodeTCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Cd"`
	InstrInf Max140Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 InstrInf"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v InstructionForCreditorAgent1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ct:Cd"}})
	e.EncodeElement(v.InstrInf, xml.StartElement{Name: xml.Name{Local: "ct:InstrInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type InstructionForCreditorAgent1TCH struct {
	Cd       Instruction3CodeTCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Cd"`
	InstrInf Max140Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 InstrInf"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v InstructionForCreditorAgent1TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ct:Cd"}})
	e.EncodeElement(v.InstrInf, xml.StartElement{Name: xml.Name{Local: "ct:InstrInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type LocalInstrument2Choice struct {
	Prtry *LocalProp `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v LocalInstrument2Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ct:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentification29 struct {
	LEI LEIIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 LEI"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification29) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.LEI, xml.StartElement{Name: xml.Name{Local: "ct:LEI"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentification29TCH struct {
	LEI  *LEIIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 LEI,omitempty"`
	Othr []*GenericOrganisationIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification29TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.LEI, xml.StartElement{Name: xml.Name{Local: "ct:LEI"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ct:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party38Choice struct {
	OrgId  *OrganisationIdentification29TCH3 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 OrgId,omitempty"`
	PrvtId *PersonIdentification13           `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 PrvtId,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "ct:OrgId"}})
	e.EncodeElement(v.PrvtId, xml.StartElement{Name: xml.Name{Local: "ct:PrvtId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party38ChoiceTCH struct {
	OrgId  *OrganisationIdentification29TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 OrgId,omitempty"`
	PrvtId *PersonIdentification13TCH       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 PrvtId,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38ChoiceTCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "ct:OrgId"}})
	e.EncodeElement(v.PrvtId, xml.StartElement{Name: xml.Name{Local: "ct:PrvtId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party38ChoiceTCH2 struct {
	OrgId *OrganisationIdentification29TCH2 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 OrgId,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38ChoiceTCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "ct:OrgId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PartyIdentification135 struct {
	Nm      *Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Nm,omitempty"`
	PstlAdr *PostalAddress24 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 PstlAdr,omitempty"`
	Id      *Party38Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ct:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "ct:PstlAdr"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PartyIdentification135TCH struct {
	Nm      Max140Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Nm"`
	PstlAdr *PostalAddress24TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 PstlAdr,omitempty"`
	Id      *Party38ChoiceTCH   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ct:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "ct:PstlAdr"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PartyIdentification135TCH2 struct {
	Nm Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Nm"`
	Id *Party38ChoiceTCH2 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135TCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ct:Nm"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PartyIdentification135TCH3 struct {
	Nm      Max140Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Nm"`
	PstlAdr *PostalAddress24TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 PstlAdr,omitempty"`
	Id      *Party38ChoiceTCH3  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135TCH3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ct:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "ct:PstlAdr"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PaymentIdentification7 struct {
	InstrId    Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 InstrId"`
	EndToEndId Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 EndToEndId"`
	TxId       Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 TxId"`
	UETR       *UUIDv4Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 UETR,omitempty"`
	ClrSysRef  *Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 ClrSysRef,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PaymentIdentification7) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.InstrId, xml.StartElement{Name: xml.Name{Local: "ct:InstrId"}})
	e.EncodeElement(v.EndToEndId, xml.StartElement{Name: xml.Name{Local: "ct:EndToEndId"}})
	e.EncodeElement(v.TxId, xml.StartElement{Name: xml.Name{Local: "ct:TxId"}})
	e.EncodeElement(v.UETR, xml.StartElement{Name: xml.Name{Local: "ct:UETR"}})
	e.EncodeElement(v.ClrSysRef, xml.StartElement{Name: xml.Name{Local: "ct:ClrSysRef"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PaymentIdentification7TCH struct {
	InstrId    Max35TextTCH2     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 InstrId"`
	EndToEndId Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 EndToEndId"`
	TxId       Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 TxId"`
	UETR       *UUIDv4Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 UETR,omitempty"`
	ClrSysRef  *Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 ClrSysRef,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PaymentIdentification7TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.InstrId, xml.StartElement{Name: xml.Name{Local: "ct:InstrId"}})
	e.EncodeElement(v.EndToEndId, xml.StartElement{Name: xml.Name{Local: "ct:EndToEndId"}})
	e.EncodeElement(v.TxId, xml.StartElement{Name: xml.Name{Local: "ct:TxId"}})
	e.EncodeElement(v.UETR, xml.StartElement{Name: xml.Name{Local: "ct:UETR"}})
	e.EncodeElement(v.ClrSysRef, xml.StartElement{Name: xml.Name{Local: "ct:ClrSysRef"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PaymentTypeInformation28 struct {
	SvcLvl    ServiceLevel8Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 SvcLvl"`
	LclInstrm LocalInstrument2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 LclInstrm"`
	CtgyPurp  CategoryPurpose1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CtgyPurp"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PaymentTypeInformation28) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.SvcLvl, xml.StartElement{Name: xml.Name{Local: "ct:SvcLvl"}})
	e.EncodeElement(v.LclInstrm, xml.StartElement{Name: xml.Name{Local: "ct:LclInstrm"}})
	e.EncodeElement(v.CtgyPurp, xml.StartElement{Name: xml.Name{Local: "ct:CtgyPurp"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PaymentTypeInformation28TCH struct {
	SvcLvl    ServiceLevel8Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 SvcLvl"`
	LclInstrm LocalInstrument2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 LclInstrm"`
	CtgyPurp  CategoryPurpose1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CtgyPurp"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PaymentTypeInformation28TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.SvcLvl, xml.StartElement{Name: xml.Name{Local: "ct:SvcLvl"}})
	e.EncodeElement(v.LclInstrm, xml.StartElement{Name: xml.Name{Local: "ct:LclInstrm"}})
	e.EncodeElement(v.CtgyPurp, xml.StartElement{Name: xml.Name{Local: "ct:CtgyPurp"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PersonIdentification13 struct {
	DtAndPlcOfBirth *DateAndPlaceOfBirth1           `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 DtAndPlcOfBirth,omitempty"`
	Othr            []*GenericPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentification13) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DtAndPlcOfBirth, xml.StartElement{Name: xml.Name{Local: "ct:DtAndPlcOfBirth"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ct:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PersonIdentification13TCH struct {
	DtAndPlcOfBirth *DateAndPlaceOfBirth1           `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 DtAndPlcOfBirth,omitempty"`
	Othr            []*GenericPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentification13TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DtAndPlcOfBirth, xml.StartElement{Name: xml.Name{Local: "ct:DtAndPlcOfBirth"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ct:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PersonIdentification13TCH2 struct {
	DtAndPlcOfBirth DateAndPlaceOfBirth1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 DtAndPlcOfBirth"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentification13TCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DtAndPlcOfBirth, xml.StartElement{Name: xml.Name{Local: "ct:DtAndPlcOfBirth"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PostalAddress24 struct {
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 StrtNm"`
	BldgNb      *Max16Text  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 BldgNb,omitempty"`
	PstCd       Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 PstCd"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 TwnNm"`
	CtrySubDvsn Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CtrySubDvsn"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Ctry"`
	AdrLine     *Max70Text  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 AdrLine,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PostalAddress24) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.StrtNm, xml.StartElement{Name: xml.Name{Local: "ct:StrtNm"}})
	e.EncodeElement(v.BldgNb, xml.StartElement{Name: xml.Name{Local: "ct:BldgNb"}})
	e.EncodeElement(v.PstCd, xml.StartElement{Name: xml.Name{Local: "ct:PstCd"}})
	e.EncodeElement(v.TwnNm, xml.StartElement{Name: xml.Name{Local: "ct:TwnNm"}})
	e.EncodeElement(v.CtrySubDvsn, xml.StartElement{Name: xml.Name{Local: "ct:CtrySubDvsn"}})
	e.EncodeElement(v.Ctry, xml.StartElement{Name: xml.Name{Local: "ct:Ctry"}})
	e.EncodeElement(v.AdrLine, xml.StartElement{Name: xml.Name{Local: "ct:AdrLine"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PostalAddress24TCH struct {
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 StrtNm"`
	BldgNb      *Max16Text  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 BldgNb,omitempty"`
	PstCd       Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 PstCd"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 TwnNm"`
	CtrySubDvsn Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CtrySubDvsn"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Ctry"`
	AdrLine     *Max70Text  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 AdrLine,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PostalAddress24TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.StrtNm, xml.StartElement{Name: xml.Name{Local: "ct:StrtNm"}})
	e.EncodeElement(v.BldgNb, xml.StartElement{Name: xml.Name{Local: "ct:BldgNb"}})
	e.EncodeElement(v.PstCd, xml.StartElement{Name: xml.Name{Local: "ct:PstCd"}})
	e.EncodeElement(v.TwnNm, xml.StartElement{Name: xml.Name{Local: "ct:TwnNm"}})
	e.EncodeElement(v.CtrySubDvsn, xml.StartElement{Name: xml.Name{Local: "ct:CtrySubDvsn"}})
	e.EncodeElement(v.Ctry, xml.StartElement{Name: xml.Name{Local: "ct:Ctry"}})
	e.EncodeElement(v.AdrLine, xml.StartElement{Name: xml.Name{Local: "ct:AdrLine"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ProxyAccountIdentification1 struct {
	Id Max2048Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ProxyAccountIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ProxyAccountIdentification1TCH struct {
	Id Max2048TextTCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ProxyAccountIdentification1TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ReferredDocumentInformation7 struct {
	Tp     *ReferredDocumentType5 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Tp,omitempty"`
	Nb     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Nb"`
	RltdDt *rtp.ISODate           `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RltdDt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferredDocumentInformation7) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ct:Tp"}})
	e.EncodeElement(v.Nb, xml.StartElement{Name: xml.Name{Local: "ct:Nb"}})
	e.EncodeElement(v.RltdDt, xml.StartElement{Name: xml.Name{Local: "ct:RltdDt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ReferredDocumentInformation7TCH struct {
	Tp     *ReferredDocumentType5TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Tp,omitempty"`
	Nb     Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Nb"`
	RltdDt *rtp.ISODate              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RltdDt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferredDocumentInformation7TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ct:Tp"}})
	e.EncodeElement(v.Nb, xml.StartElement{Name: xml.Name{Local: "ct:Nb"}})
	e.EncodeElement(v.RltdDt, xml.StartElement{Name: xml.Name{Local: "ct:RltdDt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceAmount2 struct {
	DscntApldAmt []*DiscountAmountAndType1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 DscntApldAmt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceAmount2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DscntApldAmt, xml.StartElement{Name: xml.Name{Local: "ct:DscntApldAmt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceAmount2TCH struct {
	DscntApldAmt []*DiscountAmountAndType1TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 DscntApldAmt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceAmount2TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DscntApldAmt, xml.StartElement{Name: xml.Name{Local: "ct:DscntApldAmt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceInformation16 struct {
	Ustrd *Max140Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Ustrd,omitempty"`
	Strd  *StructuredRemittanceInformation16 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Strd,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceInformation16) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Ustrd, xml.StartElement{Name: xml.Name{Local: "ct:Ustrd"}})
	e.EncodeElement(v.Strd, xml.StartElement{Name: xml.Name{Local: "ct:Strd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceInformation16TCH struct {
	Ustrd *Max140Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Ustrd,omitempty"`
	Strd  *StructuredRemittanceInformation16TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Strd,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceInformation16TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Ustrd, xml.StartElement{Name: xml.Name{Local: "ct:Ustrd"}})
	e.EncodeElement(v.Strd, xml.StartElement{Name: xml.Name{Local: "ct:Strd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceLocation7 struct {
	RmtId       *Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RmtId,omitempty"`
	RmtLctnDtls *RemittanceLocationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RmtLctnDtls,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceLocation7) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.RmtId, xml.StartElement{Name: xml.Name{Local: "ct:RmtId"}})
	e.EncodeElement(v.RmtLctnDtls, xml.StartElement{Name: xml.Name{Local: "ct:RmtLctnDtls"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceLocation7TCH struct {
	RmtId       *Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RmtId,omitempty"`
	RmtLctnDtls *RemittanceLocationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RmtLctnDtls,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceLocation7TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.RmtId, xml.StartElement{Name: xml.Name{Local: "ct:RmtId"}})
	e.EncodeElement(v.RmtLctnDtls, xml.StartElement{Name: xml.Name{Local: "ct:RmtLctnDtls"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceLocationData1 struct {
	Mtd        RemittanceLocationMethod2Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Mtd"`
	ElctrncAdr *Max2048Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 ElctrncAdr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceLocationData1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Mtd, xml.StartElement{Name: xml.Name{Local: "ct:Mtd"}})
	e.EncodeElement(v.ElctrncAdr, xml.StartElement{Name: xml.Name{Local: "ct:ElctrncAdr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ServiceLevel8Choice struct {
	Cd *ExternalServiceLevel1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Cd,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ServiceLevel8Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ct:Cd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SettlementInstruction7 struct {
	SttlmMtd SettlementMethod1Code               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 SttlmMtd"`
	ClrSys   ClearingSystemIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 ClrSys"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SettlementInstruction7) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.SttlmMtd, xml.StartElement{Name: xml.Name{Local: "ct:SttlmMtd"}})
	e.EncodeElement(v.ClrSys, xml.StartElement{Name: xml.Name{Local: "ct:ClrSys"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SettlementInstruction7TCH struct {
	SttlmMtd SettlementMethod1Code               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 SttlmMtd"`
	ClrSys   ClearingSystemIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 ClrSys"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SettlementInstruction7TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.SttlmMtd, xml.StartElement{Name: xml.Name{Local: "ct:SttlmMtd"}})
	e.EncodeElement(v.ClrSys, xml.StartElement{Name: xml.Name{Local: "ct:ClrSys"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type StructuredRemittanceInformation16 struct {
	RfrdDocInf []*ReferredDocumentInformation7 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RfrdDocInf,omitempty"`
	RfrdDocAmt *RemittanceAmount2              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RfrdDocAmt,omitempty"`
	Invcr      *PartyIdentification135         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Invcr,omitempty"`
	Invcee     *PartyIdentification135         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Invcee,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v StructuredRemittanceInformation16) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.RfrdDocInf, xml.StartElement{Name: xml.Name{Local: "ct:RfrdDocInf"}})
	e.EncodeElement(v.RfrdDocAmt, xml.StartElement{Name: xml.Name{Local: "ct:RfrdDocAmt"}})
	e.EncodeElement(v.Invcr, xml.StartElement{Name: xml.Name{Local: "ct:Invcr"}})
	e.EncodeElement(v.Invcee, xml.StartElement{Name: xml.Name{Local: "ct:Invcee"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type StructuredRemittanceInformation16TCH struct {
	RfrdDocInf []*ReferredDocumentInformation7TCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RfrdDocInf,omitempty"`
	RfrdDocAmt *RemittanceAmount2TCH              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 RfrdDocAmt,omitempty"`
	Invcr      *PartyIdentification135TCH4        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Invcr,omitempty"`
	Invcee     *PartyIdentification135TCH4        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Invcee,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v StructuredRemittanceInformation16TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.RfrdDocInf, xml.StartElement{Name: xml.Name{Local: "ct:RfrdDocInf"}})
	e.EncodeElement(v.RfrdDocAmt, xml.StartElement{Name: xml.Name{Local: "ct:RfrdDocAmt"}})
	e.EncodeElement(v.Invcr, xml.StartElement{Name: xml.Name{Local: "ct:Invcr"}})
	e.EncodeElement(v.Invcee, xml.StartElement{Name: xml.Name{Local: "ct:Invcee"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GenericOrganisationIdentification1 struct {
	Id      Max35Text                                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id"`
	SchmeNm *OrganisationIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 SchmeNm,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericOrganisationIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "ct:SchmeNm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GenericOrganisationIdentification1TCH3 struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericOrganisationIdentification1TCH3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentification29TCH2 struct {
	Othr []GenericOrganisationIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Othr"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification29TCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ct:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentification29TCH3 struct {
	LEI  *LEIIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 LEI,omitempty"`
	Othr []*GenericOrganisationIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification29TCH3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.LEI, xml.StartElement{Name: xml.Name{Local: "ct:LEI"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ct:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentification29TCH4 struct {
	Othr GenericOrganisationIdentification1TCH3 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Othr"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification29TCH4) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ct:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentificationSchemeName1Choice struct {
	Prtry *Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentificationSchemeName1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ct:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party38ChoiceTCH3 struct {
	OrgId  *OrganisationIdentification29 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 OrgId,omitempty"`
	PrvtId *PersonIdentification13TCH2   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 PrvtId,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38ChoiceTCH3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "ct:OrgId"}})
	e.EncodeElement(v.PrvtId, xml.StartElement{Name: xml.Name{Local: "ct:PrvtId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party38ChoiceTCH4 struct {
	OrgId *OrganisationIdentification29TCH4 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 OrgId,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38ChoiceTCH4) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "ct:OrgId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PersonIdentificationSchemeName1Choice struct {
	Prtry *Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentificationSchemeName1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ct:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PartyIdentification135TCH4 struct {
	Id Party38ChoiceTCH4 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Id"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135TCH4) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ct:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ReferredDocumentType5 struct {
	CdOrPrtry ReferredDocumentType5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CdOrPrtry"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferredDocumentType5) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.CdOrPrtry, xml.StartElement{Name: xml.Name{Local: "ct:CdOrPrtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ReferredDocumentType5TCH struct {
	CdOrPrtry ReferredDocumentType5ChoiceTCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 CdOrPrtry"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferredDocumentType5TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.CdOrPrtry, xml.StartElement{Name: xml.Name{Local: "ct:CdOrPrtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ReferredDocumentType5Choice struct {
	Cd    *DocumentType6Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Cd,omitempty"`
	Prtry *Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferredDocumentType5Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ct:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ct:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ReferredDocumentType5ChoiceTCH struct {
	Cd    *DocumentType6CodeTCH `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Cd,omitempty"`
	Prtry *Max35TextTCH5        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferredDocumentType5ChoiceTCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ct:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ct:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// XSD SimpleType declarations

type ActiveCurrencyAndAmountSimpleType rtp.Amount

func (a ActiveCurrencyAndAmountSimpleType) MarshalText() ([]byte, error) {
	return rtp.Amount(a).MarshalText()
}

type ActiveCurrencyCode string

const ActiveCurrencyCodeUsd ActiveCurrencyCode = "USD"

type ActiveOrHistoricCurrencyAndAmountSimpleType rtp.Amount

func (a ActiveOrHistoricCurrencyAndAmountSimpleType) MarshalText() ([]byte, error) {
	return rtp.Amount(a).MarshalText()
}

type ActiveOrHistoricCurrencyCode string

const ActiveOrHistoricCurrencyCodeUsd ActiveOrHistoricCurrencyCode = "USD"

type CatePurpProp string

const CatePurpPropBusiness CatePurpProp = "BUSINESS"
const CatePurpPropConsumer CatePurpProp = "CONSUMER"

type ChargeBearerType1Code string

const ChargeBearerType1CodeSlev ChargeBearerType1Code = "SLEV"

type CountryCode string

const CountryCodeAd CountryCode = "AD"
const CountryCodeAe CountryCode = "AE"
const CountryCodeAf CountryCode = "AF"
const CountryCodeAg CountryCode = "AG"
const CountryCodeAi CountryCode = "AI"
const CountryCodeAl CountryCode = "AL"
const CountryCodeAm CountryCode = "AM"
const CountryCodeAo CountryCode = "AO"
const CountryCodeAq CountryCode = "AQ"
const CountryCodeAr CountryCode = "AR"
const CountryCodeAs CountryCode = "AS"
const CountryCodeAt CountryCode = "AT"
const CountryCodeAu CountryCode = "AU"
const CountryCodeAw CountryCode = "AW"
const CountryCodeAx CountryCode = "AX"
const CountryCodeAz CountryCode = "AZ"
const CountryCodeBa CountryCode = "BA"
const CountryCodeBb CountryCode = "BB"
const CountryCodeBd CountryCode = "BD"
const CountryCodeBe CountryCode = "BE"
const CountryCodeBf CountryCode = "BF"
const CountryCodeBg CountryCode = "BG"
const CountryCodeBh CountryCode = "BH"
const CountryCodeBi CountryCode = "BI"
const CountryCodeBj CountryCode = "BJ"
const CountryCodeBl CountryCode = "BL"
const CountryCodeBm CountryCode = "BM"
const CountryCodeBn CountryCode = "BN"
const CountryCodeBo CountryCode = "BO"
const CountryCodeBq CountryCode = "BQ"
const CountryCodeBr CountryCode = "BR"
const CountryCodeBs CountryCode = "BS"
const CountryCodeBt CountryCode = "BT"
const CountryCodeBv CountryCode = "BV"
const CountryCodeBw CountryCode = "BW"
const CountryCodeBy CountryCode = "BY"
const CountryCodeBz CountryCode = "BZ"
const CountryCodeCa CountryCode = "CA"
const CountryCodeCc CountryCode = "CC"
const CountryCodeCd CountryCode = "CD"
const CountryCodeCf CountryCode = "CF"
const CountryCodeCg CountryCode = "CG"
const CountryCodeCh CountryCode = "CH"
const CountryCodeCi CountryCode = "CI"
const CountryCodeCk CountryCode = "CK"
const CountryCodeCl CountryCode = "CL"
const CountryCodeCm CountryCode = "CM"
const CountryCodeCn CountryCode = "CN"
const CountryCodeCo CountryCode = "CO"
const CountryCodeCr CountryCode = "CR"
const CountryCodeCu CountryCode = "CU"
const CountryCodeCv CountryCode = "CV"
const CountryCodeCw CountryCode = "CW"
const CountryCodeCx CountryCode = "CX"
const CountryCodeCy CountryCode = "CY"
const CountryCodeCz CountryCode = "CZ"
const CountryCodeDe CountryCode = "DE"
const CountryCodeDj CountryCode = "DJ"
const CountryCodeDk CountryCode = "DK"
const CountryCodeDm CountryCode = "DM"
const CountryCodeDo CountryCode = "DO"
const CountryCodeDz CountryCode = "DZ"
const CountryCodeEc CountryCode = "EC"
const CountryCodeEe CountryCode = "EE"
const CountryCodeEg CountryCode = "EG"
const CountryCodeEh CountryCode = "EH"
const CountryCodeEr CountryCode = "ER"
const CountryCodeEs CountryCode = "ES"
const CountryCodeEt CountryCode = "ET"
const CountryCodeFi CountryCode = "FI"
const CountryCodeFj CountryCode = "FJ"
const CountryCodeFk CountryCode = "FK"
const CountryCodeFm CountryCode = "FM"
const CountryCodeFo CountryCode = "FO"
const CountryCodeFr CountryCode = "FR"
const CountryCodeGa CountryCode = "GA"
const CountryCodeGb CountryCode = "GB"
const CountryCodeGd CountryCode = "GD"
const CountryCodeGe CountryCode = "GE"
const CountryCodeGf CountryCode = "GF"
const CountryCodeGg CountryCode = "GG"
const CountryCodeGh CountryCode = "GH"
const CountryCodeGi CountryCode = "GI"
const CountryCodeGl CountryCode = "GL"
const CountryCodeGm CountryCode = "GM"
const CountryCodeGn CountryCode = "GN"
const CountryCodeGp CountryCode = "GP"
const CountryCodeGq CountryCode = "GQ"
const CountryCodeGr CountryCode = "GR"
const CountryCodeGs CountryCode = "GS"
const CountryCodeGt CountryCode = "GT"
const CountryCodeGu CountryCode = "GU"
const CountryCodeGw CountryCode = "GW"
const CountryCodeGy CountryCode = "GY"
const CountryCodeHk CountryCode = "HK"
const CountryCodeHm CountryCode = "HM"
const CountryCodeHn CountryCode = "HN"
const CountryCodeHr CountryCode = "HR"
const CountryCodeHt CountryCode = "HT"
const CountryCodeHu CountryCode = "HU"
const CountryCodeId CountryCode = "ID"
const CountryCodeIe CountryCode = "IE"
const CountryCodeIl CountryCode = "IL"
const CountryCodeIm CountryCode = "IM"
const CountryCodeIn CountryCode = "IN"
const CountryCodeIo CountryCode = "IO"
const CountryCodeIq CountryCode = "IQ"
const CountryCodeIr CountryCode = "IR"
const CountryCodeIs CountryCode = "IS"
const CountryCodeIt CountryCode = "IT"
const CountryCodeJe CountryCode = "JE"
const CountryCodeJm CountryCode = "JM"
const CountryCodeJo CountryCode = "JO"
const CountryCodeJp CountryCode = "JP"
const CountryCodeKe CountryCode = "KE"
const CountryCodeKg CountryCode = "KG"
const CountryCodeKh CountryCode = "KH"
const CountryCodeKi CountryCode = "KI"
const CountryCodeKm CountryCode = "KM"
const CountryCodeKn CountryCode = "KN"
const CountryCodeKp CountryCode = "KP"
const CountryCodeKr CountryCode = "KR"
const CountryCodeKw CountryCode = "KW"
const CountryCodeKy CountryCode = "KY"
const CountryCodeKz CountryCode = "KZ"
const CountryCodeLa CountryCode = "LA"
const CountryCodeLb CountryCode = "LB"
const CountryCodeLc CountryCode = "LC"
const CountryCodeLi CountryCode = "LI"
const CountryCodeLk CountryCode = "LK"
const CountryCodeLr CountryCode = "LR"
const CountryCodeLs CountryCode = "LS"
const CountryCodeLt CountryCode = "LT"
const CountryCodeLu CountryCode = "LU"
const CountryCodeLv CountryCode = "LV"
const CountryCodeLy CountryCode = "LY"
const CountryCodeMa CountryCode = "MA"
const CountryCodeMc CountryCode = "MC"
const CountryCodeMd CountryCode = "MD"
const CountryCodeMe CountryCode = "ME"
const CountryCodeMf CountryCode = "MF"
const CountryCodeMg CountryCode = "MG"
const CountryCodeMh CountryCode = "MH"
const CountryCodeMk CountryCode = "MK"
const CountryCodeMl CountryCode = "ML"
const CountryCodeMm CountryCode = "MM"
const CountryCodeMn CountryCode = "MN"
const CountryCodeMo CountryCode = "MO"
const CountryCodeMp CountryCode = "MP"
const CountryCodeMq CountryCode = "MQ"
const CountryCodeMr CountryCode = "MR"
const CountryCodeMs CountryCode = "MS"
const CountryCodeMt CountryCode = "MT"
const CountryCodeMu CountryCode = "MU"
const CountryCodeMv CountryCode = "MV"
const CountryCodeMw CountryCode = "MW"
const CountryCodeMx CountryCode = "MX"
const CountryCodeMy CountryCode = "MY"
const CountryCodeMz CountryCode = "MZ"
const CountryCodeNa CountryCode = "NA"
const CountryCodeNc CountryCode = "NC"
const CountryCodeNe CountryCode = "NE"
const CountryCodeNf CountryCode = "NF"
const CountryCodeNg CountryCode = "NG"
const CountryCodeNi CountryCode = "NI"
const CountryCodeNl CountryCode = "NL"
const CountryCodeNo CountryCode = "NO"
const CountryCodeNp CountryCode = "NP"
const CountryCodeNr CountryCode = "NR"
const CountryCodeNu CountryCode = "NU"
const CountryCodeNz CountryCode = "NZ"
const CountryCodeOm CountryCode = "OM"
const CountryCodePa CountryCode = "PA"
const CountryCodePe CountryCode = "PE"
const CountryCodePf CountryCode = "PF"
const CountryCodePg CountryCode = "PG"
const CountryCodePh CountryCode = "PH"
const CountryCodePk CountryCode = "PK"
const CountryCodePl CountryCode = "PL"
const CountryCodePm CountryCode = "PM"
const CountryCodePn CountryCode = "PN"
const CountryCodePr CountryCode = "PR"
const CountryCodePs CountryCode = "PS"
const CountryCodePt CountryCode = "PT"
const CountryCodePw CountryCode = "PW"
const CountryCodePy CountryCode = "PY"
const CountryCodeQa CountryCode = "QA"
const CountryCodeRe CountryCode = "RE"
const CountryCodeRo CountryCode = "RO"
const CountryCodeRs CountryCode = "RS"
const CountryCodeRu CountryCode = "RU"
const CountryCodeRw CountryCode = "RW"
const CountryCodeSa CountryCode = "SA"
const CountryCodeSb CountryCode = "SB"
const CountryCodeSc CountryCode = "SC"
const CountryCodeSd CountryCode = "SD"
const CountryCodeSe CountryCode = "SE"
const CountryCodeSg CountryCode = "SG"
const CountryCodeSh CountryCode = "SH"
const CountryCodeSi CountryCode = "SI"
const CountryCodeSj CountryCode = "SJ"
const CountryCodeSk CountryCode = "SK"
const CountryCodeSl CountryCode = "SL"
const CountryCodeSm CountryCode = "SM"
const CountryCodeSn CountryCode = "SN"
const CountryCodeSo CountryCode = "SO"
const CountryCodeSr CountryCode = "SR"
const CountryCodeSs CountryCode = "SS"
const CountryCodeSt CountryCode = "ST"
const CountryCodeSv CountryCode = "SV"
const CountryCodeSx CountryCode = "SX"
const CountryCodeSy CountryCode = "SY"
const CountryCodeSz CountryCode = "SZ"
const CountryCodeTc CountryCode = "TC"
const CountryCodeTd CountryCode = "TD"
const CountryCodeTf CountryCode = "TF"
const CountryCodeTg CountryCode = "TG"
const CountryCodeTh CountryCode = "TH"
const CountryCodeTj CountryCode = "TJ"
const CountryCodeTk CountryCode = "TK"
const CountryCodeTl CountryCode = "TL"
const CountryCodeTm CountryCode = "TM"
const CountryCodeTn CountryCode = "TN"
const CountryCodeTo CountryCode = "TO"
const CountryCodeTr CountryCode = "TR"
const CountryCodeTt CountryCode = "TT"
const CountryCodeTv CountryCode = "TV"
const CountryCodeTw CountryCode = "TW"
const CountryCodeTz CountryCode = "TZ"
const CountryCodeUa CountryCode = "UA"
const CountryCodeUg CountryCode = "UG"
const CountryCodeUm CountryCode = "UM"
const CountryCodeUs CountryCode = "US"
const CountryCodeUy CountryCode = "UY"
const CountryCodeUz CountryCode = "UZ"
const CountryCodeVa CountryCode = "VA"
const CountryCodeVc CountryCode = "VC"
const CountryCodeVe CountryCode = "VE"
const CountryCodeVg CountryCode = "VG"
const CountryCodeVi CountryCode = "VI"
const CountryCodeVn CountryCode = "VN"
const CountryCodeVu CountryCode = "VU"
const CountryCodeWf CountryCode = "WF"
const CountryCodeWs CountryCode = "WS"
const CountryCodeYe CountryCode = "YE"
const CountryCodeYt CountryCode = "YT"
const CountryCodeZa CountryCode = "ZA"
const CountryCodeZm CountryCode = "ZM"
const CountryCodeZw CountryCode = "ZW"

type ExternalCashClearingSystem1Code string

const ExternalCashClearingSystem1CodeTch ExternalCashClearingSystem1Code = "TCH"

type ExternalServiceLevel1Code string

const ExternalServiceLevel1CodeSdva ExternalServiceLevel1Code = "SDVA"

type Instruction3CodeTCH string

const Instruction3CodeTCHPrtk Instruction3CodeTCH = "PRTK"
const Instruction3CodeTCHTkcm Instruction3CodeTCH = "TKCM"
const Instruction3CodeTCHTksg Instruction3CodeTCH = "TKSG"
const Instruction3CodeTCHTksp Instruction3CodeTCH = "TKSP"
const Instruction3CodeTCHTkve Instruction3CodeTCH = "TKVE"
const Instruction3CodeTCHTkxp Instruction3CodeTCH = "TKXP"
const Instruction3CodeTCHTokn Instruction3CodeTCH = "TOKN"
const Instruction3CodeTCHVltk Instruction3CodeTCH = "VLTK"

type LEIIdentifier string

type LocalProp string

const LocalPropForeignAffiliate LocalProp = "FOREIGN AFFILIATE"
const LocalPropIntermediary LocalProp = "INTERMEDIARY"
const LocalPropIxb LocalProp = "IXB"
const LocalPropStandard LocalProp = "STANDARD"
const LocalPropZelle LocalProp = "ZELLE"

type Max140Text string

type Max140TextTCH string

type Max16Text string

type Max1NumericText string

type Max2048Text string

type Max2048TextTCH string

type Max34Text string

type Max35Text string

type Max35TextTCH string

type Max35TextTCH2 string

type Max35TextTCH3 string

type Max35TextTCH4 string

const Max35TextTCH4Dsct Max35TextTCH4 = "DSCT"
const Max35TextTCH4Full Max35TextTCH4 = "FULL"
const Max35TextTCH4Orig Max35TextTCH4 = "ORIG"

type Max70Text string

type RemittanceLocationMethod2Code string

const RemittanceLocationMethod2CodeEmal RemittanceLocationMethod2Code = "EMAL"
const RemittanceLocationMethod2CodeUrid RemittanceLocationMethod2Code = "URID"

type SettlementMethod1Code string

const SettlementMethod1CodeClrg SettlementMethod1Code = "CLRG"

type DocumentType6Code string

const DocumentType6CodeCinv DocumentType6Code = "CINV"

type DocumentType6CodeTCH string

const DocumentType6CodeTCHCinv DocumentType6CodeTCH = "CINV"

type Max35TextTCH5 string

const Max35TextTCH5Cscm Max35TextTCH5 = "CSCM"
const Max35TextTCH5Rtrn Max35TextTCH5 = "RTRN"

type UUIDv4Identifier string
