// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:pacs.009.001.08
package pacs_009_001_08

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v AccountIdentification4Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Othr != nil {
		rtp.AddError(&errs, v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}

	rtp.AddError(&errs, v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount38) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Cd != nil {
		rtp.AddError(&errs, v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditTransferTransaction36) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.PmtId.Validate())
	rtp.AddError(&errs, v.PmtTpInf.Validate())
	rtp.AddError(&errs, v.IntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, v.InstgAgt.Validate())
	rtp.AddError(&errs, v.InstdAgt.Validate())
	rtp.AddError(&errs, v.Dbtr.Validate())
	if v.DbtrAcct != nil {
		rtp.AddError(&errs, v.DbtrAcct.Validate())
	}
	rtp.AddError(&errs, v.Cdtr.Validate())
	rtp.AddError(&errs, v.CdtrAcct.Validate())
	if v.RmtInf != nil {
		rtp.AddError(&errs, v.RmtInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditTransferTransaction36TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.PmtId.Validate())
	rtp.AddError(&errs, v.PmtTpInf.Validate())
	rtp.AddError(&errs, v.IntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, v.InstgAgt.Validate())
	rtp.AddError(&errs, v.InstdAgt.Validate())
	rtp.AddError(&errs, v.Dbtr.Validate())
	if v.DbtrAcct != nil {
		rtp.AddError(&errs, v.DbtrAcct.Validate())
	}
	rtp.AddError(&errs, v.Cdtr.Validate())
	rtp.AddError(&errs, v.CdtrAcct.Validate())
	if v.RmtInf != nil {
		rtp.AddError(&errs, v.RmtInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FICdtTrf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionCreditTransferV08) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.GrpHdr.Validate())
	rtp.AddError(&errs, v.CdtTrfTxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionCreditTransferV08TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.GrpHdr.Validate())
	rtp.AddError(&errs, v.CdtTrfTxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader93) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	rtp.AddError(&errs, v.NbOfTxs.Validate())
	rtp.AddError(&errs, v.TtlIntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, v.IntrBkSttlmDt.Validate())
	rtp.AddError(&errs, v.SttlmInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader93TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	rtp.AddError(&errs, v.NbOfTxs.Validate())
	rtp.AddError(&errs, v.TtlIntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, v.IntrBkSttlmDt.Validate())
	rtp.AddError(&errs, v.SttlmInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentIdentification7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.InstrId.Validate())
	rtp.AddError(&errs, v.EndToEndId.Validate())
	rtp.AddError(&errs, v.TxId.Validate())
	if v.ClrSysRef != nil {
		rtp.AddError(&errs, v.ClrSysRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentIdentification7TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.InstrId.Validate())
	rtp.AddError(&errs, v.EndToEndId.Validate())
	rtp.AddError(&errs, v.TxId.Validate())
	if v.ClrSysRef != nil {
		rtp.AddError(&errs, v.ClrSysRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTypeInformation28) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.SvcLvl.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTypeInformation28TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.SvcLvl.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Ustrd != nil {
		rtp.AddError(&errs, v.Ustrd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceInformation2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Ustrd != nil {
		rtp.AddError(&errs, v.Ustrd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ServiceLevel8Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Cd != nil {
		rtp.AddError(&errs, v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementInstruction7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.SttlmMtd.Validate())
	rtp.AddError(&errs, v.ClrSys.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementInstruction7TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.SttlmMtd.Validate())
	rtp.AddError(&errs, v.ClrSys.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveCurrencyCode) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[A-Z]{3,3}`))
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "USD"))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ExternalCashClearingSystem1Code) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "TCH"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 3))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ExternalServiceLevel1Code) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "SDVA"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 4))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max140Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 140))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max1NumericText) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[1]{1,1}`))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max34Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 34))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `M[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 9))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 9))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementMethod1Code) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "CLRG"))
	if errs.Empty() {
		return nil
	}
	return errs
}
