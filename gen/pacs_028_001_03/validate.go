// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:pacs.028.001.03
package pacs_028_001_03

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}

	rtp.AddError(&errs, v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FIToFIPmtStsReq.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FIToFIPaymentStatusRequestV03) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.GrpHdr.Validate())
	rtp.AddError(&errs, v.OrgnlGrpInf.Validate())
	rtp.AddError(&errs, v.TxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FIToFIPaymentStatusRequestV03TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.GrpHdr.Validate())
	rtp.AddError(&errs, v.OrgnlGrpInf.Validate())
	rtp.AddError(&errs, v.TxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader91) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader91TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupInformation27) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, v.OrgnlMsgNmId.Validate())
	rtp.AddError(&errs, v.OrgnlCreDtTm.Validate())
	rtp.AddError(&errs, v.OrgnlNbOfTxs.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupInformation27TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, v.OrgnlMsgNmId.Validate())
	rtp.AddError(&errs, v.OrgnlCreDtTm.Validate())
	rtp.AddError(&errs, v.OrgnlNbOfTxs.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalTransactionReference28) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.IntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, v.IntrBkSttlmDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalTransactionReference28TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.IntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, v.IntrBkSttlmDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransaction113) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlInstrId.Validate())
	rtp.AddError(&errs, v.OrgnlTxId.Validate())
	rtp.AddError(&errs, v.AccptncDtTm.Validate())
	rtp.AddError(&errs, v.InstgAgt.Validate())
	rtp.AddError(&errs, v.InstdAgt.Validate())
	rtp.AddError(&errs, v.OrgnlTxRef.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransaction113TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlInstrId.Validate())
	rtp.AddError(&errs, v.OrgnlTxId.Validate())
	rtp.AddError(&errs, v.AccptncDtTm.Validate())
	rtp.AddError(&errs, v.InstgAgt.Validate())
	rtp.AddError(&errs, v.InstdAgt.Validate())
	rtp.AddError(&errs, v.OrgnlTxRef.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[A-Z]{3,3}`))
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "USD"))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max1NumericText) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[1]{1,1}`))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `M[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 9))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 9))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrigMsgName) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "pacs.008.001.06", "pacs.008.001.08", "pacs.009.001.08", "pain.013.001.07"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}
