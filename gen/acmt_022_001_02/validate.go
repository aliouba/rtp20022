// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:acmt.022.001.02
package acmt_022_001_02

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v AccountIdentification4Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Othr != nil {
		rtp.AddError(&errs, v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.IdModAdvc.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification8) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification8TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v IdentificationAssignment2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	rtp.AddError(&errs, v.Assgnr.Validate())
	rtp.AddError(&errs, v.Assgne.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v IdentificationAssignment2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	rtp.AddError(&errs, v.Assgnr.Validate())
	rtp.AddError(&errs, v.Assgne.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v IdentificationInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Acct.Validate())
	rtp.AddError(&errs, v.Agt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v IdentificationInformation2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Acct.Validate())
	rtp.AddError(&errs, v.Agt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v IdentificationModification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	if v.OrgnlPtyAndAcctId != nil {
		rtp.AddError(&errs, v.OrgnlPtyAndAcctId.Validate())
	}
	rtp.AddError(&errs, v.UpdtdPtyAndAcctId.Validate())
	if v.AddtlInf != nil {
		rtp.AddError(&errs, v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v IdentificationModification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	if v.OrgnlPtyAndAcctId != nil {
		rtp.AddError(&errs, v.OrgnlPtyAndAcctId.Validate())
	}
	rtp.AddError(&errs, v.UpdtdPtyAndAcctId.Validate())
	if v.AddtlInf != nil {
		rtp.AddError(&errs, v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v IdentificationModificationAdviceV02) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Assgnmt.Validate())
	rtp.AddError(&errs, v.OrgnlTxRef.Validate())
	rtp.AddError(&errs, v.Mod.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v IdentificationModificationAdviceV02TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Assgnmt.Validate())
	rtp.AddError(&errs, v.OrgnlTxRef.Validate())
	rtp.AddError(&errs, v.Mod.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalTransactionReference18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.MsgNmId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	rtp.AddError(&errs, v.OrgnlTx.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalTransactionReference18TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.MsgNmId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	rtp.AddError(&errs, v.OrgnlTx.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party12Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Agt != nil {
		rtp.AddError(&errs, v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party12ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Agt != nil {
		rtp.AddError(&errs, v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentIdentification4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.InstrId.Validate())
	rtp.AddError(&errs, v.EndToEndId.Validate())
	rtp.AddError(&errs, v.TxId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentIdentification4TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.InstrId.Validate())
	rtp.AddError(&errs, v.EndToEndId.Validate())
	rtp.AddError(&errs, v.TxId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Max140Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 140))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max34Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 34))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 9))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 9))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrigMsgName) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "pacs.008.001.08", "pain.013.001.07"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}
