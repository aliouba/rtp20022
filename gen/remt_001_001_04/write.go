// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Models for urn:iso:std:iso:20022:tech:xsd:remt.001.001.04 with prefix 'ar'
package remt_001_001_04

import (
	"encoding/xml"

	"github.com/moov-io/rtp20022/pkg/rtp"
)

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v AccountIdentification4Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ar:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v AmountType3Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.InstdAmt, xml.StartElement{Name: xml.Name{Local: "ar:InstdAmt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v BranchAndFinancialInstitutionIdentification6) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.FinInstnId, xml.StartElement{Name: xml.Name{Local: "ar:FinInstnId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v BranchAndFinancialInstitutionIdentification6TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.FinInstnId, xml.StartElement{Name: xml.Name{Local: "ar:FinInstnId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CashAccount38) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ar:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ClearingSystemMemberIdentification2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.MmbId, xml.StartElement{Name: xml.Name{Local: "ar:MmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ClearingSystemMemberIdentification2TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.MmbId, xml.StartElement{Name: xml.Name{Local: "ar:MmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Contact4) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.NmPrfx, xml.StartElement{Name: xml.Name{Local: "ar:NmPrfx"}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ar:Nm"}})
	e.EncodeElement(v.PhneNb, xml.StartElement{Name: xml.Name{Local: "ar:PhneNb"}})
	e.EncodeElement(v.MobNb, xml.StartElement{Name: xml.Name{Local: "ar:MobNb"}})
	e.EncodeElement(v.FaxNb, xml.StartElement{Name: xml.Name{Local: "ar:FaxNb"}})
	e.EncodeElement(v.EmailAdr, xml.StartElement{Name: xml.Name{Local: "ar:EmailAdr"}})
	e.EncodeElement(v.EmailPurp, xml.StartElement{Name: xml.Name{Local: "ar:EmailPurp"}})
	e.EncodeElement(v.JobTitl, xml.StartElement{Name: xml.Name{Local: "ar:JobTitl"}})
	e.EncodeElement(v.Rspnsblty, xml.StartElement{Name: xml.Name{Local: "ar:Rspnsblty"}})
	e.EncodeElement(v.Dept, xml.StartElement{Name: xml.Name{Local: "ar:Dept"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ar:Othr"}})
	e.EncodeElement(v.PrefrdMtd, xml.StartElement{Name: xml.Name{Local: "ar:PrefrdMtd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CreditorReferenceInformation2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ar:Tp"}})
	e.EncodeElement(v.Ref, xml.StartElement{Name: xml.Name{Local: "ar:Ref"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CreditorReferenceType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ar:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ar:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CreditorReferenceType2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.CdOrPrtry, xml.StartElement{Name: xml.Name{Local: "ar:CdOrPrtry"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ar:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DateAndDateTime2Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Dt, xml.StartElement{Name: xml.Name{Local: "ar:Dt"}})
	e.EncodeElement(v.DtTm, xml.StartElement{Name: xml.Name{Local: "ar:DtTm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DateAndPlaceOfBirth1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.BirthDt, xml.StartElement{Name: xml.Name{Local: "ar:BirthDt"}})
	e.EncodeElement(v.CityOfBirth, xml.StartElement{Name: xml.Name{Local: "ar:CityOfBirth"}})
	e.EncodeElement(v.CtryOfBirth, xml.StartElement{Name: xml.Name{Local: "ar:CtryOfBirth"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DatePeriod2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.FrDt, xml.StartElement{Name: xml.Name{Local: "ar:FrDt"}})
	e.EncodeElement(v.ToDt, xml.StartElement{Name: xml.Name{Local: "ar:ToDt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DiscountAmountAndType1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ar:Tp"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ar:Amt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DiscountAmountType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ar:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ar:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentAdjustment1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ar:Amt"}})
	e.EncodeElement(v.CdtDbtInd, xml.StartElement{Name: xml.Name{Local: "ar:CdtDbtInd"}})
	e.EncodeElement(v.Rsn, xml.StartElement{Name: xml.Name{Local: "ar:Rsn"}})
	e.EncodeElement(v.AddtlInf, xml.StartElement{Name: xml.Name{Local: "ar:AddtlInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentLineIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ar:Tp"}})
	e.EncodeElement(v.Nb, xml.StartElement{Name: xml.Name{Local: "ar:Nb"}})
	e.EncodeElement(v.RltdDt, xml.StartElement{Name: xml.Name{Local: "ar:RltdDt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentLineInformation1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ar:Id"}})
	e.EncodeElement(v.Desc, xml.StartElement{Name: xml.Name{Local: "ar:Desc"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ar:Amt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentLineType1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.CdOrPrtry, xml.StartElement{Name: xml.Name{Local: "ar:CdOrPrtry"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ar:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentLineType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ar:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ar:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentTCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.RmtAdvc, xml.StartElement{Name: xml.Name{Local: "ar:RmtAdvc"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FinancialInstitutionIdentification18) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.ClrSysMmbId, xml.StartElement{Name: xml.Name{Local: "ar:ClrSysMmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FinancialInstitutionIdentification18TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.ClrSysMmbId, xml.StartElement{Name: xml.Name{Local: "ar:ClrSysMmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Garnishment3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ar:Tp"}})
	e.EncodeElement(v.Grnshee, xml.StartElement{Name: xml.Name{Local: "ar:Grnshee"}})
	e.EncodeElement(v.GrnshmtAdmstr, xml.StartElement{Name: xml.Name{Local: "ar:GrnshmtAdmstr"}})
	e.EncodeElement(v.RefNb, xml.StartElement{Name: xml.Name{Local: "ar:RefNb"}})
	e.EncodeElement(v.Dt, xml.StartElement{Name: xml.Name{Local: "ar:Dt"}})
	e.EncodeElement(v.RmtdAmt, xml.StartElement{Name: xml.Name{Local: "ar:RmtdAmt"}})
	e.EncodeElement(v.FmlyMdclInsrncInd, xml.StartElement{Name: xml.Name{Local: "ar:FmlyMdclInsrncInd"}})
	e.EncodeElement(v.MplyeeTermntnInd, xml.StartElement{Name: xml.Name{Local: "ar:MplyeeTermntnInd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Garnishment3TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ar:Tp"}})
	e.EncodeElement(v.Grnshee, xml.StartElement{Name: xml.Name{Local: "ar:Grnshee"}})
	e.EncodeElement(v.GrnshmtAdmstr, xml.StartElement{Name: xml.Name{Local: "ar:GrnshmtAdmstr"}})
	e.EncodeElement(v.RefNb, xml.StartElement{Name: xml.Name{Local: "ar:RefNb"}})
	e.EncodeElement(v.Dt, xml.StartElement{Name: xml.Name{Local: "ar:Dt"}})
	e.EncodeElement(v.RmtdAmt, xml.StartElement{Name: xml.Name{Local: "ar:RmtdAmt"}})
	e.EncodeElement(v.FmlyMdclInsrncInd, xml.StartElement{Name: xml.Name{Local: "ar:FmlyMdclInsrncInd"}})
	e.EncodeElement(v.MplyeeTermntnInd, xml.StartElement{Name: xml.Name{Local: "ar:MplyeeTermntnInd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GarnishmentType1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.CdOrPrtry, xml.StartElement{Name: xml.Name{Local: "ar:CdOrPrtry"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ar:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GarnishmentType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ar:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ar:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericAccountIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ar:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericOrganisationIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ar:Id"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "ar:SchmeNm"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ar:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericOrganisationIdentification1TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ar:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericOrganisationIdentification1TCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ar:Id"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "ar:SchmeNm"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ar:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericPersonIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ar:Id"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "ar:SchmeNm"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ar:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GroupHeader79) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.MsgId, xml.StartElement{Name: xml.Name{Local: "ar:MsgId"}})
	e.EncodeElement(v.CreDtTm, xml.StartElement{Name: xml.Name{Local: "ar:CreDtTm"}})
	e.EncodeElement(v.InitgPty, xml.StartElement{Name: xml.Name{Local: "ar:InitgPty"}})
	e.EncodeElement(v.MsgRcpt, xml.StartElement{Name: xml.Name{Local: "ar:MsgRcpt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GroupHeader79TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.MsgId, xml.StartElement{Name: xml.Name{Local: "ar:MsgId"}})
	e.EncodeElement(v.CreDtTm, xml.StartElement{Name: xml.Name{Local: "ar:CreDtTm"}})
	e.EncodeElement(v.InitgPty, xml.StartElement{Name: xml.Name{Local: "ar:InitgPty"}})
	e.EncodeElement(v.MsgRcpt, xml.StartElement{Name: xml.Name{Local: "ar:MsgRcpt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification29) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.AnyBIC, xml.StartElement{Name: xml.Name{Local: "ar:AnyBIC"}})
	e.EncodeElement(v.LEI, xml.StartElement{Name: xml.Name{Local: "ar:LEI"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ar:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification29TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ar:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification29TCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.AnyBIC, xml.StartElement{Name: xml.Name{Local: "ar:AnyBIC"}})
	e.EncodeElement(v.LEI, xml.StartElement{Name: xml.Name{Local: "ar:LEI"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ar:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentificationSchemeName1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ar:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ar:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OriginalPaymentInformation8) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Refs, xml.StartElement{Name: xml.Name{Local: "ar:Refs"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ar:Amt"}})
	e.EncodeElement(v.ReqdExctnDt, xml.StartElement{Name: xml.Name{Local: "ar:ReqdExctnDt"}})
	e.EncodeElement(v.Dbtr, xml.StartElement{Name: xml.Name{Local: "ar:Dbtr"}})
	e.EncodeElement(v.DbtrAcct, xml.StartElement{Name: xml.Name{Local: "ar:DbtrAcct"}})
	e.EncodeElement(v.DbtrAgt, xml.StartElement{Name: xml.Name{Local: "ar:DbtrAgt"}})
	e.EncodeElement(v.Cdtr, xml.StartElement{Name: xml.Name{Local: "ar:Cdtr"}})
	e.EncodeElement(v.CdtrAcct, xml.StartElement{Name: xml.Name{Local: "ar:CdtrAcct"}})
	e.EncodeElement(v.CdtrAgt, xml.StartElement{Name: xml.Name{Local: "ar:CdtrAgt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OriginalPaymentInformation8TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Refs, xml.StartElement{Name: xml.Name{Local: "ar:Refs"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ar:Amt"}})
	e.EncodeElement(v.ReqdExctnDt, xml.StartElement{Name: xml.Name{Local: "ar:ReqdExctnDt"}})
	e.EncodeElement(v.Dbtr, xml.StartElement{Name: xml.Name{Local: "ar:Dbtr"}})
	e.EncodeElement(v.DbtrAcct, xml.StartElement{Name: xml.Name{Local: "ar:DbtrAcct"}})
	e.EncodeElement(v.DbtrAgt, xml.StartElement{Name: xml.Name{Local: "ar:DbtrAgt"}})
	e.EncodeElement(v.Cdtr, xml.StartElement{Name: xml.Name{Local: "ar:Cdtr"}})
	e.EncodeElement(v.CdtrAcct, xml.StartElement{Name: xml.Name{Local: "ar:CdtrAcct"}})
	e.EncodeElement(v.CdtrAgt, xml.StartElement{Name: xml.Name{Local: "ar:CdtrAgt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OtherContact1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.ChanlTp, xml.StartElement{Name: xml.Name{Local: "ar:ChanlTp"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ar:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "ar:OrgId"}})
	e.EncodeElement(v.PrvtId, xml.StartElement{Name: xml.Name{Local: "ar:PrvtId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38ChoiceTCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "ar:OrgId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38ChoiceTCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "ar:OrgId"}})
	e.EncodeElement(v.PrvtId, xml.StartElement{Name: xml.Name{Local: "ar:PrvtId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ar:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "ar:PstlAdr"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ar:Id"}})
	e.EncodeElement(v.CtryOfRes, xml.StartElement{Name: xml.Name{Local: "ar:CtryOfRes"}})
	e.EncodeElement(v.CtctDtls, xml.StartElement{Name: xml.Name{Local: "ar:CtctDtls"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ar:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135TCH2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ar:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "ar:PstlAdr"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ar:Id"}})
	e.EncodeElement(v.CtryOfRes, xml.StartElement{Name: xml.Name{Local: "ar:CtryOfRes"}})
	e.EncodeElement(v.CtctDtls, xml.StartElement{Name: xml.Name{Local: "ar:CtctDtls"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135TCH3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ar:Nm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentification13) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DtAndPlcOfBirth, xml.StartElement{Name: xml.Name{Local: "ar:DtAndPlcOfBirth"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ar:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentificationSchemeName1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ar:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ar:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PostalAddress24) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.StrtNm, xml.StartElement{Name: xml.Name{Local: "ar:StrtNm"}})
	e.EncodeElement(v.BldgNb, xml.StartElement{Name: xml.Name{Local: "ar:BldgNb"}})
	e.EncodeElement(v.PstCd, xml.StartElement{Name: xml.Name{Local: "ar:PstCd"}})
	e.EncodeElement(v.TwnNm, xml.StartElement{Name: xml.Name{Local: "ar:TwnNm"}})
	e.EncodeElement(v.CtrySubDvsn, xml.StartElement{Name: xml.Name{Local: "ar:CtrySubDvsn"}})
	e.EncodeElement(v.Ctry, xml.StartElement{Name: xml.Name{Local: "ar:Ctry"}})
	e.EncodeElement(v.AdrLine, xml.StartElement{Name: xml.Name{Local: "ar:AdrLine"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferredDocumentInformation7) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ar:Tp"}})
	e.EncodeElement(v.Nb, xml.StartElement{Name: xml.Name{Local: "ar:Nb"}})
	e.EncodeElement(v.RltdDt, xml.StartElement{Name: xml.Name{Local: "ar:RltdDt"}})
	e.EncodeElement(v.LineDtls, xml.StartElement{Name: xml.Name{Local: "ar:LineDtls"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferredDocumentType3Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ar:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ar:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferredDocumentType4) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.CdOrPrtry, xml.StartElement{Name: xml.Name{Local: "ar:CdOrPrtry"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ar:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceAdviceV04) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.GrpHdr, xml.StartElement{Name: xml.Name{Local: "ar:GrpHdr"}})
	e.EncodeElement(v.RmtInf, xml.StartElement{Name: xml.Name{Local: "ar:RmtInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceAdviceV04TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.GrpHdr, xml.StartElement{Name: xml.Name{Local: "ar:GrpHdr"}})
	e.EncodeElement(v.RmtInf, xml.StartElement{Name: xml.Name{Local: "ar:RmtInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceAmount2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DuePyblAmt, xml.StartElement{Name: xml.Name{Local: "ar:DuePyblAmt"}})
	e.EncodeElement(v.DscntApldAmt, xml.StartElement{Name: xml.Name{Local: "ar:DscntApldAmt"}})
	e.EncodeElement(v.CdtNoteAmt, xml.StartElement{Name: xml.Name{Local: "ar:CdtNoteAmt"}})
	e.EncodeElement(v.TaxAmt, xml.StartElement{Name: xml.Name{Local: "ar:TaxAmt"}})
	e.EncodeElement(v.AdjstmntAmtAndRsn, xml.StartElement{Name: xml.Name{Local: "ar:AdjstmntAmtAndRsn"}})
	e.EncodeElement(v.RmtdAmt, xml.StartElement{Name: xml.Name{Local: "ar:RmtdAmt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceAmount3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DuePyblAmt, xml.StartElement{Name: xml.Name{Local: "ar:DuePyblAmt"}})
	e.EncodeElement(v.DscntApldAmt, xml.StartElement{Name: xml.Name{Local: "ar:DscntApldAmt"}})
	e.EncodeElement(v.CdtNoteAmt, xml.StartElement{Name: xml.Name{Local: "ar:CdtNoteAmt"}})
	e.EncodeElement(v.TaxAmt, xml.StartElement{Name: xml.Name{Local: "ar:TaxAmt"}})
	e.EncodeElement(v.AdjstmntAmtAndRsn, xml.StartElement{Name: xml.Name{Local: "ar:AdjstmntAmtAndRsn"}})
	e.EncodeElement(v.RmtdAmt, xml.StartElement{Name: xml.Name{Local: "ar:RmtdAmt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceInformation19) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.RmtId, xml.StartElement{Name: xml.Name{Local: "ar:RmtId"}})
	e.EncodeElement(v.Ustrd, xml.StartElement{Name: xml.Name{Local: "ar:Ustrd"}})
	e.EncodeElement(v.Strd, xml.StartElement{Name: xml.Name{Local: "ar:Strd"}})
	e.EncodeElement(v.OrgnlPmtInf, xml.StartElement{Name: xml.Name{Local: "ar:OrgnlPmtInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceInformation19TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.RmtId, xml.StartElement{Name: xml.Name{Local: "ar:RmtId"}})
	e.EncodeElement(v.Ustrd, xml.StartElement{Name: xml.Name{Local: "ar:Ustrd"}})
	e.EncodeElement(v.Strd, xml.StartElement{Name: xml.Name{Local: "ar:Strd"}})
	e.EncodeElement(v.OrgnlPmtInf, xml.StartElement{Name: xml.Name{Local: "ar:OrgnlPmtInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v StructuredRemittanceInformation16) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.RfrdDocInf, xml.StartElement{Name: xml.Name{Local: "ar:RfrdDocInf"}})
	e.EncodeElement(v.RfrdDocAmt, xml.StartElement{Name: xml.Name{Local: "ar:RfrdDocAmt"}})
	e.EncodeElement(v.CdtrRefInf, xml.StartElement{Name: xml.Name{Local: "ar:CdtrRefInf"}})
	e.EncodeElement(v.Invcr, xml.StartElement{Name: xml.Name{Local: "ar:Invcr"}})
	e.EncodeElement(v.Invcee, xml.StartElement{Name: xml.Name{Local: "ar:Invcee"}})
	e.EncodeElement(v.TaxRmt, xml.StartElement{Name: xml.Name{Local: "ar:TaxRmt"}})
	e.EncodeElement(v.GrnshmtRmt, xml.StartElement{Name: xml.Name{Local: "ar:GrnshmtRmt"}})
	e.EncodeElement(v.AddtlRmtInf, xml.StartElement{Name: xml.Name{Local: "ar:AddtlRmtInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v StructuredRemittanceInformation16TCH) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.RfrdDocInf, xml.StartElement{Name: xml.Name{Local: "ar:RfrdDocInf"}})
	e.EncodeElement(v.RfrdDocAmt, xml.StartElement{Name: xml.Name{Local: "ar:RfrdDocAmt"}})
	e.EncodeElement(v.CdtrRefInf, xml.StartElement{Name: xml.Name{Local: "ar:CdtrRefInf"}})
	e.EncodeElement(v.Invcr, xml.StartElement{Name: xml.Name{Local: "ar:Invcr"}})
	e.EncodeElement(v.Invcee, xml.StartElement{Name: xml.Name{Local: "ar:Invcee"}})
	e.EncodeElement(v.TaxRmt, xml.StartElement{Name: xml.Name{Local: "ar:TaxRmt"}})
	e.EncodeElement(v.GrnshmtRmt, xml.StartElement{Name: xml.Name{Local: "ar:GrnshmtRmt"}})
	e.EncodeElement(v.AddtlRmtInf, xml.StartElement{Name: xml.Name{Local: "ar:AddtlRmtInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxAmount2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Rate, xml.StartElement{Name: xml.Name{Local: "ar:Rate"}})
	e.EncodeElement(v.TaxblBaseAmt, xml.StartElement{Name: xml.Name{Local: "ar:TaxblBaseAmt"}})
	e.EncodeElement(v.TtlAmt, xml.StartElement{Name: xml.Name{Local: "ar:TtlAmt"}})
	e.EncodeElement(v.Dtls, xml.StartElement{Name: xml.Name{Local: "ar:Dtls"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxAmountAndType1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ar:Tp"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ar:Amt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxAmountType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ar:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ar:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxAuthorisation1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Titl, xml.StartElement{Name: xml.Name{Local: "ar:Titl"}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ar:Nm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxInformation7) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cdtr, xml.StartElement{Name: xml.Name{Local: "ar:Cdtr"}})
	e.EncodeElement(v.Dbtr, xml.StartElement{Name: xml.Name{Local: "ar:Dbtr"}})
	e.EncodeElement(v.UltmtDbtr, xml.StartElement{Name: xml.Name{Local: "ar:UltmtDbtr"}})
	e.EncodeElement(v.AdmstnZone, xml.StartElement{Name: xml.Name{Local: "ar:AdmstnZone"}})
	e.EncodeElement(v.RefNb, xml.StartElement{Name: xml.Name{Local: "ar:RefNb"}})
	e.EncodeElement(v.Mtd, xml.StartElement{Name: xml.Name{Local: "ar:Mtd"}})
	e.EncodeElement(v.TtlTaxblBaseAmt, xml.StartElement{Name: xml.Name{Local: "ar:TtlTaxblBaseAmt"}})
	e.EncodeElement(v.TtlTaxAmt, xml.StartElement{Name: xml.Name{Local: "ar:TtlTaxAmt"}})
	e.EncodeElement(v.Dt, xml.StartElement{Name: xml.Name{Local: "ar:Dt"}})
	e.EncodeElement(v.SeqNb, xml.StartElement{Name: xml.Name{Local: "ar:SeqNb"}})
	e.EncodeElement(v.Rcrd, xml.StartElement{Name: xml.Name{Local: "ar:Rcrd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxParty1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.TaxId, xml.StartElement{Name: xml.Name{Local: "ar:TaxId"}})
	e.EncodeElement(v.RegnId, xml.StartElement{Name: xml.Name{Local: "ar:RegnId"}})
	e.EncodeElement(v.TaxTp, xml.StartElement{Name: xml.Name{Local: "ar:TaxTp"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxParty2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.TaxId, xml.StartElement{Name: xml.Name{Local: "ar:TaxId"}})
	e.EncodeElement(v.RegnId, xml.StartElement{Name: xml.Name{Local: "ar:RegnId"}})
	e.EncodeElement(v.TaxTp, xml.StartElement{Name: xml.Name{Local: "ar:TaxTp"}})
	e.EncodeElement(v.Authstn, xml.StartElement{Name: xml.Name{Local: "ar:Authstn"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxPeriod2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Yr, xml.StartElement{Name: xml.Name{Local: "ar:Yr"}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ar:Tp"}})
	e.EncodeElement(v.FrToDt, xml.StartElement{Name: xml.Name{Local: "ar:FrToDt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxRecord2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ar:Tp"}})
	e.EncodeElement(v.Ctgy, xml.StartElement{Name: xml.Name{Local: "ar:Ctgy"}})
	e.EncodeElement(v.CtgyDtls, xml.StartElement{Name: xml.Name{Local: "ar:CtgyDtls"}})
	e.EncodeElement(v.DbtrSts, xml.StartElement{Name: xml.Name{Local: "ar:DbtrSts"}})
	e.EncodeElement(v.CertId, xml.StartElement{Name: xml.Name{Local: "ar:CertId"}})
	e.EncodeElement(v.FrmsCd, xml.StartElement{Name: xml.Name{Local: "ar:FrmsCd"}})
	e.EncodeElement(v.Prd, xml.StartElement{Name: xml.Name{Local: "ar:Prd"}})
	e.EncodeElement(v.TaxAmt, xml.StartElement{Name: xml.Name{Local: "ar:TaxAmt"}})
	e.EncodeElement(v.AddtlInf, xml.StartElement{Name: xml.Name{Local: "ar:AddtlInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxRecordDetails2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prd, xml.StartElement{Name: xml.Name{Local: "ar:Prd"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ar:Amt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TransactionReferences5) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.PmtInfId, xml.StartElement{Name: xml.Name{Local: "ar:PmtInfId"}})
	e.EncodeElement(v.InstrId, xml.StartElement{Name: xml.Name{Local: "ar:InstrId"}})
	e.EncodeElement(v.EndToEndId, xml.StartElement{Name: xml.Name{Local: "ar:EndToEndId"}})
	e.EncodeElement(v.TxId, xml.StartElement{Name: xml.Name{Local: "ar:TxId"}})
	e.EncodeElement(v.UETR, xml.StartElement{Name: xml.Name{Local: "ar:UETR"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

func (a ActiveOrHistoricCurrencyAndAmountSimpleType) MarshalText() ([]byte, error) {
	return rtp.Amount(a).MarshalText()
}
