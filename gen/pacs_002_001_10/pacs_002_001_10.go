// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Models for urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 with prefix 'ps'
package pacs_002_001_10

import (
	"encoding/xml"

	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD Elements

type Document struct {
	XMLName         xml.Name
	FIToFIPmtStsRpt FIToFIPaymentStatusReportV10 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 FIToFIPmtStsRpt"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Document) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.FIToFIPmtStsRpt, xml.StartElement{Name: xml.Name{Local: "ps:FIToFIPmtStsRpt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// XSD ComplexType declarations

type AccountIdentification4Choice struct {
	IBAN *IBAN2007Identifier            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 IBAN,omitempty"`
	Othr *GenericAccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v AccountIdentification4Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.IBAN, xml.StartElement{Name: xml.Name{Local: "ps:IBAN"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ps:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type AccountSchemeName1Choice struct {
	Cd    *ExternalAccountIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v AccountSchemeName1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ActiveOrHistoricCurrencyAndAmount struct {
	Value ActiveOrHistoricCurrencyAndAmountSimpleType `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode                `xml:"Ccy,attr"`
}

type AddressType3Choice struct {
	Cd    *AddressType2Code        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v AddressType3Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type AmendmentInformationDetails13 struct {
	OrgnlMndtId      *Max35Text                                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlMndtId,omitempty"`
	OrgnlCdtrSchmeId *PartyIdentification135                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlCdtrSchmeId,omitempty"`
	OrgnlCdtrAgt     *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlCdtrAgt,omitempty"`
	OrgnlCdtrAgtAcct *CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlCdtrAgtAcct,omitempty"`
	OrgnlDbtr        *PartyIdentification135                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlDbtr,omitempty"`
	OrgnlDbtrAcct    *CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlDbtrAcct,omitempty"`
	OrgnlDbtrAgt     *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlDbtrAgt,omitempty"`
	OrgnlDbtrAgtAcct *CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlDbtrAgtAcct,omitempty"`
	OrgnlFnlColltnDt *rtp.ISODate                                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlFnlColltnDt,omitempty"`
	OrgnlFrqcy       *Frequency36Choice                            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlFrqcy,omitempty"`
	OrgnlRsn         *MandateSetupReason1Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlRsn,omitempty"`
	OrgnlTrckgDays   *Exact2NumericText                            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlTrckgDays,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v AmendmentInformationDetails13) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgnlMndtId, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlMndtId"}})
	e.EncodeElement(v.OrgnlCdtrSchmeId, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlCdtrSchmeId"}})
	e.EncodeElement(v.OrgnlCdtrAgt, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlCdtrAgt"}})
	e.EncodeElement(v.OrgnlCdtrAgtAcct, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlCdtrAgtAcct"}})
	e.EncodeElement(v.OrgnlDbtr, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlDbtr"}})
	e.EncodeElement(v.OrgnlDbtrAcct, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlDbtrAcct"}})
	e.EncodeElement(v.OrgnlDbtrAgt, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlDbtrAgt"}})
	e.EncodeElement(v.OrgnlDbtrAgtAcct, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlDbtrAgtAcct"}})
	e.EncodeElement(v.OrgnlFnlColltnDt, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlFnlColltnDt"}})
	e.EncodeElement(v.OrgnlFrqcy, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlFrqcy"}})
	e.EncodeElement(v.OrgnlRsn, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlRsn"}})
	e.EncodeElement(v.OrgnlTrckgDays, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlTrckgDays"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type AmountType4Choice struct {
	InstdAmt *ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 InstdAmt,omitempty"`
	EqvtAmt  *EquivalentAmount2                 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 EqvtAmt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v AmountType4Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.InstdAmt, xml.StartElement{Name: xml.Name{Local: "ps:InstdAmt"}})
	e.EncodeElement(v.EqvtAmt, xml.StartElement{Name: xml.Name{Local: "ps:EqvtAmt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type BranchAndFinancialInstitutionIdentification6 struct {
	FinInstnId FinancialInstitutionIdentification18 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 FinInstnId"`
	BrnchId    *BranchData3                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 BrnchId,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v BranchAndFinancialInstitutionIdentification6) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.FinInstnId, xml.StartElement{Name: xml.Name{Local: "ps:FinInstnId"}})
	e.EncodeElement(v.BrnchId, xml.StartElement{Name: xml.Name{Local: "ps:BrnchId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type BranchData3 struct {
	Id      *Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Id,omitempty"`
	LEI     *LEIIdentifier   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 LEI,omitempty"`
	Nm      *Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Nm,omitempty"`
	PstlAdr *PostalAddress24 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PstlAdr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v BranchData3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ps:Id"}})
	e.EncodeElement(v.LEI, xml.StartElement{Name: xml.Name{Local: "ps:LEI"}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ps:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "ps:PstlAdr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CashAccount38 struct {
	Id   AccountIdentification4Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Id"`
	Tp   *CashAccountType2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp,omitempty"`
	Ccy  *ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Ccy,omitempty"`
	Nm   *Max70Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Nm,omitempty"`
	Prxy *ProxyAccountIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prxy,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CashAccount38) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ps:Id"}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.Ccy, xml.StartElement{Name: xml.Name{Local: "ps:Ccy"}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ps:Nm"}})
	e.EncodeElement(v.Prxy, xml.StartElement{Name: xml.Name{Local: "ps:Prxy"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CashAccountType2Choice struct {
	Cd    *ExternalCashAccountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CashAccountType2Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CategoryPurpose1Choice struct {
	Cd    *ExternalCategoryPurpose1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CategoryPurpose1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Charges7 struct {
	Amt ActiveOrHistoricCurrencyAndAmount            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Amt"`
	Agt BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Agt"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Charges7) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ps:Amt"}})
	e.EncodeElement(v.Agt, xml.StartElement{Name: xml.Name{Local: "ps:Agt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ClearingSystemIdentification2Choice struct {
	Cd    *ExternalClearingSystemIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ClearingSystemIdentification2Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ClearingSystemIdentification3Choice struct {
	Cd    *ExternalCashClearingSystem1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ClearingSystemIdentification3Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ClearingSystemMemberIdentification2 struct {
	ClrSysId *ClearingSystemIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ClrSysId,omitempty"`
	MmbId    Max35Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 MmbId"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ClearingSystemMemberIdentification2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.ClrSysId, xml.StartElement{Name: xml.Name{Local: "ps:ClrSysId"}})
	e.EncodeElement(v.MmbId, xml.StartElement{Name: xml.Name{Local: "ps:MmbId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Contact4 struct {
	NmPrfx    *NamePrefix2Code             `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 NmPrfx,omitempty"`
	Nm        *Max140Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Nm,omitempty"`
	PhneNb    *PhoneNumber                 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PhneNb,omitempty"`
	MobNb     *PhoneNumber                 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 MobNb,omitempty"`
	FaxNb     *PhoneNumber                 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 FaxNb,omitempty"`
	EmailAdr  *Max2048Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 EmailAdr,omitempty"`
	EmailPurp *Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 EmailPurp,omitempty"`
	JobTitl   *Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 JobTitl,omitempty"`
	Rspnsblty *Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Rspnsblty,omitempty"`
	Dept      *Max70Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Dept,omitempty"`
	Othr      []*OtherContact1             `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Othr,omitempty"`
	PrefrdMtd *PreferredContactMethod1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PrefrdMtd,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Contact4) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.NmPrfx, xml.StartElement{Name: xml.Name{Local: "ps:NmPrfx"}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ps:Nm"}})
	e.EncodeElement(v.PhneNb, xml.StartElement{Name: xml.Name{Local: "ps:PhneNb"}})
	e.EncodeElement(v.MobNb, xml.StartElement{Name: xml.Name{Local: "ps:MobNb"}})
	e.EncodeElement(v.FaxNb, xml.StartElement{Name: xml.Name{Local: "ps:FaxNb"}})
	e.EncodeElement(v.EmailAdr, xml.StartElement{Name: xml.Name{Local: "ps:EmailAdr"}})
	e.EncodeElement(v.EmailPurp, xml.StartElement{Name: xml.Name{Local: "ps:EmailPurp"}})
	e.EncodeElement(v.JobTitl, xml.StartElement{Name: xml.Name{Local: "ps:JobTitl"}})
	e.EncodeElement(v.Rspnsblty, xml.StartElement{Name: xml.Name{Local: "ps:Rspnsblty"}})
	e.EncodeElement(v.Dept, xml.StartElement{Name: xml.Name{Local: "ps:Dept"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ps:Othr"}})
	e.EncodeElement(v.PrefrdMtd, xml.StartElement{Name: xml.Name{Local: "ps:PrefrdMtd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CreditorReferenceInformation2 struct {
	Tp  *CreditorReferenceType2 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp,omitempty"`
	Ref *Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Ref,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CreditorReferenceInformation2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.Ref, xml.StartElement{Name: xml.Name{Local: "ps:Ref"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CreditorReferenceType1Choice struct {
	Cd    *DocumentType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CreditorReferenceType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CreditorReferenceType2 struct {
	CdOrPrtry CreditorReferenceType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CdOrPrtry"`
	Issr      *Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Issr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v CreditorReferenceType2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.CdOrPrtry, xml.StartElement{Name: xml.Name{Local: "ps:CdOrPrtry"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ps:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DateAndDateTime2Choice struct {
	Dt   *rtp.ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Dt,omitempty"`
	DtTm *rtp.ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DtTm,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DateAndDateTime2Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Dt, xml.StartElement{Name: xml.Name{Local: "ps:Dt"}})
	e.EncodeElement(v.DtTm, xml.StartElement{Name: xml.Name{Local: "ps:DtTm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DateAndPlaceOfBirth1 struct {
	BirthDt     rtp.ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 BirthDt"`
	PrvcOfBirth *Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PrvcOfBirth,omitempty"`
	CityOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CityOfBirth"`
	CtryOfBirth CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CtryOfBirth"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DateAndPlaceOfBirth1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.BirthDt, xml.StartElement{Name: xml.Name{Local: "ps:BirthDt"}})
	e.EncodeElement(v.PrvcOfBirth, xml.StartElement{Name: xml.Name{Local: "ps:PrvcOfBirth"}})
	e.EncodeElement(v.CityOfBirth, xml.StartElement{Name: xml.Name{Local: "ps:CityOfBirth"}})
	e.EncodeElement(v.CtryOfBirth, xml.StartElement{Name: xml.Name{Local: "ps:CtryOfBirth"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DatePeriod2 struct {
	FrDt rtp.ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 FrDt"`
	ToDt rtp.ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ToDt"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DatePeriod2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.FrDt, xml.StartElement{Name: xml.Name{Local: "ps:FrDt"}})
	e.EncodeElement(v.ToDt, xml.StartElement{Name: xml.Name{Local: "ps:ToDt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DiscountAmountAndType1 struct {
	Tp  *DiscountAmountType1Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp,omitempty"`
	Amt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Amt"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DiscountAmountAndType1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ps:Amt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DiscountAmountType1Choice struct {
	Cd    *ExternalDiscountAmountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DiscountAmountType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DocumentAdjustment1 struct {
	Amt       ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Amt"`
	CdtDbtInd *CreditDebitCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CdtDbtInd,omitempty"`
	Rsn       *Max4Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Rsn,omitempty"`
	AddtlInf  *Max140Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AddtlInf,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentAdjustment1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ps:Amt"}})
	e.EncodeElement(v.CdtDbtInd, xml.StartElement{Name: xml.Name{Local: "ps:CdtDbtInd"}})
	e.EncodeElement(v.Rsn, xml.StartElement{Name: xml.Name{Local: "ps:Rsn"}})
	e.EncodeElement(v.AddtlInf, xml.StartElement{Name: xml.Name{Local: "ps:AddtlInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DocumentLineIdentification1 struct {
	Tp     *DocumentLineType1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp,omitempty"`
	Nb     *Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Nb,omitempty"`
	RltdDt *rtp.ISODate       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 RltdDt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentLineIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.Nb, xml.StartElement{Name: xml.Name{Local: "ps:Nb"}})
	e.EncodeElement(v.RltdDt, xml.StartElement{Name: xml.Name{Local: "ps:RltdDt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DocumentLineInformation1 struct {
	Id   []DocumentLineIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Id"`
	Desc *Max2048Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Desc,omitempty"`
	Amt  *RemittanceAmount3            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Amt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentLineInformation1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ps:Id"}})
	e.EncodeElement(v.Desc, xml.StartElement{Name: xml.Name{Local: "ps:Desc"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ps:Amt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DocumentLineType1 struct {
	CdOrPrtry DocumentLineType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CdOrPrtry"`
	Issr      *Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Issr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentLineType1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.CdOrPrtry, xml.StartElement{Name: xml.Name{Local: "ps:CdOrPrtry"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ps:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DocumentLineType1Choice struct {
	Cd    *ExternalDocumentLineType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DocumentLineType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type EquivalentAmount2 struct {
	Amt      ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Amt"`
	CcyOfTrf ActiveOrHistoricCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CcyOfTrf"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v EquivalentAmount2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ps:Amt"}})
	e.EncodeElement(v.CcyOfTrf, xml.StartElement{Name: xml.Name{Local: "ps:CcyOfTrf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type FIToFIPaymentStatusReportV10 struct {
	GrpHdr            GroupHeader91            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 GrpHdr"`
	OrgnlGrpInfAndSts []*OriginalGroupHeader17 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlGrpInfAndSts,omitempty"`
	TxInfAndSts       []*PaymentTransaction110 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TxInfAndSts,omitempty"`
	SplmtryData       []*SupplementaryData1    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SplmtryData,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FIToFIPaymentStatusReportV10) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.GrpHdr, xml.StartElement{Name: xml.Name{Local: "ps:GrpHdr"}})
	e.EncodeElement(v.OrgnlGrpInfAndSts, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlGrpInfAndSts"}})
	e.EncodeElement(v.TxInfAndSts, xml.StartElement{Name: xml.Name{Local: "ps:TxInfAndSts"}})
	e.EncodeElement(v.SplmtryData, xml.StartElement{Name: xml.Name{Local: "ps:SplmtryData"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type FinancialIdentificationSchemeName1Choice struct {
	Cd    *ExternalFinancialInstitutionIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FinancialIdentificationSchemeName1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type FinancialInstitutionIdentification18 struct {
	BICFI       *BICFIDec2014Identifier              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 BICFI,omitempty"`
	ClrSysMmbId *ClearingSystemMemberIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ClrSysMmbId,omitempty"`
	LEI         *LEIIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 LEI,omitempty"`
	Nm          *Max140Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Nm,omitempty"`
	PstlAdr     *PostalAddress24                     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PstlAdr,omitempty"`
	Othr        *GenericFinancialIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FinancialInstitutionIdentification18) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.BICFI, xml.StartElement{Name: xml.Name{Local: "ps:BICFI"}})
	e.EncodeElement(v.ClrSysMmbId, xml.StartElement{Name: xml.Name{Local: "ps:ClrSysMmbId"}})
	e.EncodeElement(v.LEI, xml.StartElement{Name: xml.Name{Local: "ps:LEI"}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ps:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "ps:PstlAdr"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ps:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Frequency36Choice struct {
	Tp     *Frequency6Code      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp,omitempty"`
	Prd    *FrequencyPeriod1    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prd,omitempty"`
	PtInTm *FrequencyAndMoment1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PtInTm,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Frequency36Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.Prd, xml.StartElement{Name: xml.Name{Local: "ps:Prd"}})
	e.EncodeElement(v.PtInTm, xml.StartElement{Name: xml.Name{Local: "ps:PtInTm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type FrequencyAndMoment1 struct {
	Tp     Frequency6Code    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp"`
	PtInTm Exact2NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PtInTm"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FrequencyAndMoment1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.PtInTm, xml.StartElement{Name: xml.Name{Local: "ps:PtInTm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type FrequencyPeriod1 struct {
	Tp        Frequency6Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp"`
	CntPerPrd DecimalNumber  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CntPerPrd"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v FrequencyPeriod1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.CntPerPrd, xml.StartElement{Name: xml.Name{Local: "ps:CntPerPrd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Garnishment3 struct {
	Tp                GarnishmentType1                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp"`
	Grnshee           *PartyIdentification135            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Grnshee,omitempty"`
	GrnshmtAdmstr     *PartyIdentification135            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 GrnshmtAdmstr,omitempty"`
	RefNb             *Max140Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 RefNb,omitempty"`
	Dt                *rtp.ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Dt,omitempty"`
	RmtdAmt           *ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 RmtdAmt,omitempty"`
	FmlyMdclInsrncInd *TrueFalseIndicator                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 FmlyMdclInsrncInd,omitempty"`
	MplyeeTermntnInd  *TrueFalseIndicator                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 MplyeeTermntnInd,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Garnishment3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.Grnshee, xml.StartElement{Name: xml.Name{Local: "ps:Grnshee"}})
	e.EncodeElement(v.GrnshmtAdmstr, xml.StartElement{Name: xml.Name{Local: "ps:GrnshmtAdmstr"}})
	e.EncodeElement(v.RefNb, xml.StartElement{Name: xml.Name{Local: "ps:RefNb"}})
	e.EncodeElement(v.Dt, xml.StartElement{Name: xml.Name{Local: "ps:Dt"}})
	e.EncodeElement(v.RmtdAmt, xml.StartElement{Name: xml.Name{Local: "ps:RmtdAmt"}})
	e.EncodeElement(v.FmlyMdclInsrncInd, xml.StartElement{Name: xml.Name{Local: "ps:FmlyMdclInsrncInd"}})
	e.EncodeElement(v.MplyeeTermntnInd, xml.StartElement{Name: xml.Name{Local: "ps:MplyeeTermntnInd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GarnishmentType1 struct {
	CdOrPrtry GarnishmentType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CdOrPrtry"`
	Issr      *Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Issr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GarnishmentType1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.CdOrPrtry, xml.StartElement{Name: xml.Name{Local: "ps:CdOrPrtry"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ps:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GarnishmentType1Choice struct {
	Cd    *ExternalGarnishmentType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GarnishmentType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GenericAccountIdentification1 struct {
	Id      Max34Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Id"`
	SchmeNm *AccountSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SchmeNm,omitempty"`
	Issr    *Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Issr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericAccountIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ps:Id"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "ps:SchmeNm"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ps:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GenericFinancialIdentification1 struct {
	Id      Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Id"`
	SchmeNm *FinancialIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SchmeNm,omitempty"`
	Issr    *Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Issr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericFinancialIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ps:Id"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "ps:SchmeNm"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ps:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Issr"`
	SchmeNm *Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SchmeNm,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericIdentification30) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ps:Id"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ps:Issr"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "ps:SchmeNm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GenericOrganisationIdentification1 struct {
	Id      Max35Text                                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Id"`
	SchmeNm *OrganisationIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SchmeNm,omitempty"`
	Issr    *Max35Text                                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Issr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericOrganisationIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ps:Id"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "ps:SchmeNm"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ps:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GenericPersonIdentification1 struct {
	Id      Max35Text                              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Id"`
	SchmeNm *PersonIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SchmeNm,omitempty"`
	Issr    *Max35Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Issr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GenericPersonIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ps:Id"}})
	e.EncodeElement(v.SchmeNm, xml.StartElement{Name: xml.Name{Local: "ps:SchmeNm"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ps:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type GroupHeader91 struct {
	MsgId    Max35Text                                     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 MsgId"`
	CreDtTm  rtp.ISODateTime                               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CreDtTm"`
	InstgAgt *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 InstgAgt,omitempty"`
	InstdAgt *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 InstdAgt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v GroupHeader91) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.MsgId, xml.StartElement{Name: xml.Name{Local: "ps:MsgId"}})
	e.EncodeElement(v.CreDtTm, xml.StartElement{Name: xml.Name{Local: "ps:CreDtTm"}})
	e.EncodeElement(v.InstgAgt, xml.StartElement{Name: xml.Name{Local: "ps:InstgAgt"}})
	e.EncodeElement(v.InstdAgt, xml.StartElement{Name: xml.Name{Local: "ps:InstdAgt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type LocalInstrument2Choice struct {
	Cd    *ExternalLocalInstrument1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v LocalInstrument2Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type MandateRelatedInformation14 struct {
	MndtId        *Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 MndtId,omitempty"`
	DtOfSgntr     *rtp.ISODate                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DtOfSgntr,omitempty"`
	AmdmntInd     *TrueFalseIndicator            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AmdmntInd,omitempty"`
	AmdmntInfDtls *AmendmentInformationDetails13 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AmdmntInfDtls,omitempty"`
	ElctrncSgntr  *Max1025Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ElctrncSgntr,omitempty"`
	FrstColltnDt  *rtp.ISODate                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 FrstColltnDt,omitempty"`
	FnlColltnDt   *rtp.ISODate                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 FnlColltnDt,omitempty"`
	Frqcy         *Frequency36Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Frqcy,omitempty"`
	Rsn           *MandateSetupReason1Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Rsn,omitempty"`
	TrckgDays     *Exact2NumericText             `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TrckgDays,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v MandateRelatedInformation14) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.MndtId, xml.StartElement{Name: xml.Name{Local: "ps:MndtId"}})
	e.EncodeElement(v.DtOfSgntr, xml.StartElement{Name: xml.Name{Local: "ps:DtOfSgntr"}})
	e.EncodeElement(v.AmdmntInd, xml.StartElement{Name: xml.Name{Local: "ps:AmdmntInd"}})
	e.EncodeElement(v.AmdmntInfDtls, xml.StartElement{Name: xml.Name{Local: "ps:AmdmntInfDtls"}})
	e.EncodeElement(v.ElctrncSgntr, xml.StartElement{Name: xml.Name{Local: "ps:ElctrncSgntr"}})
	e.EncodeElement(v.FrstColltnDt, xml.StartElement{Name: xml.Name{Local: "ps:FrstColltnDt"}})
	e.EncodeElement(v.FnlColltnDt, xml.StartElement{Name: xml.Name{Local: "ps:FnlColltnDt"}})
	e.EncodeElement(v.Frqcy, xml.StartElement{Name: xml.Name{Local: "ps:Frqcy"}})
	e.EncodeElement(v.Rsn, xml.StartElement{Name: xml.Name{Local: "ps:Rsn"}})
	e.EncodeElement(v.TrckgDays, xml.StartElement{Name: xml.Name{Local: "ps:TrckgDays"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type MandateSetupReason1Choice struct {
	Cd    *ExternalMandateSetupReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max70Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v MandateSetupReason1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type NumberOfTransactionsPerStatus5 struct {
	DtldNbOfTxs Max15NumericText                      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DtldNbOfTxs"`
	DtldSts     ExternalPaymentTransactionStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DtldSts"`
	DtldCtrlSum *DecimalNumber                        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DtldCtrlSum,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v NumberOfTransactionsPerStatus5) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DtldNbOfTxs, xml.StartElement{Name: xml.Name{Local: "ps:DtldNbOfTxs"}})
	e.EncodeElement(v.DtldSts, xml.StartElement{Name: xml.Name{Local: "ps:DtldSts"}})
	e.EncodeElement(v.DtldCtrlSum, xml.StartElement{Name: xml.Name{Local: "ps:DtldCtrlSum"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentification29 struct {
	AnyBIC *AnyBICDec2014Identifier              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AnyBIC,omitempty"`
	LEI    *LEIIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 LEI,omitempty"`
	Othr   []*GenericOrganisationIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentification29) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.AnyBIC, xml.StartElement{Name: xml.Name{Local: "ps:AnyBIC"}})
	e.EncodeElement(v.LEI, xml.StartElement{Name: xml.Name{Local: "ps:LEI"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ps:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OrganisationIdentificationSchemeName1Choice struct {
	Cd    *ExternalOrganisationIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OrganisationIdentificationSchemeName1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OriginalGroupHeader17 struct {
	OrgnlMsgId    Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlMsgId"`
	OrgnlMsgNmId  Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlMsgNmId"`
	OrgnlCreDtTm  *rtp.ISODateTime                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlCreDtTm,omitempty"`
	OrgnlNbOfTxs  *Max15NumericText                 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlNbOfTxs,omitempty"`
	OrgnlCtrlSum  *DecimalNumber                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlCtrlSum,omitempty"`
	GrpSts        *ExternalPaymentGroupStatus1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 GrpSts,omitempty"`
	StsRsnInf     []*StatusReasonInformation12      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 StsRsnInf,omitempty"`
	NbOfTxsPerSts []*NumberOfTransactionsPerStatus5 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 NbOfTxsPerSts,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OriginalGroupHeader17) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgnlMsgId, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlMsgId"}})
	e.EncodeElement(v.OrgnlMsgNmId, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlMsgNmId"}})
	e.EncodeElement(v.OrgnlCreDtTm, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlCreDtTm"}})
	e.EncodeElement(v.OrgnlNbOfTxs, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlNbOfTxs"}})
	e.EncodeElement(v.OrgnlCtrlSum, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlCtrlSum"}})
	e.EncodeElement(v.GrpSts, xml.StartElement{Name: xml.Name{Local: "ps:GrpSts"}})
	e.EncodeElement(v.StsRsnInf, xml.StartElement{Name: xml.Name{Local: "ps:StsRsnInf"}})
	e.EncodeElement(v.NbOfTxsPerSts, xml.StartElement{Name: xml.Name{Local: "ps:NbOfTxsPerSts"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OriginalGroupInformation29 struct {
	OrgnlMsgId   Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlMsgId"`
	OrgnlMsgNmId Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlMsgNmId"`
	OrgnlCreDtTm *rtp.ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlCreDtTm,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OriginalGroupInformation29) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgnlMsgId, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlMsgId"}})
	e.EncodeElement(v.OrgnlMsgNmId, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlMsgNmId"}})
	e.EncodeElement(v.OrgnlCreDtTm, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlCreDtTm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OriginalTransactionReference28 struct {
	IntrBkSttlmAmt *ActiveOrHistoricCurrencyAndAmount            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 IntrBkSttlmAmt,omitempty"`
	Amt            *AmountType4Choice                            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Amt,omitempty"`
	IntrBkSttlmDt  *rtp.ISODate                                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 IntrBkSttlmDt,omitempty"`
	ReqdColltnDt   *rtp.ISODate                                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ReqdColltnDt,omitempty"`
	ReqdExctnDt    *DateAndDateTime2Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ReqdExctnDt,omitempty"`
	CdtrSchmeId    *PartyIdentification135                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CdtrSchmeId,omitempty"`
	SttlmInf       *SettlementInstruction7                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SttlmInf,omitempty"`
	PmtTpInf       *PaymentTypeInformation27                     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PmtTpInf,omitempty"`
	PmtMtd         *PaymentMethod4Code                           `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PmtMtd,omitempty"`
	MndtRltdInf    *MandateRelatedInformation14                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 MndtRltdInf,omitempty"`
	RmtInf         *RemittanceInformation16                      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 RmtInf,omitempty"`
	UltmtDbtr      *Party40Choice                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 UltmtDbtr,omitempty"`
	Dbtr           *Party40Choice                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Dbtr,omitempty"`
	DbtrAcct       *CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DbtrAcct,omitempty"`
	DbtrAgt        *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DbtrAgt,omitempty"`
	DbtrAgtAcct    *CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DbtrAgtAcct,omitempty"`
	CdtrAgt        *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CdtrAgt,omitempty"`
	CdtrAgtAcct    *CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CdtrAgtAcct,omitempty"`
	Cdtr           *Party40Choice                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cdtr,omitempty"`
	CdtrAcct       *CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CdtrAcct,omitempty"`
	UltmtCdtr      *Party40Choice                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 UltmtCdtr,omitempty"`
	Purp           *Purpose2Choice                               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Purp,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OriginalTransactionReference28) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.IntrBkSttlmAmt, xml.StartElement{Name: xml.Name{Local: "ps:IntrBkSttlmAmt"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ps:Amt"}})
	e.EncodeElement(v.IntrBkSttlmDt, xml.StartElement{Name: xml.Name{Local: "ps:IntrBkSttlmDt"}})
	e.EncodeElement(v.ReqdColltnDt, xml.StartElement{Name: xml.Name{Local: "ps:ReqdColltnDt"}})
	e.EncodeElement(v.ReqdExctnDt, xml.StartElement{Name: xml.Name{Local: "ps:ReqdExctnDt"}})
	e.EncodeElement(v.CdtrSchmeId, xml.StartElement{Name: xml.Name{Local: "ps:CdtrSchmeId"}})
	e.EncodeElement(v.SttlmInf, xml.StartElement{Name: xml.Name{Local: "ps:SttlmInf"}})
	e.EncodeElement(v.PmtTpInf, xml.StartElement{Name: xml.Name{Local: "ps:PmtTpInf"}})
	e.EncodeElement(v.PmtMtd, xml.StartElement{Name: xml.Name{Local: "ps:PmtMtd"}})
	e.EncodeElement(v.MndtRltdInf, xml.StartElement{Name: xml.Name{Local: "ps:MndtRltdInf"}})
	e.EncodeElement(v.RmtInf, xml.StartElement{Name: xml.Name{Local: "ps:RmtInf"}})
	e.EncodeElement(v.UltmtDbtr, xml.StartElement{Name: xml.Name{Local: "ps:UltmtDbtr"}})
	e.EncodeElement(v.Dbtr, xml.StartElement{Name: xml.Name{Local: "ps:Dbtr"}})
	e.EncodeElement(v.DbtrAcct, xml.StartElement{Name: xml.Name{Local: "ps:DbtrAcct"}})
	e.EncodeElement(v.DbtrAgt, xml.StartElement{Name: xml.Name{Local: "ps:DbtrAgt"}})
	e.EncodeElement(v.DbtrAgtAcct, xml.StartElement{Name: xml.Name{Local: "ps:DbtrAgtAcct"}})
	e.EncodeElement(v.CdtrAgt, xml.StartElement{Name: xml.Name{Local: "ps:CdtrAgt"}})
	e.EncodeElement(v.CdtrAgtAcct, xml.StartElement{Name: xml.Name{Local: "ps:CdtrAgtAcct"}})
	e.EncodeElement(v.Cdtr, xml.StartElement{Name: xml.Name{Local: "ps:Cdtr"}})
	e.EncodeElement(v.CdtrAcct, xml.StartElement{Name: xml.Name{Local: "ps:CdtrAcct"}})
	e.EncodeElement(v.UltmtCdtr, xml.StartElement{Name: xml.Name{Local: "ps:UltmtCdtr"}})
	e.EncodeElement(v.Purp, xml.StartElement{Name: xml.Name{Local: "ps:Purp"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type OtherContact1 struct {
	ChanlTp Max4Text    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ChanlTp"`
	Id      *Max128Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Id,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v OtherContact1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.ChanlTp, xml.StartElement{Name: xml.Name{Local: "ps:ChanlTp"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ps:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party38Choice struct {
	OrgId  *OrganisationIdentification29 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgId,omitempty"`
	PrvtId *PersonIdentification13       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PrvtId,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party38Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.OrgId, xml.StartElement{Name: xml.Name{Local: "ps:OrgId"}})
	e.EncodeElement(v.PrvtId, xml.StartElement{Name: xml.Name{Local: "ps:PrvtId"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Party40Choice struct {
	Pty *PartyIdentification135                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Pty,omitempty"`
	Agt *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Agt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Party40Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Pty, xml.StartElement{Name: xml.Name{Local: "ps:Pty"}})
	e.EncodeElement(v.Agt, xml.StartElement{Name: xml.Name{Local: "ps:Agt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PartyIdentification135 struct {
	Nm        *Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Nm,omitempty"`
	PstlAdr   *PostalAddress24 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PstlAdr,omitempty"`
	Id        *Party38Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Id,omitempty"`
	CtryOfRes *CountryCode     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CtryOfRes,omitempty"`
	CtctDtls  *Contact4        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CtctDtls,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PartyIdentification135) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ps:Nm"}})
	e.EncodeElement(v.PstlAdr, xml.StartElement{Name: xml.Name{Local: "ps:PstlAdr"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ps:Id"}})
	e.EncodeElement(v.CtryOfRes, xml.StartElement{Name: xml.Name{Local: "ps:CtryOfRes"}})
	e.EncodeElement(v.CtctDtls, xml.StartElement{Name: xml.Name{Local: "ps:CtctDtls"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PaymentTransaction110 struct {
	StsId             *Max35Text                                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 StsId,omitempty"`
	OrgnlGrpInf       *OriginalGroupInformation29                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlGrpInf,omitempty"`
	OrgnlInstrId      *Max35Text                                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlInstrId,omitempty"`
	OrgnlEndToEndId   *Max35Text                                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlEndToEndId,omitempty"`
	OrgnlTxId         *Max35Text                                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlTxId,omitempty"`
	OrgnlUETR         *UUIDv4Identifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlUETR,omitempty"`
	TxSts             *ExternalPaymentTransactionStatus1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TxSts,omitempty"`
	StsRsnInf         []*StatusReasonInformation12                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 StsRsnInf,omitempty"`
	ChrgsInf          []*Charges7                                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ChrgsInf,omitempty"`
	AccptncDtTm       *rtp.ISODateTime                              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AccptncDtTm,omitempty"`
	FctvIntrBkSttlmDt *DateAndDateTime2Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 FctvIntrBkSttlmDt,omitempty"`
	AcctSvcrRef       *Max35Text                                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AcctSvcrRef,omitempty"`
	ClrSysRef         *Max35Text                                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ClrSysRef,omitempty"`
	InstgAgt          *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 InstgAgt,omitempty"`
	InstdAgt          *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 InstdAgt,omitempty"`
	OrgnlTxRef        *OriginalTransactionReference28               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 OrgnlTxRef,omitempty"`
	SplmtryData       []*SupplementaryData1                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SplmtryData,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PaymentTransaction110) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.StsId, xml.StartElement{Name: xml.Name{Local: "ps:StsId"}})
	e.EncodeElement(v.OrgnlGrpInf, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlGrpInf"}})
	e.EncodeElement(v.OrgnlInstrId, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlInstrId"}})
	e.EncodeElement(v.OrgnlEndToEndId, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlEndToEndId"}})
	e.EncodeElement(v.OrgnlTxId, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlTxId"}})
	e.EncodeElement(v.OrgnlUETR, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlUETR"}})
	e.EncodeElement(v.TxSts, xml.StartElement{Name: xml.Name{Local: "ps:TxSts"}})
	e.EncodeElement(v.StsRsnInf, xml.StartElement{Name: xml.Name{Local: "ps:StsRsnInf"}})
	e.EncodeElement(v.ChrgsInf, xml.StartElement{Name: xml.Name{Local: "ps:ChrgsInf"}})
	e.EncodeElement(v.AccptncDtTm, xml.StartElement{Name: xml.Name{Local: "ps:AccptncDtTm"}})
	e.EncodeElement(v.FctvIntrBkSttlmDt, xml.StartElement{Name: xml.Name{Local: "ps:FctvIntrBkSttlmDt"}})
	e.EncodeElement(v.AcctSvcrRef, xml.StartElement{Name: xml.Name{Local: "ps:AcctSvcrRef"}})
	e.EncodeElement(v.ClrSysRef, xml.StartElement{Name: xml.Name{Local: "ps:ClrSysRef"}})
	e.EncodeElement(v.InstgAgt, xml.StartElement{Name: xml.Name{Local: "ps:InstgAgt"}})
	e.EncodeElement(v.InstdAgt, xml.StartElement{Name: xml.Name{Local: "ps:InstdAgt"}})
	e.EncodeElement(v.OrgnlTxRef, xml.StartElement{Name: xml.Name{Local: "ps:OrgnlTxRef"}})
	e.EncodeElement(v.SplmtryData, xml.StartElement{Name: xml.Name{Local: "ps:SplmtryData"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PaymentTypeInformation27 struct {
	InstrPrty *Priority2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 InstrPrty,omitempty"`
	ClrChanl  *ClearingChannel2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ClrChanl,omitempty"`
	SvcLvl    []*ServiceLevel8Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SvcLvl,omitempty"`
	LclInstrm *LocalInstrument2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 LclInstrm,omitempty"`
	SeqTp     *SequenceType3Code      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SeqTp,omitempty"`
	CtgyPurp  *CategoryPurpose1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CtgyPurp,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PaymentTypeInformation27) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.InstrPrty, xml.StartElement{Name: xml.Name{Local: "ps:InstrPrty"}})
	e.EncodeElement(v.ClrChanl, xml.StartElement{Name: xml.Name{Local: "ps:ClrChanl"}})
	e.EncodeElement(v.SvcLvl, xml.StartElement{Name: xml.Name{Local: "ps:SvcLvl"}})
	e.EncodeElement(v.LclInstrm, xml.StartElement{Name: xml.Name{Local: "ps:LclInstrm"}})
	e.EncodeElement(v.SeqTp, xml.StartElement{Name: xml.Name{Local: "ps:SeqTp"}})
	e.EncodeElement(v.CtgyPurp, xml.StartElement{Name: xml.Name{Local: "ps:CtgyPurp"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PersonIdentification13 struct {
	DtAndPlcOfBirth *DateAndPlaceOfBirth1           `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DtAndPlcOfBirth,omitempty"`
	Othr            []*GenericPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Othr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentification13) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DtAndPlcOfBirth, xml.StartElement{Name: xml.Name{Local: "ps:DtAndPlcOfBirth"}})
	e.EncodeElement(v.Othr, xml.StartElement{Name: xml.Name{Local: "ps:Othr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PersonIdentificationSchemeName1Choice struct {
	Cd    *ExternalPersonIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PersonIdentificationSchemeName1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PostalAddress24 struct {
	AdrTp       *AddressType3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AdrTp,omitempty"`
	Dept        *Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Dept,omitempty"`
	SubDept     *Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SubDept,omitempty"`
	StrtNm      *Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 StrtNm,omitempty"`
	BldgNb      *Max16Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 BldgNb,omitempty"`
	BldgNm      *Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 BldgNm,omitempty"`
	Flr         *Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Flr,omitempty"`
	PstBx       *Max16Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PstBx,omitempty"`
	Room        *Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Room,omitempty"`
	PstCd       *Max16Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PstCd,omitempty"`
	TwnNm       *Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TwnNm,omitempty"`
	TwnLctnNm   *Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TwnLctnNm,omitempty"`
	DstrctNm    *Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DstrctNm,omitempty"`
	CtrySubDvsn *Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CtrySubDvsn,omitempty"`
	Ctry        *CountryCode        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Ctry,omitempty"`
	AdrLine     []*Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AdrLine,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PostalAddress24) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.AdrTp, xml.StartElement{Name: xml.Name{Local: "ps:AdrTp"}})
	e.EncodeElement(v.Dept, xml.StartElement{Name: xml.Name{Local: "ps:Dept"}})
	e.EncodeElement(v.SubDept, xml.StartElement{Name: xml.Name{Local: "ps:SubDept"}})
	e.EncodeElement(v.StrtNm, xml.StartElement{Name: xml.Name{Local: "ps:StrtNm"}})
	e.EncodeElement(v.BldgNb, xml.StartElement{Name: xml.Name{Local: "ps:BldgNb"}})
	e.EncodeElement(v.BldgNm, xml.StartElement{Name: xml.Name{Local: "ps:BldgNm"}})
	e.EncodeElement(v.Flr, xml.StartElement{Name: xml.Name{Local: "ps:Flr"}})
	e.EncodeElement(v.PstBx, xml.StartElement{Name: xml.Name{Local: "ps:PstBx"}})
	e.EncodeElement(v.Room, xml.StartElement{Name: xml.Name{Local: "ps:Room"}})
	e.EncodeElement(v.PstCd, xml.StartElement{Name: xml.Name{Local: "ps:PstCd"}})
	e.EncodeElement(v.TwnNm, xml.StartElement{Name: xml.Name{Local: "ps:TwnNm"}})
	e.EncodeElement(v.TwnLctnNm, xml.StartElement{Name: xml.Name{Local: "ps:TwnLctnNm"}})
	e.EncodeElement(v.DstrctNm, xml.StartElement{Name: xml.Name{Local: "ps:DstrctNm"}})
	e.EncodeElement(v.CtrySubDvsn, xml.StartElement{Name: xml.Name{Local: "ps:CtrySubDvsn"}})
	e.EncodeElement(v.Ctry, xml.StartElement{Name: xml.Name{Local: "ps:Ctry"}})
	e.EncodeElement(v.AdrLine, xml.StartElement{Name: xml.Name{Local: "ps:AdrLine"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ProxyAccountIdentification1 struct {
	Tp *ProxyAccountType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp,omitempty"`
	Id Max2048Text              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Id"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ProxyAccountIdentification1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "ps:Id"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ProxyAccountType1Choice struct {
	Cd    *ExternalProxyAccountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ProxyAccountType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Purpose2Choice struct {
	Cd    *ExternalPurpose1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Purpose2Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ReferredDocumentInformation7 struct {
	Tp       *ReferredDocumentType4      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp,omitempty"`
	Nb       *Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Nb,omitempty"`
	RltdDt   *rtp.ISODate                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 RltdDt,omitempty"`
	LineDtls []*DocumentLineInformation1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 LineDtls,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferredDocumentInformation7) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.Nb, xml.StartElement{Name: xml.Name{Local: "ps:Nb"}})
	e.EncodeElement(v.RltdDt, xml.StartElement{Name: xml.Name{Local: "ps:RltdDt"}})
	e.EncodeElement(v.LineDtls, xml.StartElement{Name: xml.Name{Local: "ps:LineDtls"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ReferredDocumentType3Choice struct {
	Cd    *DocumentType6Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferredDocumentType3Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ReferredDocumentType4 struct {
	CdOrPrtry ReferredDocumentType3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CdOrPrtry"`
	Issr      *Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Issr,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferredDocumentType4) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.CdOrPrtry, xml.StartElement{Name: xml.Name{Local: "ps:CdOrPrtry"}})
	e.EncodeElement(v.Issr, xml.StartElement{Name: xml.Name{Local: "ps:Issr"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceAmount2 struct {
	DuePyblAmt        *ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DuePyblAmt,omitempty"`
	DscntApldAmt      []*DiscountAmountAndType1          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DscntApldAmt,omitempty"`
	CdtNoteAmt        *ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CdtNoteAmt,omitempty"`
	TaxAmt            []*TaxAmountAndType1               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TaxAmt,omitempty"`
	AdjstmntAmtAndRsn []*DocumentAdjustment1             `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AdjstmntAmtAndRsn,omitempty"`
	RmtdAmt           *ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 RmtdAmt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceAmount2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DuePyblAmt, xml.StartElement{Name: xml.Name{Local: "ps:DuePyblAmt"}})
	e.EncodeElement(v.DscntApldAmt, xml.StartElement{Name: xml.Name{Local: "ps:DscntApldAmt"}})
	e.EncodeElement(v.CdtNoteAmt, xml.StartElement{Name: xml.Name{Local: "ps:CdtNoteAmt"}})
	e.EncodeElement(v.TaxAmt, xml.StartElement{Name: xml.Name{Local: "ps:TaxAmt"}})
	e.EncodeElement(v.AdjstmntAmtAndRsn, xml.StartElement{Name: xml.Name{Local: "ps:AdjstmntAmtAndRsn"}})
	e.EncodeElement(v.RmtdAmt, xml.StartElement{Name: xml.Name{Local: "ps:RmtdAmt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceAmount3 struct {
	DuePyblAmt        *ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DuePyblAmt,omitempty"`
	DscntApldAmt      []*DiscountAmountAndType1          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DscntApldAmt,omitempty"`
	CdtNoteAmt        *ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CdtNoteAmt,omitempty"`
	TaxAmt            []*TaxAmountAndType1               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TaxAmt,omitempty"`
	AdjstmntAmtAndRsn []*DocumentAdjustment1             `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AdjstmntAmtAndRsn,omitempty"`
	RmtdAmt           *ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 RmtdAmt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceAmount3) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DuePyblAmt, xml.StartElement{Name: xml.Name{Local: "ps:DuePyblAmt"}})
	e.EncodeElement(v.DscntApldAmt, xml.StartElement{Name: xml.Name{Local: "ps:DscntApldAmt"}})
	e.EncodeElement(v.CdtNoteAmt, xml.StartElement{Name: xml.Name{Local: "ps:CdtNoteAmt"}})
	e.EncodeElement(v.TaxAmt, xml.StartElement{Name: xml.Name{Local: "ps:TaxAmt"}})
	e.EncodeElement(v.AdjstmntAmtAndRsn, xml.StartElement{Name: xml.Name{Local: "ps:AdjstmntAmtAndRsn"}})
	e.EncodeElement(v.RmtdAmt, xml.StartElement{Name: xml.Name{Local: "ps:RmtdAmt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RemittanceInformation16 struct {
	Ustrd []*Max140Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Ustrd,omitempty"`
	Strd  []*StructuredRemittanceInformation16 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Strd,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RemittanceInformation16) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Ustrd, xml.StartElement{Name: xml.Name{Local: "ps:Ustrd"}})
	e.EncodeElement(v.Strd, xml.StartElement{Name: xml.Name{Local: "ps:Strd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ServiceLevel8Choice struct {
	Cd    *ExternalServiceLevel1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ServiceLevel8Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SettlementInstruction7 struct {
	SttlmMtd             SettlementMethod1Code                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SttlmMtd"`
	SttlmAcct            *CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SttlmAcct,omitempty"`
	ClrSys               *ClearingSystemIdentification3Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ClrSys,omitempty"`
	InstgRmbrsmntAgt     *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 InstgRmbrsmntAgt,omitempty"`
	InstgRmbrsmntAgtAcct *CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 InstgRmbrsmntAgtAcct,omitempty"`
	InstdRmbrsmntAgt     *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 InstdRmbrsmntAgt,omitempty"`
	InstdRmbrsmntAgtAcct *CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 InstdRmbrsmntAgtAcct,omitempty"`
	ThrdRmbrsmntAgt      *BranchAndFinancialInstitutionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ThrdRmbrsmntAgt,omitempty"`
	ThrdRmbrsmntAgtAcct  *CashAccount38                                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 ThrdRmbrsmntAgtAcct,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SettlementInstruction7) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.SttlmMtd, xml.StartElement{Name: xml.Name{Local: "ps:SttlmMtd"}})
	e.EncodeElement(v.SttlmAcct, xml.StartElement{Name: xml.Name{Local: "ps:SttlmAcct"}})
	e.EncodeElement(v.ClrSys, xml.StartElement{Name: xml.Name{Local: "ps:ClrSys"}})
	e.EncodeElement(v.InstgRmbrsmntAgt, xml.StartElement{Name: xml.Name{Local: "ps:InstgRmbrsmntAgt"}})
	e.EncodeElement(v.InstgRmbrsmntAgtAcct, xml.StartElement{Name: xml.Name{Local: "ps:InstgRmbrsmntAgtAcct"}})
	e.EncodeElement(v.InstdRmbrsmntAgt, xml.StartElement{Name: xml.Name{Local: "ps:InstdRmbrsmntAgt"}})
	e.EncodeElement(v.InstdRmbrsmntAgtAcct, xml.StartElement{Name: xml.Name{Local: "ps:InstdRmbrsmntAgtAcct"}})
	e.EncodeElement(v.ThrdRmbrsmntAgt, xml.StartElement{Name: xml.Name{Local: "ps:ThrdRmbrsmntAgt"}})
	e.EncodeElement(v.ThrdRmbrsmntAgtAcct, xml.StartElement{Name: xml.Name{Local: "ps:ThrdRmbrsmntAgtAcct"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type StatusReason6Choice struct {
	Cd    *ExternalStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v StatusReason6Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type StatusReasonInformation12 struct {
	Orgtr    *PartyIdentification135 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Orgtr,omitempty"`
	Rsn      *StatusReason6Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Rsn,omitempty"`
	AddtlInf []*Max105Text           `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AddtlInf,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v StatusReasonInformation12) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Orgtr, xml.StartElement{Name: xml.Name{Local: "ps:Orgtr"}})
	e.EncodeElement(v.Rsn, xml.StartElement{Name: xml.Name{Local: "ps:Rsn"}})
	e.EncodeElement(v.AddtlInf, xml.StartElement{Name: xml.Name{Local: "ps:AddtlInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type StructuredRemittanceInformation16 struct {
	RfrdDocInf  []*ReferredDocumentInformation7 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 RfrdDocInf,omitempty"`
	RfrdDocAmt  *RemittanceAmount2              `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 RfrdDocAmt,omitempty"`
	CdtrRefInf  *CreditorReferenceInformation2  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CdtrRefInf,omitempty"`
	Invcr       *PartyIdentification135         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Invcr,omitempty"`
	Invcee      *PartyIdentification135         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Invcee,omitempty"`
	TaxRmt      *TaxInformation7                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TaxRmt,omitempty"`
	GrnshmtRmt  *Garnishment3                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 GrnshmtRmt,omitempty"`
	AddtlRmtInf []*Max140Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AddtlRmtInf,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v StructuredRemittanceInformation16) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.RfrdDocInf, xml.StartElement{Name: xml.Name{Local: "ps:RfrdDocInf"}})
	e.EncodeElement(v.RfrdDocAmt, xml.StartElement{Name: xml.Name{Local: "ps:RfrdDocAmt"}})
	e.EncodeElement(v.CdtrRefInf, xml.StartElement{Name: xml.Name{Local: "ps:CdtrRefInf"}})
	e.EncodeElement(v.Invcr, xml.StartElement{Name: xml.Name{Local: "ps:Invcr"}})
	e.EncodeElement(v.Invcee, xml.StartElement{Name: xml.Name{Local: "ps:Invcee"}})
	e.EncodeElement(v.TaxRmt, xml.StartElement{Name: xml.Name{Local: "ps:TaxRmt"}})
	e.EncodeElement(v.GrnshmtRmt, xml.StartElement{Name: xml.Name{Local: "ps:GrnshmtRmt"}})
	e.EncodeElement(v.AddtlRmtInf, xml.StartElement{Name: xml.Name{Local: "ps:AddtlRmtInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SupplementaryData1 struct {
	PlcAndNm *Max350Text                `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Envlp"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SupplementaryData1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.PlcAndNm, xml.StartElement{Name: xml.Name{Local: "ps:PlcAndNm"}})
	e.EncodeElement(v.Envlp, xml.StartElement{Name: xml.Name{Local: "ps:Envlp"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TaxAmount2 struct {
	Rate         *PercentageRate                    `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Rate,omitempty"`
	TaxblBaseAmt *ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TaxblBaseAmt,omitempty"`
	TtlAmt       *ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TtlAmt,omitempty"`
	Dtls         []*TaxRecordDetails2               `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Dtls,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxAmount2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Rate, xml.StartElement{Name: xml.Name{Local: "ps:Rate"}})
	e.EncodeElement(v.TaxblBaseAmt, xml.StartElement{Name: xml.Name{Local: "ps:TaxblBaseAmt"}})
	e.EncodeElement(v.TtlAmt, xml.StartElement{Name: xml.Name{Local: "ps:TtlAmt"}})
	e.EncodeElement(v.Dtls, xml.StartElement{Name: xml.Name{Local: "ps:Dtls"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type TaxAmountAndType1 struct {
	Tp  *TaxAmountType1Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp,omitempty"`
	Amt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Amt"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxAmountAndType1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ps:Amt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type TaxAmountType1Choice struct {
	Cd    *ExternalTaxAmountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cd,omitempty"`
	Prtry *Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prtry,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxAmountType1Choice) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cd, xml.StartElement{Name: xml.Name{Local: "ps:Cd"}})
	e.EncodeElement(v.Prtry, xml.StartElement{Name: xml.Name{Local: "ps:Prtry"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type TaxAuthorisation1 struct {
	Titl *Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Titl,omitempty"`
	Nm   *Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Nm,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxAuthorisation1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Titl, xml.StartElement{Name: xml.Name{Local: "ps:Titl"}})
	e.EncodeElement(v.Nm, xml.StartElement{Name: xml.Name{Local: "ps:Nm"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type TaxInformation7 struct {
	Cdtr            *TaxParty1                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Cdtr,omitempty"`
	Dbtr            *TaxParty2                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Dbtr,omitempty"`
	UltmtDbtr       *TaxParty2                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 UltmtDbtr,omitempty"`
	AdmstnZone      *Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AdmstnZone,omitempty"`
	RefNb           *Max140Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 RefNb,omitempty"`
	Mtd             *Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Mtd,omitempty"`
	TtlTaxblBaseAmt *ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TtlTaxblBaseAmt,omitempty"`
	TtlTaxAmt       *ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TtlTaxAmt,omitempty"`
	Dt              *rtp.ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Dt,omitempty"`
	SeqNb           *Number                            `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 SeqNb,omitempty"`
	Rcrd            []*TaxRecord2                      `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Rcrd,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxInformation7) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Cdtr, xml.StartElement{Name: xml.Name{Local: "ps:Cdtr"}})
	e.EncodeElement(v.Dbtr, xml.StartElement{Name: xml.Name{Local: "ps:Dbtr"}})
	e.EncodeElement(v.UltmtDbtr, xml.StartElement{Name: xml.Name{Local: "ps:UltmtDbtr"}})
	e.EncodeElement(v.AdmstnZone, xml.StartElement{Name: xml.Name{Local: "ps:AdmstnZone"}})
	e.EncodeElement(v.RefNb, xml.StartElement{Name: xml.Name{Local: "ps:RefNb"}})
	e.EncodeElement(v.Mtd, xml.StartElement{Name: xml.Name{Local: "ps:Mtd"}})
	e.EncodeElement(v.TtlTaxblBaseAmt, xml.StartElement{Name: xml.Name{Local: "ps:TtlTaxblBaseAmt"}})
	e.EncodeElement(v.TtlTaxAmt, xml.StartElement{Name: xml.Name{Local: "ps:TtlTaxAmt"}})
	e.EncodeElement(v.Dt, xml.StartElement{Name: xml.Name{Local: "ps:Dt"}})
	e.EncodeElement(v.SeqNb, xml.StartElement{Name: xml.Name{Local: "ps:SeqNb"}})
	e.EncodeElement(v.Rcrd, xml.StartElement{Name: xml.Name{Local: "ps:Rcrd"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type TaxParty1 struct {
	TaxId  *Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TaxId,omitempty"`
	RegnId *Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 RegnId,omitempty"`
	TaxTp  *Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TaxTp,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxParty1) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.TaxId, xml.StartElement{Name: xml.Name{Local: "ps:TaxId"}})
	e.EncodeElement(v.RegnId, xml.StartElement{Name: xml.Name{Local: "ps:RegnId"}})
	e.EncodeElement(v.TaxTp, xml.StartElement{Name: xml.Name{Local: "ps:TaxTp"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type TaxParty2 struct {
	TaxId   *Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TaxId,omitempty"`
	RegnId  *Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 RegnId,omitempty"`
	TaxTp   *Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TaxTp,omitempty"`
	Authstn *TaxAuthorisation1 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Authstn,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxParty2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.TaxId, xml.StartElement{Name: xml.Name{Local: "ps:TaxId"}})
	e.EncodeElement(v.RegnId, xml.StartElement{Name: xml.Name{Local: "ps:RegnId"}})
	e.EncodeElement(v.TaxTp, xml.StartElement{Name: xml.Name{Local: "ps:TaxTp"}})
	e.EncodeElement(v.Authstn, xml.StartElement{Name: xml.Name{Local: "ps:Authstn"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type TaxPeriod2 struct {
	Yr     *rtp.ISODate          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Yr,omitempty"`
	Tp     *TaxRecordPeriod1Code `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp,omitempty"`
	FrToDt *DatePeriod2          `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 FrToDt,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxPeriod2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Yr, xml.StartElement{Name: xml.Name{Local: "ps:Yr"}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.FrToDt, xml.StartElement{Name: xml.Name{Local: "ps:FrToDt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type TaxRecord2 struct {
	Tp       *Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Tp,omitempty"`
	Ctgy     *Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Ctgy,omitempty"`
	CtgyDtls *Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CtgyDtls,omitempty"`
	DbtrSts  *Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 DbtrSts,omitempty"`
	CertId   *Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 CertId,omitempty"`
	FrmsCd   *Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 FrmsCd,omitempty"`
	Prd      *TaxPeriod2 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prd,omitempty"`
	TaxAmt   *TaxAmount2 `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 TaxAmt,omitempty"`
	AddtlInf *Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 AddtlInf,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxRecord2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Tp, xml.StartElement{Name: xml.Name{Local: "ps:Tp"}})
	e.EncodeElement(v.Ctgy, xml.StartElement{Name: xml.Name{Local: "ps:Ctgy"}})
	e.EncodeElement(v.CtgyDtls, xml.StartElement{Name: xml.Name{Local: "ps:CtgyDtls"}})
	e.EncodeElement(v.DbtrSts, xml.StartElement{Name: xml.Name{Local: "ps:DbtrSts"}})
	e.EncodeElement(v.CertId, xml.StartElement{Name: xml.Name{Local: "ps:CertId"}})
	e.EncodeElement(v.FrmsCd, xml.StartElement{Name: xml.Name{Local: "ps:FrmsCd"}})
	e.EncodeElement(v.Prd, xml.StartElement{Name: xml.Name{Local: "ps:Prd"}})
	e.EncodeElement(v.TaxAmt, xml.StartElement{Name: xml.Name{Local: "ps:TaxAmt"}})
	e.EncodeElement(v.AddtlInf, xml.StartElement{Name: xml.Name{Local: "ps:AddtlInf"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type TaxRecordDetails2 struct {
	Prd *TaxPeriod2                       `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Prd,omitempty"`
	Amt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 Amt"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TaxRecordDetails2) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Prd, xml.StartElement{Name: xml.Name{Local: "ps:Prd"}})
	e.EncodeElement(v.Amt, xml.StartElement{Name: xml.Name{Local: "ps:Amt"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// XSD SimpleType declarations

type ActiveOrHistoricCurrencyAndAmountSimpleType rtp.Amount

func (a ActiveOrHistoricCurrencyAndAmountSimpleType) MarshalText() ([]byte, error) {
	return rtp.Amount(a).MarshalText()
}

type ActiveOrHistoricCurrencyCode string

type AddressType2Code string

const AddressType2CodeAddr AddressType2Code = "ADDR"
const AddressType2CodePbox AddressType2Code = "PBOX"
const AddressType2CodeHome AddressType2Code = "HOME"
const AddressType2CodeBizz AddressType2Code = "BIZZ"
const AddressType2CodeMlto AddressType2Code = "MLTO"
const AddressType2CodeDlvy AddressType2Code = "DLVY"

type AnyBICDec2014Identifier string

type BICFIDec2014Identifier string

type ClearingChannel2Code string

const ClearingChannel2CodeRtgs ClearingChannel2Code = "RTGS"
const ClearingChannel2CodeRtns ClearingChannel2Code = "RTNS"
const ClearingChannel2CodeMpns ClearingChannel2Code = "MPNS"
const ClearingChannel2CodeBook ClearingChannel2Code = "BOOK"

type CountryCode string

type CreditDebitCode string

const CreditDebitCodeCrdt CreditDebitCode = "CRDT"
const CreditDebitCodeDbit CreditDebitCode = "DBIT"

type DecimalNumber float64

type DocumentType3Code string

const DocumentType3CodeRadm DocumentType3Code = "RADM"
const DocumentType3CodeRpin DocumentType3Code = "RPIN"
const DocumentType3CodeFxdr DocumentType3Code = "FXDR"
const DocumentType3CodeDisp DocumentType3Code = "DISP"
const DocumentType3CodePuor DocumentType3Code = "PUOR"
const DocumentType3CodeScor DocumentType3Code = "SCOR"

type DocumentType6Code string

const DocumentType6CodeMsin DocumentType6Code = "MSIN"
const DocumentType6CodeCnfa DocumentType6Code = "CNFA"
const DocumentType6CodeDnfa DocumentType6Code = "DNFA"
const DocumentType6CodeCinv DocumentType6Code = "CINV"
const DocumentType6CodeCren DocumentType6Code = "CREN"
const DocumentType6CodeDebn DocumentType6Code = "DEBN"
const DocumentType6CodeHiri DocumentType6Code = "HIRI"
const DocumentType6CodeSbin DocumentType6Code = "SBIN"
const DocumentType6CodeCmcn DocumentType6Code = "CMCN"
const DocumentType6CodeSoac DocumentType6Code = "SOAC"
const DocumentType6CodeDisp DocumentType6Code = "DISP"
const DocumentType6CodeBold DocumentType6Code = "BOLD"
const DocumentType6CodeVchr DocumentType6Code = "VCHR"
const DocumentType6CodeAroi DocumentType6Code = "AROI"
const DocumentType6CodeTsut DocumentType6Code = "TSUT"
const DocumentType6CodePuor DocumentType6Code = "PUOR"

type Exact2NumericText string

type Exact4AlphaNumericText string

type ExternalAccountIdentification1Code string

type ExternalCashAccountType1Code string

type ExternalCashClearingSystem1Code string

type ExternalCategoryPurpose1Code string

type ExternalClearingSystemIdentification1Code string

type ExternalDiscountAmountType1Code string

type ExternalDocumentLineType1Code string

type ExternalFinancialInstitutionIdentification1Code string

type ExternalGarnishmentType1Code string

type ExternalLocalInstrument1Code string

type ExternalMandateSetupReason1Code string

type ExternalOrganisationIdentification1Code string

type ExternalPaymentGroupStatus1Code string

type ExternalPaymentTransactionStatus1Code string

type ExternalPersonIdentification1Code string

type ExternalProxyAccountType1Code string

type ExternalPurpose1Code string

type ExternalServiceLevel1Code string

type ExternalStatusReason1Code string

type ExternalTaxAmountType1Code string

type Frequency6Code string

const Frequency6CodeYear Frequency6Code = "YEAR"
const Frequency6CodeMnth Frequency6Code = "MNTH"
const Frequency6CodeQurt Frequency6Code = "QURT"
const Frequency6CodeMian Frequency6Code = "MIAN"
const Frequency6CodeWeek Frequency6Code = "WEEK"
const Frequency6CodeDail Frequency6Code = "DAIL"
const Frequency6CodeAdho Frequency6Code = "ADHO"
const Frequency6CodeInda Frequency6Code = "INDA"
const Frequency6CodeFrtn Frequency6Code = "FRTN"

type IBAN2007Identifier string

type LEIIdentifier string

type Max1025Text string

type Max105Text string

type Max128Text string

type Max140Text string

type Max15NumericText string

type Max16Text string

type Max2048Text string

type Max34Text string

type Max350Text string

type Max35Text string

type Max4Text string

type Max70Text string

type NamePrefix2Code string

const NamePrefix2CodeDoct NamePrefix2Code = "DOCT"
const NamePrefix2CodeMadm NamePrefix2Code = "MADM"
const NamePrefix2CodeMiss NamePrefix2Code = "MISS"
const NamePrefix2CodeMist NamePrefix2Code = "MIST"
const NamePrefix2CodeMiks NamePrefix2Code = "MIKS"

type Number float64

type PaymentMethod4Code string

const PaymentMethod4CodeChk PaymentMethod4Code = "CHK"
const PaymentMethod4CodeTrf PaymentMethod4Code = "TRF"
const PaymentMethod4CodeDd PaymentMethod4Code = "DD"
const PaymentMethod4CodeTra PaymentMethod4Code = "TRA"

type PercentageRate float64

type PhoneNumber string

type PreferredContactMethod1Code string

const PreferredContactMethod1CodeLett PreferredContactMethod1Code = "LETT"
const PreferredContactMethod1CodeMail PreferredContactMethod1Code = "MAIL"
const PreferredContactMethod1CodePhon PreferredContactMethod1Code = "PHON"
const PreferredContactMethod1CodeFaxx PreferredContactMethod1Code = "FAXX"
const PreferredContactMethod1CodeCell PreferredContactMethod1Code = "CELL"

type Priority2Code string

const Priority2CodeHigh Priority2Code = "HIGH"
const Priority2CodeNorm Priority2Code = "NORM"

type SequenceType3Code string

const SequenceType3CodeFrst SequenceType3Code = "FRST"
const SequenceType3CodeRcur SequenceType3Code = "RCUR"
const SequenceType3CodeFnal SequenceType3Code = "FNAL"
const SequenceType3CodeOoff SequenceType3Code = "OOFF"
const SequenceType3CodeRpre SequenceType3Code = "RPRE"

type SettlementMethod1Code string

const SettlementMethod1CodeInda SettlementMethod1Code = "INDA"
const SettlementMethod1CodeInga SettlementMethod1Code = "INGA"
const SettlementMethod1CodeCove SettlementMethod1Code = "COVE"
const SettlementMethod1CodeClrg SettlementMethod1Code = "CLRG"

type TaxRecordPeriod1Code string

const TaxRecordPeriod1CodeMm01 TaxRecordPeriod1Code = "MM01"
const TaxRecordPeriod1CodeMm02 TaxRecordPeriod1Code = "MM02"
const TaxRecordPeriod1CodeMm03 TaxRecordPeriod1Code = "MM03"
const TaxRecordPeriod1CodeMm04 TaxRecordPeriod1Code = "MM04"
const TaxRecordPeriod1CodeMm05 TaxRecordPeriod1Code = "MM05"
const TaxRecordPeriod1CodeMm06 TaxRecordPeriod1Code = "MM06"
const TaxRecordPeriod1CodeMm07 TaxRecordPeriod1Code = "MM07"
const TaxRecordPeriod1CodeMm08 TaxRecordPeriod1Code = "MM08"
const TaxRecordPeriod1CodeMm09 TaxRecordPeriod1Code = "MM09"
const TaxRecordPeriod1CodeMm10 TaxRecordPeriod1Code = "MM10"
const TaxRecordPeriod1CodeMm11 TaxRecordPeriod1Code = "MM11"
const TaxRecordPeriod1CodeMm12 TaxRecordPeriod1Code = "MM12"
const TaxRecordPeriod1CodeQtr1 TaxRecordPeriod1Code = "QTR1"
const TaxRecordPeriod1CodeQtr2 TaxRecordPeriod1Code = "QTR2"
const TaxRecordPeriod1CodeQtr3 TaxRecordPeriod1Code = "QTR3"
const TaxRecordPeriod1CodeQtr4 TaxRecordPeriod1Code = "QTR4"
const TaxRecordPeriod1CodeHlf1 TaxRecordPeriod1Code = "HLF1"
const TaxRecordPeriod1CodeHlf2 TaxRecordPeriod1Code = "HLF2"

type TrueFalseIndicator bool

type UUIDv4Identifier string
