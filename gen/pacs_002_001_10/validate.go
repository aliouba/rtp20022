// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10
package pacs_002_001_10

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}

	rtp.AddError(&errs, v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FIToFIPmtStsRpt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FIToFIPaymentStatusReportV10) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.GrpHdr.Validate())
	rtp.AddError(&errs, v.OrgnlGrpInfAndSts.Validate())
	rtp.AddError(&errs, v.TxInfAndSts.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FIToFIPaymentStatusReportV10TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.GrpHdr.Validate())
	rtp.AddError(&errs, v.OrgnlGrpInfAndSts.Validate())
	rtp.AddError(&errs, v.TxInfAndSts.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader91) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader91TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MsgId.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupHeader17) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, v.OrgnlMsgNmId.Validate())
	rtp.AddError(&errs, v.OrgnlCreDtTm.Validate())
	rtp.AddError(&errs, v.OrgnlNbOfTxs.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupHeader17TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, v.OrgnlMsgNmId.Validate())
	rtp.AddError(&errs, v.OrgnlCreDtTm.Validate())
	rtp.AddError(&errs, v.OrgnlNbOfTxs.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalTransactionReference28) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.IntrBkSttlmAmt != nil {
		rtp.AddError(&errs, v.IntrBkSttlmAmt.Validate())
	}
	if v.IntrBkSttlmDt != nil {
		rtp.AddError(&errs, v.IntrBkSttlmDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransaction110) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlInstrId.Validate())
	if v.OrgnlTxId != nil {
		rtp.AddError(&errs, v.OrgnlTxId.Validate())
	}
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, v.OrgnlUETR.Validate())
	}
	rtp.AddError(&errs, v.TxSts.Validate())
	if v.StsRsnInf != nil {
		rtp.AddError(&errs, v.StsRsnInf.Validate())
	}
	rtp.AddError(&errs, v.AccptncDtTm.Validate())
	if v.ClrSysRef != nil {
		rtp.AddError(&errs, v.ClrSysRef.Validate())
	}
	rtp.AddError(&errs, v.InstgAgt.Validate())
	rtp.AddError(&errs, v.InstdAgt.Validate())
	if v.OrgnlTxRef != nil {
		rtp.AddError(&errs, v.OrgnlTxRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransaction110TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.OrgnlInstrId.Validate())
	if v.OrgnlTxId != nil {
		rtp.AddError(&errs, v.OrgnlTxId.Validate())
	}
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, v.OrgnlUETR.Validate())
	}
	rtp.AddError(&errs, v.TxSts.Validate())
	if v.StsRsnInf != nil {
		rtp.AddError(&errs, v.StsRsnInf.Validate())
	}
	rtp.AddError(&errs, v.AccptncDtTm.Validate())
	if v.ClrSysRef != nil {
		rtp.AddError(&errs, v.ClrSysRef.Validate())
	}
	rtp.AddError(&errs, v.InstgAgt.Validate())
	rtp.AddError(&errs, v.InstdAgt.Validate())
	if v.OrgnlTxRef != nil {
		rtp.AddError(&errs, v.OrgnlTxRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatusReason6Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Cd != nil {
		rtp.AddError(&errs, v.Cd.Validate())
	}
	if v.Prtry != nil {
		rtp.AddError(&errs, v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatusReason6ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Cd != nil {
		rtp.AddError(&errs, v.Cd.Validate())
	}
	if v.Prtry != nil {
		rtp.AddError(&errs, v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatusReasonInformation12) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Rsn != nil {
		rtp.AddError(&errs, v.Rsn.Validate())
	}
	if v.AddtlInf != nil {
		rtp.AddError(&errs, v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatusReasonInformation12TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Rsn != nil {
		rtp.AddError(&errs, v.Rsn.Validate())
	}
	if v.AddtlInf != nil {
		rtp.AddError(&errs, v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[A-Z]{3,3}`))
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "USD"))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ExternalPaymentTransactionStatus1Code) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "ACTC", "ACWP", "RCVD", "RJCT"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 4))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ExternalStatusReason1Code) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "AC02", "AC03", "AC04", "AC06", "AC11", "AC13", "AC14", "AG01", "AG03", "AGNT", "AM02", "AM04", "AM09", "AM12", "AM13", "AM14", "BE04", "BE06", "BE07", "BE10", "BE11", "BE16", "BE17", "DS0H", "DS24", "DT04", "DUPL", "FF02", "FF08", "MD07", "NARR", "RC01", "RC02", "RC03", "RC04", "SL03", "TK01", "TK02", "TK03", "TK04", "TK05", "TK06", "TK07", "TK08", "TK09", "TM01"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 4))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max105Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 105))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max1NumericText) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[1]{1,1}`))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `M[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 9))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 9))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrigMsgName) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "acmt.022.001.02", "camt.026.001.07", "camt.028.001.09", "camt.029.001.09", "camt.035.001.05", "camt.056.001.08", "pacs.002.001.10", "pacs.008.001.08", "pacs.009.001.08", "pacs.028.001.03", "pain.013.001.07", "pain.014.001.07", "remt.001.001.04"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryReasonCode) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "1100", "9909", "9910", "9912", "9914", "9934", "9946", "9947", "9948", "9952", "9953", "9954", "9956", "9957", "9964", "NOAT"))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UUIDv4Identifier) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`))
	if errs.Empty() {
		return nil
	}
	return errs
}
