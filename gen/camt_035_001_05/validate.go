// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.035.001.05
package camt_035_001_05

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Assgnr.Validate())
	rtp.AddError(&errs, v.Assgne.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Id.Validate())
	rtp.AddError(&errs, v.Assgnr.Validate())
	rtp.AddError(&errs, v.Assgne.Validate())
	rtp.AddError(&errs, v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.PrtryFrmtInvstgtn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Pty != nil {
		rtp.AddError(&errs, v.Pty.Validate())
	}
	if v.Agt != nil {
		rtp.AddError(&errs, v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Agt != nil {
		rtp.AddError(&errs, v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Pty != nil {
		rtp.AddError(&errs, v.Pty.Validate())
	}
	if v.Agt != nil {
		rtp.AddError(&errs, v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Nm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Nm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryData6Reduced) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Ustrd != nil {
		rtp.AddError(&errs, v.Ustrd.Validate())
	}
	rtp.AddError(&errs, v.OrigRefs.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryData6ReducedTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if v.Ustrd != nil {
		rtp.AddError(&errs, v.Ustrd.Validate())
	}
	rtp.AddError(&errs, v.OrigRefs.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryData7TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Tp.Validate())
	rtp.AddError(&errs, v.Data.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryData7TCHTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Tp.Validate())
	rtp.AddError(&errs, v.Data.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryFormatInvestigationV05) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Assgnmt.Validate())
	rtp.AddError(&errs, v.Case.Validate())
	rtp.AddError(&errs, v.PrtryData.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryFormatInvestigationV05TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.Assgnmt.Validate())
	rtp.AddError(&errs, v.Case.Validate())
	rtp.AddError(&errs, v.PrtryData.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionReferences8Reduced) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.InstrId.Validate())
	rtp.AddError(&errs, v.EndToEndId.Validate())
	rtp.AddError(&errs, v.TxId.Validate())
	if v.UETR != nil {
		rtp.AddError(&errs, v.UETR.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionReferences8ReducedTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, v.InstrId.Validate())
	rtp.AddError(&errs, v.EndToEndId.Validate())
	rtp.AddError(&errs, v.TxId.Validate())
	if v.UETR != nil {
		rtp.AddError(&errs, v.UETR.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Max140Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 140))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35Text) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `M[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 35))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 9))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 9))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Max35TextTCH3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidateEnumeration(string(v), "ACK", "ACWP"))
	rtp.AddError(&errs, rtp.ValidateMinLength(string(v), 1))
	rtp.AddError(&errs, rtp.ValidateMaxLength(string(v), 4))
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UUIDv4Identifier) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	rtp.AddError(&errs, rtp.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`))
	if errs.Empty() {
		return nil
	}
	return errs
}
