// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Models for {{ .TargetNamespace }}
package {{ .GoPackageName }}

import (
    {{- range .GoImportsNeeded }}
        "{{ . }}"
    {{- end }}

    "github.com/moov-io/rtp20022/pkg/rtp"
)

{{ if .ExportableElements -}}
    // XSD Elements
{{ end -}}
{{ range .ExportableElements }}
    {{ if eq .GoName "Message" }}
        {{ template "Message" . }}
    {{ else }}
        {{ template "Element" . }}
    {{ end }}
{{ end }}

{{ if .ExportableComplexTypes -}}
    // XSD ComplexType declarations
{{ end }}
{{ range .ExportableComplexTypes }}
    {{ if eq .GoName "SignatureEnvelope" }}
        {{ template "SignatureEnvelope" . }}
    {{ else if eq .GoName "HdrAndData" }}
    {{ else }}
        {{ template "ComplexType" . }}
    {{ end }}
{{ end }}

{{ if .ExportableSimpleTypes -}}
    // XSD SimpleType declarations
{{ end }}
{{ range .ExportableSimpleTypes }}
    {{ if eq .GoName "ActiveCurrencyAndAmountSimpleType" }}
        {{ template "ActiveCurrencyAndAmountSimpleType" . }}
    {{ else if eq .GoName "ActiveOrHistoricCurrencyAndAmountSimpleType" }}
        {{ template "ActiveOrHistoricCurrencyAndAmountSimpleType" . }}
    {{ else if eq .GoName "ISODate" }}
    {{ else if eq .GoName "ISODateTime" }}
    {{ else if eq .GoName "ISONormalisedDateTime" }}
    {{ else if eq .GoName "ISOTime" }}
    {{ else if eq .GoName "Max20000Text" }}
    {{ else }}
        type {{ .GoName }} {{ .GoTypeName }}
    {{ end }}

    {{- $simpleType := . -}}
    {{- range .Enums }}
        const {{ $simpleType.GoName -}} {{- .GoName }} {{ $simpleType.GoName }} = "{{ .XmlName }}"
    {{- end }}
{{ end }}

{{ define "Element" }}
    type {{ .GoName }} struct {
        XMLName xml.Name
        {{- if .ContainsText }}
            Value {{ .SimpleContent.Extension.GoName }} `xml:",chardata"`
        {{- end }}
        {{- range .Attributes }}
            {{ .GoName }} {{ if eq .Use "optional" }}*{{ end }}{{ .GoForeignModule }}{{ .GoType }} `xml:"{{ .XmlName }},attr{{ if eq .Use "optional" }},omitempty{{ end }}"`
        {{- end }}
        {{- range .Elements }}
            {{ .GoFieldName }} {{ if .Array }}[]{{ end }}{{ if eq .MinOccurs "0" }}*{{ end }}{{ .GoForeignModule }}{{ .GoTypeName }} `xml:"{{ .TargetNamespace }} {{ .Name }}{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
        {{- end }}
    }

    {{ $elemLen := len .Elements }}{{ if gt $elemLen 0 }}{{ if ne .NsPrefix "" }}
        // MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
        func (v {{ .GoName }}) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
            e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
            {{- range .Elements }}
                e.EncodeElement(v.{{ .GoFieldName }}, xml.StartElement{Name: xml.Name{Local: "{{ .NsPrefix }}:{{ .Name }}"}})
            {{- end }}
            e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
            return nil
        }
    {{ end }}{{ end }}
{{ end }}

{{ define "ComplexType" }}
    type {{ .GoName }} struct {
        {{- if eq .GoName "Document" }}
            XMLName xml.Name
        {{- end }}
        {{- if .ContainsText }}
            Value {{ .SimpleContent.Extension.GoName }} `xml:",chardata"`
        {{- end }}
        {{- range .Attributes }}
            {{ .GoName }} {{ if eq .Use "optional" }}*{{ end }}{{ .GoForeignModule }}{{ .GoType }} `xml:"{{ .XmlName }},attr{{ if eq .Use "optional" }},omitempty{{ end }}"`
        {{- end }}
        {{- range .Elements }}
            {{- $elemGoForeignModule := .GoForeignModule -}}
            {{- $elemGoTypeName := .GoTypeName -}}
            {{- if eq .GoTypeName "ISODate" -}}
                {{- $elemGoForeignModule = "rtp." -}}
            {{- else if eq .GoTypeName "ISODateTime" -}}
                {{- $elemGoForeignModule = "rtp." -}}
            {{- else if eq .GoTypeName "ISONormalisedDateTime" -}}
                {{- $elemGoForeignModule = "rtp." -}}
            {{- else if eq .GoTypeName "ISOTime" -}}
                {{- $elemGoForeignModule = "rtp." -}}
            {{- else if eq .GoTypeName "Max20000Text" -}}
                {{- $elemGoForeignModule = "rtp." -}}
                {{- $elemGoTypeName = "Cdata" -}}
            {{- else if eq .GoTypeName "SignatureEnvelope" -}}
                {{- $elemGoForeignModule = "" -}}
                {{- $elemGoTypeName = "Sgntr" -}}
            {{ end }}
            {{ .GoFieldName }} {{ if .Array }}[]{{ end }}{{ if eq .MinOccurs "0" }}*{{ end }}{{ $elemGoForeignModule }}{{ $elemGoTypeName }} `xml:"{{ .TargetNamespace }} {{ .Name }}{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
        {{- end }}
        {{- if .Sequence }}
            {{- range .Sequence.Any }}
                Item {{ if eq .MinOccurs "0" }}*{{ end }}string `xml:",any{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
            {{- end }}
        {{- end }}
    }

    {{ $elemLen := len .Elements }}{{ if gt $elemLen 0 }}{{ if ne .Schema.NsPrefix "" }}
        // MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
        func (v {{ .GoName }}) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
            e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
            {{- range .Elements }}
                e.EncodeElement(v.{{ .GoFieldName }}, xml.StartElement{Name: xml.Name{Local: "{{ .NsPrefix }}:{{ .Name }}"}})
            {{- end }}
            e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
            return nil
        }
    {{ end }}{{ end }}
{{ end }}

{{ define "ActiveCurrencyAndAmountSimpleType" }}

    type ActiveCurrencyAndAmountSimpleType rtp.Amount

    func (a ActiveCurrencyAndAmountSimpleType) MarshalText() ([]byte, error) {
        return rtp.Amount(a).MarshalText()
    }
{{ end }}

{{ define "ActiveOrHistoricCurrencyAndAmountSimpleType" }}

    type ActiveOrHistoricCurrencyAndAmountSimpleType rtp.Amount

    func (a ActiveOrHistoricCurrencyAndAmountSimpleType) MarshalText() ([]byte, error) {
        return rtp.Amount(a).MarshalText()
    }
{{ end }}

{{ define "SignatureEnvelope" }}

    type Sgntr struct {
        Signature *Signature
    }
{{ end }}

{{ define "Message" }}
    type {{ .GoName }} struct {
        XMLName                 xml.Name                                     `xml:"Message"`
        Xmlns                   []xml.Attr                                   `xml:",attr"`
        {{- if .ContainsText }}
            Value {{ .SimpleContent.Extension.GoName }} `xml:",chardata"`
        {{- end }}
        {{- range .Attributes }}
            {{ .GoName }} {{ .GoForeignModule }}{{ .GoType }} `xml:"{{ .XmlName }},{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
        {{- end }}
        {{- range .Elements }}
            {{ .GoFieldName }} {{ if .Array }}[]{{ end }}{{ if eq .MinOccurs "0" }}*{{ end }}{{ .GoForeignModule }}{{ .GoTypeName }} `xml:"{{ .TargetNamespace }} {{ .Name }}{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
        {{- end }}
    }

    // UnmarshalXML is a custom unmarshaller that allows us to capture the xmlns attributes
    func (v *{{ .GoName }}) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
        for _, attr := range start.Attr {
            if (attr.Name.Space == "" && attr.Name.Local == "xmlns") || (attr.Name.Space == "xmlns") {
                newAttr := xml.Attr{}
                newAttr.Value = attr.Value
                newAttr.Name = xml.Name{}
                if attr.Name.Space == "" {
                    newAttr.Name.Local = attr.Name.Local
                } else {
                    newAttr.Name.Local = fmt.Sprintf("%s:%s", attr.Name.Space, attr.Name.Local)
                }
                v.Xmlns = append(v.Xmlns, newAttr)
            }
        }

        // Go on with unmarshalling.
        type vv {{ .GoName }}
        return d.DecodeElement((*vv)(v), &start)
    }
{{ end }}
