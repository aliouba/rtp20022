// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
{{- $targetNS := .TargetNamespace }}
{{- $nsPrefix := "ds" }}
// Models for {{ $targetNS }}{{ if ne $nsPrefix "" }} with prefix '{{ $nsPrefix }}'{{ end }}
package {{ .GoPackageName }}

import (
	"fmt"
	"github.com/moov-io/rtp20022/gen/xmldsig"
	"github.com/moov-io/rtp20022/pkg/rtp"
	{{- range .GoImportsNeeded }}
		"{{ . }}"
	{{- end }}
)

{{ if .ExportableElements -}}
	// XSD Elements
{{ end -}}
{{ range .ExportableElements }}
	{{- if eq .GoName "Signature" }}
		type {{ .GoName }} struct {
			XMLName xml.Name `xml:"{{ $targetNS }} Signature"`
			{{- range .Attributes }}
				{{ .GoName }} {{ if eq .Use "optional" }}*{{ end }}{{ .GoForeignModule }}{{ .GoType }} `xml:"{{ .XmlName }},attr{{ if eq .Use "optional" }},omitempty{{ end }}"`
			{{- end }}
			{{- range .Elements }}
				{{ .GoFieldName }} {{ if .Array }}[]{{ end }}{{ if eq .MinOccurs "0" }}*{{ end }}{{ .GoForeignModule }}{{ .GoTypeName }} `xml:"{{ .XmlName }}{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
			{{- end }}
			{{- if .ContainsText }}
				Data {{ .GoForeignModule }}{{ .GoTypeName }} `xml:",chardata"`
			{{- end }}
		}
	{{- end }}
{{ end }}

{{ if .ExportableComplexTypes -}}
	// XSD ComplexType declarations
{{ end }}
{{ range .ExportableComplexTypes }}
	{{- if ne .GoName "SignatureType" }}
		type {{ .GoName }} struct {
			{{- range .Attributes }}
				{{ .GoName }} {{ if eq .Use "optional" }}*{{ end }}{{ .GoForeignModule }}{{ .GoType }} `xml:"{{ .XmlName }},attr{{ if eq .Use "optional" }},omitempty{{ end }}"`
			{{- end }}
			{{- range .Elements }}
				{{- $goType := .GoTypeName -}}
				{{- if eq .GoFieldName "X509SerialNumber" }}
					{{- $goType = "string" -}}
				{{- end }}
				{{- $xmlTagName := .Name -}}
				{{- if .Ref }}
					{{- $xmlTagName = .Ref.Name -}}
				{{- end }}
				{{ .GoFieldName }} {{ if .Array }}[]{{ end }}{{ if eq .MinOccurs "0" }}*{{ end }}{{ .GoForeignModule }}{{ $goType }} `xml:"{{ $xmlTagName }}{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
			{{- end }}
			{{- if .ContainsText }}
				Data {{ .SimpleContent.Extension.GoName }} `xml:",chardata"`
			{{- end }}
			{{- if .Sequence }}
				{{- range .Sequence.Any }}
					Item {{ if eq .MinOccurs "0" }}*{{ end }}string `xml:",any{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
				{{- end }}
			{{- end }}
		}
	{{- end }}
{{ end }}

{{ if .ExportableSimpleTypes -}}
	// XSD SimpleType declarations
{{ end }}
{{ range .ExportableSimpleTypes }}
	type {{ .GoName }} {{ .GoTypeName }}

	{{- $simpleType := . -}}
	{{- range .Enums }}
		const {{ $simpleType.GoName -}} {{- .GoName }} {{ $simpleType.GoName }} = "{{ .XmlName }}"
	{{- end }}
{{ end }}
